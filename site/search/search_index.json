{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"0x401RevTrain-Tools 0x401 Team\u4e8c\u8fdb\u5236\u65b9\u5411\u9006\u5411\u8f85\u52a9\u5206\u6790\u5de5\u5177\u4e13\u9898\u57f9\u8bad \u4e3a\u4ec0\u4e48 \u5728\u6700\u8fd1\u7684CTF\u6bd4\u8d5b\u548c\u4e00\u4e9b\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u51fa\u73b0\u4e86\u8bb8\u591a\u5149\u9760\u4eba\u529b\u624b\u52a8\u5206\u6790\u548c\u52a8\u6001\u8c03\u8bd5\u96be\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u5f80\u5f80\u9700\u8981\u501f\u52a9\u4e00\u4e9b\u8f85\u52a9\u5206\u6790\u7684\u5de5\u5177\u6765\u5e2e\u52a9\u6211\u4eec\u534a\u81ea\u52a8\u5316\uff0c\u4e43\u81f3\u81ea\u52a8\u5316\u5730\u5b8c\u6210\u9006\u5411\u3002\u672c\u4e13\u9898\u603b\u7ed3\u4e86\u4e00\u4e9b\u9006\u5411\u8f85\u52a9\u5206\u6790\u795e\u5668\u7684\u539f\u7406\u548c\u7528\u6cd5\uff0c\u5e76\u5728\u6301\u7eed\u66f4\u65b0\u4e2d\u3002 \u5927\u7eb2 [ ] capstone \uff1a\u53cd\u6c47\u7f16\u6846\u67b6 [ ] keystone \uff1a\u6c47\u7f16\u6846\u67b6 [x] angr \uff1a\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u7b26\u53f7\u6267\u884c\u5f15\u64ce [ ] miasm \uff1a\u7efc\u5408\u4e86\u9759\u6001\u5206\u6790\u3001\u7b26\u53f7\u6267\u884c\u3001\u6a21\u62df\u6267\u884c\u3001\u52a8\u6001\u7b26\u53f7\u6267\u884c\u7684\u96c6\u5927\u6210\u9006\u5411\u6846\u67b6 [ ] unicorn \uff1a\u57fa\u4e8eQEMU\u7684\u6a21\u62df\u6267\u884c\u5f15\u64ce [ ] z3 \uff1a\u5fae\u8f6f\u5f00\u53d1\u7684\u7ea6\u675f\u6c42\u89e3\u5668\uff08\u901a\u4fd7\u4e00\u70b9\u6765\u8bf4\u5c31\u662f\u65b9\u7a0b/\u65b9\u7a0b\u7ec4\u6c42\u89e3\u5668\uff09\uff0c\u662fangr\u548cmiasm\u7684\u7ea6\u675f\u6c42\u89e3\u5b9e\u73b0 \u524d\u7f6e\u77e5\u8bc6 \u8be5\u6559\u7a0b\u7684\u96be\u5ea6\u504f\u8fdb\u9636\uff0c\u9700\u8981\u8bfb\u8005\u5177\u6709\u4e00\u5b9a\u7684\u9006\u5411\u57fa\u7840\uff0c\u4f8b\u5982\uff1a C\u8bed\u8a00\u7f16\u7a0b\u57fa\u7840 Python\u7f16\u7a0b\u57fa\u7840 x86\u6c47\u7f16\u57fa\u7840 \u4e00\u6bb5\u65f6\u95f4\u7684\u9006\u5411\u5b66\u4e60\u7ecf\u9a8c \u5982\u679c\u8bfb\u8005\u8fd8\u4e0d\u5177\u5907\u4ee5\u4e0a\u57fa\u7840\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u4ee5\u4e0b\u7684\u9014\u5f84\u5b66\u4e60\uff1a \u9006\u5411\u5165\u95e8\u7b80\u4ecb byRh Syclover \u6280\u672f\u5c0f\u7ec4\u4e8c\u8fdb\u5236\u65b9\u5411\u62db\u65b0\u57f9\u8bad \u5404\u5927\u9006\u5411\u8bba\u575b\u4ee5\u53ca\u535a\u5ba2 Google\uff08\u4e2a\u4eba\u8ba4\u4e3aGoogle\u7684\u82f1\u6587\u641c\u7d22\u548c\u4e2d\u6587\u641c\u7d22\u90fd\u4f18\u4e8e\u767e\u5ea6\uff09 \u5bf9\u672c\u6559\u7a0b\u6709\u7591\u95ee\uff1f \u8bf7\u5728SCUCTF\u534f\u4f1a\u7fa4\u5185\u8054\u7cfb 0x401-34r7hm4n \u6216\u76f4\u63a5\u5728\u672c\u4ed3\u5e93\u4e2d\u63d0\u4ea4Issues\u3002","title":"Home"},{"location":"#0x401revtrain-tools","text":"0x401 Team\u4e8c\u8fdb\u5236\u65b9\u5411\u9006\u5411\u8f85\u52a9\u5206\u6790\u5de5\u5177\u4e13\u9898\u57f9\u8bad","title":"0x401RevTrain-Tools"},{"location":"#_1","text":"\u5728\u6700\u8fd1\u7684CTF\u6bd4\u8d5b\u548c\u4e00\u4e9b\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u51fa\u73b0\u4e86\u8bb8\u591a\u5149\u9760\u4eba\u529b\u624b\u52a8\u5206\u6790\u548c\u52a8\u6001\u8c03\u8bd5\u96be\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u5f80\u5f80\u9700\u8981\u501f\u52a9\u4e00\u4e9b\u8f85\u52a9\u5206\u6790\u7684\u5de5\u5177\u6765\u5e2e\u52a9\u6211\u4eec\u534a\u81ea\u52a8\u5316\uff0c\u4e43\u81f3\u81ea\u52a8\u5316\u5730\u5b8c\u6210\u9006\u5411\u3002\u672c\u4e13\u9898\u603b\u7ed3\u4e86\u4e00\u4e9b\u9006\u5411\u8f85\u52a9\u5206\u6790\u795e\u5668\u7684\u539f\u7406\u548c\u7528\u6cd5\uff0c\u5e76\u5728\u6301\u7eed\u66f4\u65b0\u4e2d\u3002","title":"\u4e3a\u4ec0\u4e48"},{"location":"#_2","text":"[ ] capstone \uff1a\u53cd\u6c47\u7f16\u6846\u67b6 [ ] keystone \uff1a\u6c47\u7f16\u6846\u67b6 [x] angr \uff1a\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u7b26\u53f7\u6267\u884c\u5f15\u64ce [ ] miasm \uff1a\u7efc\u5408\u4e86\u9759\u6001\u5206\u6790\u3001\u7b26\u53f7\u6267\u884c\u3001\u6a21\u62df\u6267\u884c\u3001\u52a8\u6001\u7b26\u53f7\u6267\u884c\u7684\u96c6\u5927\u6210\u9006\u5411\u6846\u67b6 [ ] unicorn \uff1a\u57fa\u4e8eQEMU\u7684\u6a21\u62df\u6267\u884c\u5f15\u64ce [ ] z3 \uff1a\u5fae\u8f6f\u5f00\u53d1\u7684\u7ea6\u675f\u6c42\u89e3\u5668\uff08\u901a\u4fd7\u4e00\u70b9\u6765\u8bf4\u5c31\u662f\u65b9\u7a0b/\u65b9\u7a0b\u7ec4\u6c42\u89e3\u5668\uff09\uff0c\u662fangr\u548cmiasm\u7684\u7ea6\u675f\u6c42\u89e3\u5b9e\u73b0","title":"\u5927\u7eb2"},{"location":"#_3","text":"\u8be5\u6559\u7a0b\u7684\u96be\u5ea6\u504f\u8fdb\u9636\uff0c\u9700\u8981\u8bfb\u8005\u5177\u6709\u4e00\u5b9a\u7684\u9006\u5411\u57fa\u7840\uff0c\u4f8b\u5982\uff1a C\u8bed\u8a00\u7f16\u7a0b\u57fa\u7840 Python\u7f16\u7a0b\u57fa\u7840 x86\u6c47\u7f16\u57fa\u7840 \u4e00\u6bb5\u65f6\u95f4\u7684\u9006\u5411\u5b66\u4e60\u7ecf\u9a8c \u5982\u679c\u8bfb\u8005\u8fd8\u4e0d\u5177\u5907\u4ee5\u4e0a\u57fa\u7840\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u4ee5\u4e0b\u7684\u9014\u5f84\u5b66\u4e60\uff1a \u9006\u5411\u5165\u95e8\u7b80\u4ecb byRh Syclover \u6280\u672f\u5c0f\u7ec4\u4e8c\u8fdb\u5236\u65b9\u5411\u62db\u65b0\u57f9\u8bad \u5404\u5927\u9006\u5411\u8bba\u575b\u4ee5\u53ca\u535a\u5ba2 Google\uff08\u4e2a\u4eba\u8ba4\u4e3aGoogle\u7684\u82f1\u6587\u641c\u7d22\u548c\u4e2d\u6587\u641c\u7d22\u90fd\u4f18\u4e8e\u767e\u5ea6\uff09","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"#_4","text":"\u8bf7\u5728SCUCTF\u534f\u4f1a\u7fa4\u5185\u8054\u7cfb 0x401-34r7hm4n \u6216\u76f4\u63a5\u5728\u672c\u4ed3\u5e93\u4e2d\u63d0\u4ea4Issues\u3002","title":"\u5bf9\u672c\u6559\u7a0b\u6709\u7591\u95ee\uff1f"},{"location":"angr/00_%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/","text":"\u6b22\u8fce\u6765\u5230angr\u5c0f\u8bfe\u5802\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u901a\u8fc7\u8fd9\u4e2a\u7cfb\u5217\u6559\u7a0b\u6765\u521d\u6b65\u638c\u63e1angr\u7684\u4f7f\u7528\u4ee5\u53ca\u7b26\u53f7\u6267\u884c\u7684\u4e00\u4e9b\u539f\u7406\u548c\u601d\u60f3\u3002 \u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a\u4ec0\u4e48\u662fangr\u5462\uff1f\u7b80\u5355\u6765\u8bf4\uff0cangr\u662f\u76ee\u524d\u6700\u597d\u7528\u7684\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u4e4b\u4e00\uff0c\u662f\u9006\u5411\u8f85\u52a9\u5206\u6790\u7684\u795e\u5668\u3002\u7b26\u53f7\u6267\u884c\u662fangr\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u53ef\u4ee5\u8bf4\u5982\u679c\u4e0d\u80fd\u5145\u5206\u7406\u89e3\u7b26\u53f7\u6267\u884c\u80cc\u540e\u539f\u7406\uff0c\u5c31\u5f88\u96be\u7075\u6d3b\u4f7f\u7528angr\uff0c\u6240\u4ee5angr\u8fd9\u4e2a\u7cfb\u5217\u7684\u6559\u7a0b\u6211\u4eec\u4ece\u7b26\u53f7\u6267\u884c\u539f\u7406\u8bb2\u8d77\u3002 0x00. \u524d\u7f6e\u77e5\u8bc6\u4e0e\u53c2\u8003\u8d44\u6599 \u9605\u8bfb\u672c\u7cfb\u5217\u6559\u7a0b\u8bfb\u8005\u9700\u8981\u5177\u5907\u4ee5\u4e0b\u57fa\u7840\uff1a \u9006\u5411\u57fa\u7840 x86\u6c47\u7f16\u57fa\u7840 C/C++\u548cPython\u7f16\u7a0b\u57fa\u7840 \u4e00\u4e9b\u7b26\u53f7\u6267\u884c\u7684\u79d1\u666e\u8d44\u6599\uff1a Symbolic Execution for Software Testing Three Decades Later \u4e00\u7bc7\u7b80\u77ed\u4e14\u901a\u4fd7\u6613\u61c2\u7684\u8bba\u6587\uff0c\u6ca1\u6709\u5f88\u591a\u62bd\u8c61\u7684\u5b9a\u4e49\uff0c\u9002\u5408\u5165\u95e8\u5b66\u4e60 \u7b26\u53f7\u6267\u884c\u5165\u95e8 \u57fa\u672c\u4e0a\u662f\u4e0a\u9762\u90a3\u7bc7\u8bba\u6587\u7684\u7ffb\u8bd1\uff0c\u9002\u5408\u4e0e\u539f\u6587\u5bf9\u7167\u5b66\u4e60 0x01. \u4ec0\u4e48\u662f\u7b26\u53f7\u6267\u884c \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u7a0b\u5e8f\u5e76 \u7ed9\u5b9a\u7a0b\u5e8f\u6240\u9700\u8981\u7684\u6240\u6709\u8f93\u5165 \u65f6\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6267\u884c\u8def\u5f84\u662f \u786e\u5b9a \u5e76\u4e14 \u552f\u4e00 \u7684\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u4f2a\u4ee3\u7801\u6765\u8bf4\u660e\uff1a int main(){ x = input(); y = input(); z = 2 * y; if(x == z){ if(x > y + 10){ print(\"Path-1\"); }else{ print(\"Path-2\"); } }else{ print(\"Path-3\"); } } input\u51fd\u6570\u8868\u793a\u83b7\u53d6\u7528\u6237\u8f93\u5165\uff0cprint\u51fd\u6570\u5c31\u662f\u5b57\u9762\u610f\u601d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u753b\u51fa\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u7a0b\u56fe\uff08Control Flow Graph\uff09\uff1a \u5047\u8bbe\u7528\u6237\u7684\u8f93\u5165\u662f{x = 2, y = 1}\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u6cbf\u7740\u7ea2\u8272\u7ebf\u6761\u6807\u8bb0\u7684\u8def\u5f84\u6267\u884c\uff0c\u5176\u8def\u5f84\u662f\u786e\u5b9a\u4e14\u552f\u4e00\u7684\uff0c\u5176\u4ed6\u8f93\u5165\u4e5f\u540c\u7406\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u5f53\u7a0b\u5e8f\u7684\u8f93\u5165\u786e\u5b9a\u65f6\uff0c\u8fd9\u79cd\u6267\u884c\u5c31\u53eb\u505a \u5177\u4f53\u6267\u884c \uff1a \u5982\u679c\u73b0\u5728input\u51fd\u6570\u4e0d\u662f\u83b7\u53d6\u7528\u6237\u7684\u5177\u4f53\u8f93\u5165\uff0c\u800c\u662f\u76f4\u63a5\u83b7\u53d6\u4e00\u4e2a\u5bf9\u5e94\u7684 \u7b26\u53f7\u503c \u5462\uff1f\u4f8b\u5982{x = x sym , y = y sym }\u3002\u5f53\u7a0b\u5e8f\u7684\u8f93\u5165\u7531\u5177\u4f53\u7684\u503c\u53d8\u6210\u4e86\u7b26\u53f7\u503c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u8fd0\u884c\u7531\u5177\u4f53\u6267\u884c\u53d8\u6210\u4e86 \u7b26\u53f7\u6267\u884c\uff08Symbolic Execution\uff09 \u3002 \u4e3a\u4e86\u89e3\u91ca\u7b26\u53f7\u6267\u884c\uff0c\u73b0\u5728\u6211\u8981\u5f15\u5165\u4e24\u4e2a\u6982\u5ff5\uff0c\u7b2c\u4e00\u4e2a\u6982\u5ff5\u53eb\u505a \u7b26\u53f7\u72b6\u6001\uff08Symbolic State\uff09 \uff0c\u5e76\u4e14\u7528\u03c3\u6765\u8868\u793a\uff0c\u7b26\u53f7\u72b6\u6001\u662f\u539f\u53d8\u91cf\u5230\u7b26\u53f7\u503c\u7684\u4e00\u4e2a\u6620\u5c04\uff0c\u521d\u59cb\u65f6\u7b26\u53f7\u72b6\u6001\u03c3\u4e3a\u7a7a\uff0c\u5f53\u6267\u884c\u5b8c\u4ee5\u4e0b\u4e24\u4e2a\u8bed\u53e5\u540e\uff1a x = input(); y = input(); \u5373x\u548cy\u83b7\u5f97\u4e86\u7b26\u53f7\u5316\u7684\u8f93\u5165{x = x sym , y = y sym }\uff0c\u6b64\u65f6\u7684\u7b26\u53f7\u72b6\u6001\u03c3 = {x \u2192 x sym , y \u2192 y sym }\u3002\u5f53\u6267\u884c\u5b8c z = 2 * y \u4e4b\u540e\uff0c\u7b26\u53f7\u72b6\u6001\u66f4\u65b0\u4e3a\u03c3 = {x \u2192 x sym >, y \u2192 y sym , z \u2192 2 * y sym }\u3002 \u7b2c\u4e8c\u4e2a\u6982\u5ff5\u53eb\u505a \u8def\u5f84\u7ea6\u675f\uff08Path Constraint\uff09 \uff0c\u7b80\u79f0PC\uff0cPC\u8868\u793a\u5230\u8fbe\u5f53\u524d\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\uff0cPC\u7684\u521d\u59cb\u503c\u4e3atrue\uff0c\u610f\u4e3a\u6ca1\u6709\u7ea6\u675f\u3002\u4f8b\u5982\u8fbe\u5230Path-1\u9700\u8981\u6ee1\u8db3\u6761\u4ef6 x == z \u548c x > y + 10 \uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u7684\u8def\u5f84\u7ea6\u675fPC\u5c31\u662f(x sym == 2 * y sym ) && (x sym > y sym + 10)\u3002 \u7b26\u53f7\u6267\u884c\u9700\u8981\u4e3a\u6bcf\u4e00\u6761\u8def\u5f84\u7ef4\u62a4\u4e00\u4e2a\u7b26\u53f7\u72b6\u6001\u03c3\u548c\u4e00\u4e2a\u8def\u5f84\u7ea6\u675fPC\uff0c\u8ba9\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\u4e0a\u8ff0\u5b9e\u4f8b\u7a0b\u5e8f\u7684\u7b26\u53f7\u6267\u884c\u8fc7\u7a0b\uff0c\u9996\u5148\u662f\u521d\u59cb\u72b6\u6001\uff0c\u7b26\u53f7\u72b6\u6001\u03c3\u6620\u5c04\u4e86x, y\u548cz\u7684\u7b26\u53f7\u503c\uff0c\u6b64\u65f6\u8def\u5f84\u7ea6\u675fPC = true\uff1a \u5047\u8bbe\u7b26\u53f7\u6267\u884c\u7684\u904d\u5386\u7b56\u7565\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22BFS\uff0c\u90a3\u4e48\u7ecf\u8fc7\u7b2c\u4e00\u4e2a\u5206\u652f\u4e4b\u540e\uff0c\u7b26\u53f7\u6267\u884c\u5206\u88c2\u51fa\u4e86\u4e24\u6761\u8def\u5f84\uff0c\u4e24\u6761\u8def\u5f84\u7684\u72b6\u6001\u5206\u522b\u662f\uff1a \u5206\u88c2\u51fa\u6765\u7684\u4e24\u4e2a\u8def\u5f84\u552f\u4e00\u7684\u4e0d\u7528\u662f\u8def\u5f84\u7ea6\u675fPC\u4e0d\u540c\uff0c\u4e0d\u540c\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5206\u652f\u6761\u4ef6\u7684\u6210\u7acb\u4e0e\u5426\u4e0d\u540c\u3002\u5206\u652f\u6761\u4ef6\u6210\u7acb\u5c31\u4f1a\u6267\u884c\u5de6\u8fb9\u7684\u8def\u5f84\uff0cPC = x_sym == 2 * y_sym\u8868\u793a\u8fbe\u5230\u5de6\u8fb9\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u7684\u7ea6\u675f\u6761\u4ef6\uff1b\u5206\u652f\u6761\u4ef6\u4e0d\u6210\u7acb\u5c31\u4f1a\u6267\u884c\u53f3\u8fb9\u7684\u8def\u5f84\uff0cPC = x_sym != 2 * y_sym\u8868\u793a\u8fbe\u5230\u53f3\u8fb9\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u7684\u7ea6\u675f\u6761\u4ef6\u3002 \u53f3\u8fb9\u8fd9\u6761\u8def\u5f84\u5df2\u7ecf\u6267\u884c\u5230\u5c3d\u5934\u4e86\uff0c\u800c\u5de6\u8fb9\u7684\u8def\u5f84\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5ef6\u4f38\uff0c\u6240\u4ee5\u7ee7\u7eed\u5206\u88c2\u51fa\u4e24\u6761\u8def\u5f84\uff0c\u66f4\u65b0\u8def\u5f84\u7ea6\u675fPC\uff1a \u6240\u4ee5\u8be5\u7a0b\u5e8f\u6267\u884c\u5230\u6700\u540e\u67093\u4e2a\u72b6\u6001\uff0c\u5bf9\u5e943\u6761\u4e0d\u540c\u7684\u8def\u5f84\u3002\u8bb2\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5bf9\u7b26\u53f7\u6267\u884c\u5df2\u7ecf\u6709\u4e00\u4e2a\u521d\u6b65\u7684\u8ba4\u8bc6\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u5b66\u4e60\u3002 0x02. \u7ea6\u675f\u6c42\u89e3 \u5047\u8bbe\u73b0\u5728\u6709\u4e00\u4e2a\u95ee\u9898\u2014\u2014\u6211\u4eec\u8f93\u5165\u7684x\u548cy\u7684\u503c\u5206\u522b\u662f\u591a\u5c11\u65f6\uff0c\u7a0b\u5e8f\u80fd\u591f\u8f93\u51fa\"Path-1\"\u3002\u5728\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u7b26\u53f7\u6267\u884c\u6c42\u89e3\u51fa\u4e86Path-1\u5bf9\u5e94\u7684\u8def\u5f84\u7ea6\u675fPC\uff0c\u5373PC = (x sym == 2 * y sym ) && (x sym > y sym + 10)\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u628ax sym \u548cy sym \u5f53\u505a\u672a\u77e5\u91cf\uff0c\u4ee4PC == true\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\uff1a(x sym == 2 * y sym ) && (x sym > y sym + 10) == true\uff0c\u5bf9\u8fd9\u4e2a\u65b9\u7a0b\u6c42\u89e3\u5373\u53ef\u5f97\u5230\u4e00\u7cfb\u5217\u6ee1\u8db3\u6761\u4ef6\u7684x\u548cy\u3002 \u76ee\u524d\u6d41\u884c\u7684\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u57fa\u672c\u90fd\u4f1a\u5185\u7f6e\u4e00\u4e2a\u7ea6\u675f\u6c42\u89e3\u5668\uff08\u901a\u4fd7\u70b9\u6765\u8bf4\u5c31\u662f\u65b9\u7a0b/\u65b9\u7a0b\u7ec4\u6c42\u89e3\u5668\uff09\uff0cangr\u548cmiasm\u4e24\u4e2a\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u4f7f\u7528\u7684\u7ea6\u675f\u6c42\u89e3\u5668\u90fd\u662fz3\uff0cz3\u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u5f00\u6e90\u7ea6\u675f\u6c42\u89e3\u5668\uff0c\u529f\u80fd\u5f3a\u5927\u5e76\u4e14\u6613\u7528\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u5bf9z3\u4e13\u95e8\u8fdb\u884c\u8bb2\u89e3\u3002\u7b80\u5355\u7528z3\u6f14\u793a\u4e00\u4e0b\u4e0a\u8ff0\u8def\u5f84\u7ea6\u675f\u7684\u6c42\u89e3\uff1a from z3 import * x = Int('x') y = Int('y') solver = Solver() solver.add(x == 2 * y) solver.add(x > y + 10) print(solver.check()) print(solver.model()) \u8f93\u51fa\uff1a sat [y = 11, x = 22] solver.check()\u7528\u6765\u68c0\u9a8c\u65b9\u7a0b\u662f\u5426\u6709\u89e3\uff0csat\u8868\u793a\u65b9\u7a0b\u6709\u89e3\uff0cunsat\u8868\u793a\u65b9\u7a0b\u65e0\u89e3\u3002[y = 11, x = 22]\u662f\u6c42\u89e3\u51fa\u6765\u65b9\u7a0b\u7684\u4e00\u4e2a\u53ef\u884c\u89e3\u3002 \u9664\u4e86\u7528\u6765\u6c42\u89e3\u5177\u4f53\u503c\u4e4b\u5916\uff0c\u7ea6\u675f\u6c42\u89e3\u4e5f\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u67d0\u6761\u8def\u5f84\u662f\u5426\u53ef\u884c\uff0c\u5982\u679c\u4e00\u6761\u8def\u5f84\u7684\u7ea6\u675f\u6c42\u89e3\u65e0\u89e3\uff0c\u5219\u8be5\u6761\u8def\u5f84\u603b\u662f\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u5176\u540e\u7684\u5206\u652f\u4e5f\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u8282\u7701\u7b26\u53f7\u6267\u884c\u7684\u65f6\u95f4\u3002 \u7ea6\u675f\u6c42\u89e3\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4f9d\u7136\u662f\u7b26\u53f7\u6267\u884c\u7684\u5173\u952e\u74f6\u9888\u4e4b\u4e00\uff0c\u5f88\u591a\u65f6\u5019\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u8dd1\u4e0d\u51fa\u7ed3\u679c\u6765\u90fd\u662f\u56e0\u4e3a\u7ea6\u675f\u6c42\u89e3\u5668\u7684\u6c42\u89e3\u80fd\u529b\u4e0d\u8db3\uff0c\u8fd9\u4e00\u70b9\u6211\u4eec\u4f1a\u5728\u4e4b\u540e\u8ba8\u8bba\u3002 0x03. \u52a8\u6001\u7b26\u53f7\u6267\u884c \u4e0a\u8ff0\u7684\u7b26\u53f7\u6267\u884c\u8fc7\u7a0b\u6211\u4eec\u90fd\u662f\u7528\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u7684\u9ad8\u7ea7\u8bed\u8a00\u5f62\u5f0f\u6765\u63cf\u8ff0\u7684\uff0c\u663e\u7136\u771f\u6b63\u7684\u7b26\u53f7\u6267\u884c\u4e0d\u53ef\u80fd\u662f\u57fa\u4e8e\u9ad8\u7ea7\u8bed\u8a00\u7684\uff0c\u8981\u4e48\u662f\u6c47\u7f16\uff0c\u8981\u4e48\u662f\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u5185\u7f6e\u7684\u4e2d\u95f4\u4ee3\u7801\uff08IR\uff09\uff0c\u8fd9\u4e9b\u90fd\u5c5e\u4e8e\u4f4e\u7ea7\u8bed\u8a00\u3002\u4f4e\u7ea7\u8bed\u8a00\u5c31\u4f1a\u6d89\u53ca\u5185\u5b58\u3001\u5bc4\u5b58\u5668\u7b49\u4e00\u4e9b\u6982\u5ff5\uff0c\u5982\u679c\u6211\u4eec\u628a\u5185\u5b58\u548c\u5bc4\u5b58\u5668\u5168\u90e8\u7b26\u53f7\u5316\uff0c\u90a3\u4e48\u7b26\u53f7\u6267\u884c\u7684\u8def\u5f84\u7ea6\u675f\u5c31\u4f1a\u663e\u5f97\u975e\u5e38\u590d\u6742\uff0c\u5e76\u4e14\u4e00\u4e2a\u5305\u542b\u5404\u79cd\u7b26\u53f7\u7684\u8def\u5f84\u7ea6\u675f\u4e5f\u6ca1\u6709\u4ec0\u4e48\u5b9e\u9645\u4f7f\u7528\u4ef7\u503c\u3002 \u7531\u4e8e\u7eaf\u7b26\u53f7\u6267\u884c\u7684\u79cd\u79cd\u7f3a\u9677\uff0c\u73b0\u4ee3\u7684\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u57fa\u672c\u4e0a\u90fd\u662f \u52a8\u6001\u7b26\u53f7\u6267\u884c\uff08Dynamic Symbloic Execution\uff09 \u6216\u8005\u53eb\u505a \u6df7\u5408\u6267\u884c\uff08Concolic Execution\uff09 \uff0c\u4ee5\u4e0b\u7edf\u4e00\u79f0\u4e3a\u52a8\u6001\u7b26\u53f7\u6267\u884c\u3002\u52a8\u6001\u7b26\u53f7\u6267\u884c\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u5b9e\u9645\u72b6\u6001\u548c\u4e00\u4e2a\u7b26\u53f7\u72b6\u6001\uff1a\u5b9e\u9645\u72b6\u6001\u5c06\u6240\u6709\u5177\u6709\u5b9e\u9645\u503c\u7684\u53d8\u91cf\u6620\u5c04\u5230\u5b9e\u9645\u503c\uff0c\u7b26\u53f7\u72b6\u6001\u53ea\u6620\u5c04\u90a3\u4e9b\u6709\u975e\u5b9e\u9645\u503c\u7684\u53d8\u91cf\u3002\u4ee5angr\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u4e3a\u4f8b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4ece\u6807\u51c6\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u7684\u6570\u636e\u4f1a\u88ab\u7b26\u53f7\u5316\uff0c\u5176\u4ed6\u6570\u636e\u90fd\u662f\u5177\u6709\u5b9e\u9645\u503c\u7684\u3002 \u4f8b\u5982\uff1a >>> state = proj.factory.entry_state() <SimState @ 0x401120> >>> state.regs.rax <BV64 0x1c> \u8fd9\u91cc\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u201c\u72b6\u6001\u201d\uff0c\u8fd9\u4e2a\u72b6\u6001\u7ef4\u62a4\u4e86\u5bc4\u5b58\u5668\u7b49\u4e00\u4e9b\u53d8\u91cf\uff0c\u5728\u8fd9\u4e2a\u72b6\u6001\u4e2drax\u5bc4\u5b58\u5668\u662f\u5177\u6709\u5b9e\u9645\u503c 0x1c \u7684\u3002 \u597d\u7684\uff0c\u7b26\u53f7\u6267\u884c\u7684\u5165\u95e8\u77e5\u8bc6\u8bb2\u5230\u8fd9\u5c31\u8db3\u591f\u4e86\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u5728\u5408\u9002\u7684\u65f6\u673a\u8fdb\u884c\u62d3\u5c55\u3002","title":"00 \u7b26\u53f7\u6267\u884c\u539f\u7406"},{"location":"angr/00_%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/#0x00","text":"\u9605\u8bfb\u672c\u7cfb\u5217\u6559\u7a0b\u8bfb\u8005\u9700\u8981\u5177\u5907\u4ee5\u4e0b\u57fa\u7840\uff1a \u9006\u5411\u57fa\u7840 x86\u6c47\u7f16\u57fa\u7840 C/C++\u548cPython\u7f16\u7a0b\u57fa\u7840 \u4e00\u4e9b\u7b26\u53f7\u6267\u884c\u7684\u79d1\u666e\u8d44\u6599\uff1a Symbolic Execution for Software Testing Three Decades Later \u4e00\u7bc7\u7b80\u77ed\u4e14\u901a\u4fd7\u6613\u61c2\u7684\u8bba\u6587\uff0c\u6ca1\u6709\u5f88\u591a\u62bd\u8c61\u7684\u5b9a\u4e49\uff0c\u9002\u5408\u5165\u95e8\u5b66\u4e60 \u7b26\u53f7\u6267\u884c\u5165\u95e8 \u57fa\u672c\u4e0a\u662f\u4e0a\u9762\u90a3\u7bc7\u8bba\u6587\u7684\u7ffb\u8bd1\uff0c\u9002\u5408\u4e0e\u539f\u6587\u5bf9\u7167\u5b66\u4e60","title":"0x00. \u524d\u7f6e\u77e5\u8bc6\u4e0e\u53c2\u8003\u8d44\u6599"},{"location":"angr/00_%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/#0x01","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u7a0b\u5e8f\u5e76 \u7ed9\u5b9a\u7a0b\u5e8f\u6240\u9700\u8981\u7684\u6240\u6709\u8f93\u5165 \u65f6\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6267\u884c\u8def\u5f84\u662f \u786e\u5b9a \u5e76\u4e14 \u552f\u4e00 \u7684\uff0c\u8fd9\u91cc\u7528\u4e00\u4e2a\u4f2a\u4ee3\u7801\u6765\u8bf4\u660e\uff1a int main(){ x = input(); y = input(); z = 2 * y; if(x == z){ if(x > y + 10){ print(\"Path-1\"); }else{ print(\"Path-2\"); } }else{ print(\"Path-3\"); } } input\u51fd\u6570\u8868\u793a\u83b7\u53d6\u7528\u6237\u8f93\u5165\uff0cprint\u51fd\u6570\u5c31\u662f\u5b57\u9762\u610f\u601d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u753b\u51fa\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u7a0b\u56fe\uff08Control Flow Graph\uff09\uff1a \u5047\u8bbe\u7528\u6237\u7684\u8f93\u5165\u662f{x = 2, y = 1}\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u6cbf\u7740\u7ea2\u8272\u7ebf\u6761\u6807\u8bb0\u7684\u8def\u5f84\u6267\u884c\uff0c\u5176\u8def\u5f84\u662f\u786e\u5b9a\u4e14\u552f\u4e00\u7684\uff0c\u5176\u4ed6\u8f93\u5165\u4e5f\u540c\u7406\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u5f53\u7a0b\u5e8f\u7684\u8f93\u5165\u786e\u5b9a\u65f6\uff0c\u8fd9\u79cd\u6267\u884c\u5c31\u53eb\u505a \u5177\u4f53\u6267\u884c \uff1a \u5982\u679c\u73b0\u5728input\u51fd\u6570\u4e0d\u662f\u83b7\u53d6\u7528\u6237\u7684\u5177\u4f53\u8f93\u5165\uff0c\u800c\u662f\u76f4\u63a5\u83b7\u53d6\u4e00\u4e2a\u5bf9\u5e94\u7684 \u7b26\u53f7\u503c \u5462\uff1f\u4f8b\u5982{x = x sym , y = y sym }\u3002\u5f53\u7a0b\u5e8f\u7684\u8f93\u5165\u7531\u5177\u4f53\u7684\u503c\u53d8\u6210\u4e86\u7b26\u53f7\u503c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u8fd0\u884c\u7531\u5177\u4f53\u6267\u884c\u53d8\u6210\u4e86 \u7b26\u53f7\u6267\u884c\uff08Symbolic Execution\uff09 \u3002 \u4e3a\u4e86\u89e3\u91ca\u7b26\u53f7\u6267\u884c\uff0c\u73b0\u5728\u6211\u8981\u5f15\u5165\u4e24\u4e2a\u6982\u5ff5\uff0c\u7b2c\u4e00\u4e2a\u6982\u5ff5\u53eb\u505a \u7b26\u53f7\u72b6\u6001\uff08Symbolic State\uff09 \uff0c\u5e76\u4e14\u7528\u03c3\u6765\u8868\u793a\uff0c\u7b26\u53f7\u72b6\u6001\u662f\u539f\u53d8\u91cf\u5230\u7b26\u53f7\u503c\u7684\u4e00\u4e2a\u6620\u5c04\uff0c\u521d\u59cb\u65f6\u7b26\u53f7\u72b6\u6001\u03c3\u4e3a\u7a7a\uff0c\u5f53\u6267\u884c\u5b8c\u4ee5\u4e0b\u4e24\u4e2a\u8bed\u53e5\u540e\uff1a x = input(); y = input(); \u5373x\u548cy\u83b7\u5f97\u4e86\u7b26\u53f7\u5316\u7684\u8f93\u5165{x = x sym , y = y sym }\uff0c\u6b64\u65f6\u7684\u7b26\u53f7\u72b6\u6001\u03c3 = {x \u2192 x sym , y \u2192 y sym }\u3002\u5f53\u6267\u884c\u5b8c z = 2 * y \u4e4b\u540e\uff0c\u7b26\u53f7\u72b6\u6001\u66f4\u65b0\u4e3a\u03c3 = {x \u2192 x sym >, y \u2192 y sym , z \u2192 2 * y sym }\u3002 \u7b2c\u4e8c\u4e2a\u6982\u5ff5\u53eb\u505a \u8def\u5f84\u7ea6\u675f\uff08Path Constraint\uff09 \uff0c\u7b80\u79f0PC\uff0cPC\u8868\u793a\u5230\u8fbe\u5f53\u524d\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\uff0cPC\u7684\u521d\u59cb\u503c\u4e3atrue\uff0c\u610f\u4e3a\u6ca1\u6709\u7ea6\u675f\u3002\u4f8b\u5982\u8fbe\u5230Path-1\u9700\u8981\u6ee1\u8db3\u6761\u4ef6 x == z \u548c x > y + 10 \uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u7684\u8def\u5f84\u7ea6\u675fPC\u5c31\u662f(x sym == 2 * y sym ) && (x sym > y sym + 10)\u3002 \u7b26\u53f7\u6267\u884c\u9700\u8981\u4e3a\u6bcf\u4e00\u6761\u8def\u5f84\u7ef4\u62a4\u4e00\u4e2a\u7b26\u53f7\u72b6\u6001\u03c3\u548c\u4e00\u4e2a\u8def\u5f84\u7ea6\u675fPC\uff0c\u8ba9\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\u4e0a\u8ff0\u5b9e\u4f8b\u7a0b\u5e8f\u7684\u7b26\u53f7\u6267\u884c\u8fc7\u7a0b\uff0c\u9996\u5148\u662f\u521d\u59cb\u72b6\u6001\uff0c\u7b26\u53f7\u72b6\u6001\u03c3\u6620\u5c04\u4e86x, y\u548cz\u7684\u7b26\u53f7\u503c\uff0c\u6b64\u65f6\u8def\u5f84\u7ea6\u675fPC = true\uff1a \u5047\u8bbe\u7b26\u53f7\u6267\u884c\u7684\u904d\u5386\u7b56\u7565\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22BFS\uff0c\u90a3\u4e48\u7ecf\u8fc7\u7b2c\u4e00\u4e2a\u5206\u652f\u4e4b\u540e\uff0c\u7b26\u53f7\u6267\u884c\u5206\u88c2\u51fa\u4e86\u4e24\u6761\u8def\u5f84\uff0c\u4e24\u6761\u8def\u5f84\u7684\u72b6\u6001\u5206\u522b\u662f\uff1a \u5206\u88c2\u51fa\u6765\u7684\u4e24\u4e2a\u8def\u5f84\u552f\u4e00\u7684\u4e0d\u7528\u662f\u8def\u5f84\u7ea6\u675fPC\u4e0d\u540c\uff0c\u4e0d\u540c\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5206\u652f\u6761\u4ef6\u7684\u6210\u7acb\u4e0e\u5426\u4e0d\u540c\u3002\u5206\u652f\u6761\u4ef6\u6210\u7acb\u5c31\u4f1a\u6267\u884c\u5de6\u8fb9\u7684\u8def\u5f84\uff0cPC = x_sym == 2 * y_sym\u8868\u793a\u8fbe\u5230\u5de6\u8fb9\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u7684\u7ea6\u675f\u6761\u4ef6\uff1b\u5206\u652f\u6761\u4ef6\u4e0d\u6210\u7acb\u5c31\u4f1a\u6267\u884c\u53f3\u8fb9\u7684\u8def\u5f84\uff0cPC = x_sym != 2 * y_sym\u8868\u793a\u8fbe\u5230\u53f3\u8fb9\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u7684\u7ea6\u675f\u6761\u4ef6\u3002 \u53f3\u8fb9\u8fd9\u6761\u8def\u5f84\u5df2\u7ecf\u6267\u884c\u5230\u5c3d\u5934\u4e86\uff0c\u800c\u5de6\u8fb9\u7684\u8def\u5f84\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5ef6\u4f38\uff0c\u6240\u4ee5\u7ee7\u7eed\u5206\u88c2\u51fa\u4e24\u6761\u8def\u5f84\uff0c\u66f4\u65b0\u8def\u5f84\u7ea6\u675fPC\uff1a \u6240\u4ee5\u8be5\u7a0b\u5e8f\u6267\u884c\u5230\u6700\u540e\u67093\u4e2a\u72b6\u6001\uff0c\u5bf9\u5e943\u6761\u4e0d\u540c\u7684\u8def\u5f84\u3002\u8bb2\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5bf9\u7b26\u53f7\u6267\u884c\u5df2\u7ecf\u6709\u4e00\u4e2a\u521d\u6b65\u7684\u8ba4\u8bc6\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b65\u7684\u5b66\u4e60\u3002","title":"0x01. \u4ec0\u4e48\u662f\u7b26\u53f7\u6267\u884c"},{"location":"angr/00_%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/#0x02","text":"\u5047\u8bbe\u73b0\u5728\u6709\u4e00\u4e2a\u95ee\u9898\u2014\u2014\u6211\u4eec\u8f93\u5165\u7684x\u548cy\u7684\u503c\u5206\u522b\u662f\u591a\u5c11\u65f6\uff0c\u7a0b\u5e8f\u80fd\u591f\u8f93\u51fa\"Path-1\"\u3002\u5728\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u7b26\u53f7\u6267\u884c\u6c42\u89e3\u51fa\u4e86Path-1\u5bf9\u5e94\u7684\u8def\u5f84\u7ea6\u675fPC\uff0c\u5373PC = (x sym == 2 * y sym ) && (x sym > y sym + 10)\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u628ax sym \u548cy sym \u5f53\u505a\u672a\u77e5\u91cf\uff0c\u4ee4PC == true\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\uff1a(x sym == 2 * y sym ) && (x sym > y sym + 10) == true\uff0c\u5bf9\u8fd9\u4e2a\u65b9\u7a0b\u6c42\u89e3\u5373\u53ef\u5f97\u5230\u4e00\u7cfb\u5217\u6ee1\u8db3\u6761\u4ef6\u7684x\u548cy\u3002 \u76ee\u524d\u6d41\u884c\u7684\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u57fa\u672c\u90fd\u4f1a\u5185\u7f6e\u4e00\u4e2a\u7ea6\u675f\u6c42\u89e3\u5668\uff08\u901a\u4fd7\u70b9\u6765\u8bf4\u5c31\u662f\u65b9\u7a0b/\u65b9\u7a0b\u7ec4\u6c42\u89e3\u5668\uff09\uff0cangr\u548cmiasm\u4e24\u4e2a\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u4f7f\u7528\u7684\u7ea6\u675f\u6c42\u89e3\u5668\u90fd\u662fz3\uff0cz3\u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u5f00\u6e90\u7ea6\u675f\u6c42\u89e3\u5668\uff0c\u529f\u80fd\u5f3a\u5927\u5e76\u4e14\u6613\u7528\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u5bf9z3\u4e13\u95e8\u8fdb\u884c\u8bb2\u89e3\u3002\u7b80\u5355\u7528z3\u6f14\u793a\u4e00\u4e0b\u4e0a\u8ff0\u8def\u5f84\u7ea6\u675f\u7684\u6c42\u89e3\uff1a from z3 import * x = Int('x') y = Int('y') solver = Solver() solver.add(x == 2 * y) solver.add(x > y + 10) print(solver.check()) print(solver.model()) \u8f93\u51fa\uff1a sat [y = 11, x = 22] solver.check()\u7528\u6765\u68c0\u9a8c\u65b9\u7a0b\u662f\u5426\u6709\u89e3\uff0csat\u8868\u793a\u65b9\u7a0b\u6709\u89e3\uff0cunsat\u8868\u793a\u65b9\u7a0b\u65e0\u89e3\u3002[y = 11, x = 22]\u662f\u6c42\u89e3\u51fa\u6765\u65b9\u7a0b\u7684\u4e00\u4e2a\u53ef\u884c\u89e3\u3002 \u9664\u4e86\u7528\u6765\u6c42\u89e3\u5177\u4f53\u503c\u4e4b\u5916\uff0c\u7ea6\u675f\u6c42\u89e3\u4e5f\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u67d0\u6761\u8def\u5f84\u662f\u5426\u53ef\u884c\uff0c\u5982\u679c\u4e00\u6761\u8def\u5f84\u7684\u7ea6\u675f\u6c42\u89e3\u65e0\u89e3\uff0c\u5219\u8be5\u6761\u8def\u5f84\u603b\u662f\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u5176\u540e\u7684\u5206\u652f\u4e5f\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u8282\u7701\u7b26\u53f7\u6267\u884c\u7684\u65f6\u95f4\u3002 \u7ea6\u675f\u6c42\u89e3\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4f9d\u7136\u662f\u7b26\u53f7\u6267\u884c\u7684\u5173\u952e\u74f6\u9888\u4e4b\u4e00\uff0c\u5f88\u591a\u65f6\u5019\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u8dd1\u4e0d\u51fa\u7ed3\u679c\u6765\u90fd\u662f\u56e0\u4e3a\u7ea6\u675f\u6c42\u89e3\u5668\u7684\u6c42\u89e3\u80fd\u529b\u4e0d\u8db3\uff0c\u8fd9\u4e00\u70b9\u6211\u4eec\u4f1a\u5728\u4e4b\u540e\u8ba8\u8bba\u3002","title":"0x02. \u7ea6\u675f\u6c42\u89e3"},{"location":"angr/00_%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/#0x03","text":"\u4e0a\u8ff0\u7684\u7b26\u53f7\u6267\u884c\u8fc7\u7a0b\u6211\u4eec\u90fd\u662f\u7528\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u7684\u9ad8\u7ea7\u8bed\u8a00\u5f62\u5f0f\u6765\u63cf\u8ff0\u7684\uff0c\u663e\u7136\u771f\u6b63\u7684\u7b26\u53f7\u6267\u884c\u4e0d\u53ef\u80fd\u662f\u57fa\u4e8e\u9ad8\u7ea7\u8bed\u8a00\u7684\uff0c\u8981\u4e48\u662f\u6c47\u7f16\uff0c\u8981\u4e48\u662f\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u5185\u7f6e\u7684\u4e2d\u95f4\u4ee3\u7801\uff08IR\uff09\uff0c\u8fd9\u4e9b\u90fd\u5c5e\u4e8e\u4f4e\u7ea7\u8bed\u8a00\u3002\u4f4e\u7ea7\u8bed\u8a00\u5c31\u4f1a\u6d89\u53ca\u5185\u5b58\u3001\u5bc4\u5b58\u5668\u7b49\u4e00\u4e9b\u6982\u5ff5\uff0c\u5982\u679c\u6211\u4eec\u628a\u5185\u5b58\u548c\u5bc4\u5b58\u5668\u5168\u90e8\u7b26\u53f7\u5316\uff0c\u90a3\u4e48\u7b26\u53f7\u6267\u884c\u7684\u8def\u5f84\u7ea6\u675f\u5c31\u4f1a\u663e\u5f97\u975e\u5e38\u590d\u6742\uff0c\u5e76\u4e14\u4e00\u4e2a\u5305\u542b\u5404\u79cd\u7b26\u53f7\u7684\u8def\u5f84\u7ea6\u675f\u4e5f\u6ca1\u6709\u4ec0\u4e48\u5b9e\u9645\u4f7f\u7528\u4ef7\u503c\u3002 \u7531\u4e8e\u7eaf\u7b26\u53f7\u6267\u884c\u7684\u79cd\u79cd\u7f3a\u9677\uff0c\u73b0\u4ee3\u7684\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u57fa\u672c\u4e0a\u90fd\u662f \u52a8\u6001\u7b26\u53f7\u6267\u884c\uff08Dynamic Symbloic Execution\uff09 \u6216\u8005\u53eb\u505a \u6df7\u5408\u6267\u884c\uff08Concolic Execution\uff09 \uff0c\u4ee5\u4e0b\u7edf\u4e00\u79f0\u4e3a\u52a8\u6001\u7b26\u53f7\u6267\u884c\u3002\u52a8\u6001\u7b26\u53f7\u6267\u884c\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u5b9e\u9645\u72b6\u6001\u548c\u4e00\u4e2a\u7b26\u53f7\u72b6\u6001\uff1a\u5b9e\u9645\u72b6\u6001\u5c06\u6240\u6709\u5177\u6709\u5b9e\u9645\u503c\u7684\u53d8\u91cf\u6620\u5c04\u5230\u5b9e\u9645\u503c\uff0c\u7b26\u53f7\u72b6\u6001\u53ea\u6620\u5c04\u90a3\u4e9b\u6709\u975e\u5b9e\u9645\u503c\u7684\u53d8\u91cf\u3002\u4ee5angr\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u4e3a\u4f8b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4ece\u6807\u51c6\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u7684\u6570\u636e\u4f1a\u88ab\u7b26\u53f7\u5316\uff0c\u5176\u4ed6\u6570\u636e\u90fd\u662f\u5177\u6709\u5b9e\u9645\u503c\u7684\u3002 \u4f8b\u5982\uff1a >>> state = proj.factory.entry_state() <SimState @ 0x401120> >>> state.regs.rax <BV64 0x1c> \u8fd9\u91cc\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u201c\u72b6\u6001\u201d\uff0c\u8fd9\u4e2a\u72b6\u6001\u7ef4\u62a4\u4e86\u5bc4\u5b58\u5668\u7b49\u4e00\u4e9b\u53d8\u91cf\uff0c\u5728\u8fd9\u4e2a\u72b6\u6001\u4e2drax\u5bc4\u5b58\u5668\u662f\u5177\u6709\u5b9e\u9645\u503c 0x1c \u7684\u3002 \u597d\u7684\uff0c\u7b26\u53f7\u6267\u884c\u7684\u5165\u95e8\u77e5\u8bc6\u8bb2\u5230\u8fd9\u5c31\u8db3\u591f\u4e86\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u5728\u5408\u9002\u7684\u65f6\u673a\u8fdb\u884c\u62d3\u5c55\u3002","title":"0x03. \u52a8\u6001\u7b26\u53f7\u6267\u884c"},{"location":"angr/01_angr%E5%85%A5%E9%97%A8/","text":"\u5b66\u4e60\u4e86\u7b26\u53f7\u6267\u884c\u7684\u57fa\u672c\u539f\u7406\u4e4b\u540e\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u7740\u624b\u5b66\u4e60angr\u7684\u57fa\u7840\u77e5\u8bc6\u4e86\u3002\u672c\u8282\u65e8\u5728\u8ba9\u8bfb\u8005\u5bf9angr\u6709\u4e00\u4e2a\u521d\u6b65\u7684\u8ba4\u8bc6\u3002 0x00. angr\u7684\u5b89\u88c5 angr\u7684\u5b89\u88c5\u5341\u5206\u7b80\u5355\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e00\u6761\u7b80\u5355\u7684pip\u6307\u4ee4\u5373\u53ef\u5b8c\u6210\uff1a pip install angr \u4f46\u6839\u636e\u5b98\u65b9\u7684\u8bf4\u6cd5\uff0cangr\u4f7f\u7528\u7684\u51e0\u4e2a\u4f9d\u8d56\u9879\uff08z3\uff0cpyvex\u7b49\uff09\u4e0e\u5b98\u65b9\u63d0\u4f9b\u7684\u5171\u4eab\u5e93\u6709\u6240\u533a\u522b\uff0c\u6240\u4ee5\u4e3a\u4e86\u4e0d\u8ba9angr\u81ea\u5df1\u7684z3\u548cpyvex\u5e93\u8986\u76d6\u5b98\u65b9\u7684z3\u548cpyvex\u5e93\uff0c\u6211\u4eec\u9700\u8981\u5728python\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5angr\u3002 \u6211\u662f\u7528\u7684\u662fWindows\u4e0a\u7684conda\u6765\u521b\u5efa\u865a\u62df\u73af\u5883\uff0cangr\u7248\u672c\u4e3a\u76ee\u524d\u6700\u65b0\u7684angr-9.0.10055\uff0c\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u9009\u62e9\u64cd\u4f5c\u7cfb\u7edf\u548c\u865a\u62df\u73af\u5883\u5de5\u5177\uff0c\u57fa\u672c\u6ca1\u6709\u533a\u522b\u3002 \u5b98\u65b9\u7684\u5b89\u88c5\u6559\u7a0b\uff1a Installing \uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002 0x01. \u57fa\u672c\u7528\u6cd5 \u8fd8\u662f\u5148\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u7a0b\u5e8f\uff1a #include <cstdio> #include <cstdlib> #include <cstring> void encrypt(char* flag){ for(int i = 0;i < 13;i ++){ flag[i] ^= i; flag[i] += 32; } } // flag{G00dJ0b} int main(){ char flag[100] = {0}; scanf(\"%s\", flag); if(strlen(flag) != 13){ printf(\"Wrong length!\\n\"); exit(0); } encrypt(flag); if(!strcmp(flag, \"\\x86\\x8d\\x83\\x84\\x9f\\x62\\x56\\x57\\x8c\\x63\\x5a\\x89\\x91\")){ printf(\"Right!\\n\"); }else{ printf(\"Wrong!\\n\"); } } \u5728Ubuntu\u4e0b\u7f16\u8bd1\u540e\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6example-1\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5728Windows\u4e0b\u7f16\u8bd1\u5462\uff0c\u56e0\u4e3aWindows\u4e0b\u7f16\u8bd1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5728\u7b26\u53f7\u6267\u884c\u65f6\u4f1a\u9047\u5230\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\u5c31\u5728Ubuntu\u4e0b\u7f16\u8bd1\u3002 \u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6 \u8981\u4f7f\u7528angr\uff0c\u9996\u5148\u9700\u8981\u52a0\u8f7d\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a >>> import angr >>> proj = angr.Project('example-1') \u52a0\u8f7d\u540e\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4e00\u4e9b\u5c5e\u6027\uff1a >>> proj.arch <Arch AMD64 (LE)> >>> proj.entry 4198688 >>> proj.filename 'example-1' \u7b26\u53f7\u6267\u884c\u72b6\u6001\u2014\u2014SimStae \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6\u52a0\u8f7d\u5230\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u7b26\u53f7\u6267\u884c\u3002\u5728\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u63d0\u5230\u8fc7\uff0c\u7b26\u53f7\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u8981\u4e3a\u6bcf\u6761\u8def\u5f84\u7ef4\u62a4\u4e00\u4e2a\u7b26\u53f7\u72b6\u6001\u03c3\u548c\u8def\u5f84\u7ea6\u675fPC\uff0c\u5bf9\u5e94angr\u4e2d\u7684 SimState \u7c7b\uff1a >>> state = proj.factory.entry_state() <SimState @ 0x401120> angr\u4e2d\u8bb8\u591a\u7c7b\u7684\u90fd\u9700\u8981\u901a\u8fc7factory\u83b7\u5f97\uff0cfactory\u662f\u5de5\u5382\u7684\u610f\u601d\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3aproj\u7684factory\u7ed9\u7528\u6237\u751f\u4ea7\u4e86\u8bb8\u591a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8fd9\u91cc\u751f\u4ea7\u7684\u5b9e\u4f8b\u662fSimState\uff0centry_state\u51fd\u6570\u7528\u6765\u83b7\u53d6\u7a0b\u5e8f\u5165\u53e3\u70b9\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u72b6\u6001\u3002 \u67e5\u770bstate\u4e2d\u7684\u4e00\u4e9b\u5c5e\u6027\uff1a >>> state.regs.rip <BV64 0x401120> >>> state.regs.rax <BV64 0x1c> >>> state.mem[proj.entry].int.resolved <BV32 0xfa1e0ff3> \u521d\u59cb\u7684rip\u4e3a0x401120\uff0c\u4e5f\u5c31\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff1a \u5728angr\u4e2d\uff0c\u65e0\u8bba\u662f\u5177\u4f53\u503c\u8fd8\u662f\u7b26\u53f7\u91cf\u90fd\u6709\u76f8\u540c\u7684\u7c7b\u578b\u2014\u2014claripy.ast.bv.BV\uff0c\u4e5f\u5c31\u662fBitVector\u7684\u610f\u601d\uff0cBV\u540e\u9762\u7684\u6570\u5b57\u8868\u793a\u8fd9\u4e2a\u6bd4\u7279\u5411\u91cf\u7684\u4f4d\u6570\u3002 BV\u53ef\u4ee5\u901a\u8fc7claripy\u8fd9\u4e2a\u6a21\u5757\u521b\u5efa\uff1a >>> claripy.BVV(666, 32) # \u521b\u5efa\u4e00\u4e2a32\u4f4d\u7684\u6709\u5177\u4f53\u503c\u7684BV <BV32 0x29a> >>> claripy.BVS('sym_var', 32) # \u521b\u5efa\u4e00\u4e2a32\u4f4d\u7684\u7b26\u53f7\u503cBV <BV32 sym_var_97_32> \u7b26\u53f7\u6267\u884c\u5f15\u64ce\u2014\u2014Simulation Managers \u6709\u4e86\u521d\u59cb\u72b6\u6001\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u7b26\u53f7\u6267\u884c\u4e86\uff0c\u8981\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0c\u9996\u5148\u5f97\u521b\u5efa\u4e00\u4e2a\u7b26\u53f7\u6267\u884c\u5f15\u64ce\uff1a >>> simgr = proj.factory.simulation_manager(state) <SimulationManager with 1 active> with 1 active\u8868\u793a\u5f53\u524d\u6709\u4e00\u6761\u53ef\u4ee5\u7ee7\u7eed\u5ef6\u4f38\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u521d\u59cb\u72b6\u6001\uff1a >>> simgr.active [<SimState @ 0x401120>] \u63a5\u4e0b\u6765\u6211\u4eec\u8c03\u7528simgr\u7684step\u51fd\u6570\uff0c\u8ba9\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u5f80\u524d\u6267\u884c\u4e00\u6b65\uff0c\u518d\u6765\u67e5\u770b\u5f53\u524d\u7684\u72b6\u6001\uff1a >>> simgr.step() >>> simgr.active [<SimState @ 0x500000>] \u4e00\u6b65\u6b65step\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8ba9simgr\u6267\u884c\u5230\u6211\u4eec\u7684main\u51fd\u6570\u3002\u6b64\u65f6\u7684\u72b6\u6001\u88ab\u4fdd\u5b58\u5230\u4e86found\u8fd9\u4e2a\u6570\u7ec4\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7simgr.found[0]\u83b7\u53d6\u5f53\u524d\u7684\u72b6\u6001\uff1a >>> simgr.explore(find=0x401277) <SimulationManager with 1 found> >>> simgr.found[0] <SimState @ 0x401277> Simulation Managers\u4e2d\u6709\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u6570\u7ec4\uff0c\u4e5f\u53eb\u4f5cstash\uff0c\u7528\u6765\u4fdd\u5b58\u5f53\u524d\u7b26\u53f7\u6267\u884c\u7684\u6240\u6709\u72b6\u6001\uff0c\u8be6\u60c5\u8bf7\u770b\uff1a Stash types \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u8ba9simgr\u6267\u884c\u5230\u8f93\u51fa\"Right!\"\u7684\u90a3\u6761\u8def\u5f84\uff1a >>> simgr.explore(find=0x40138F) <SimulationManager with 1 active, 1 deadended, 1 found> >>> simgr.found[0] <SimState @ 0x40138f> \u7136\u540e\u76f4\u63a5\u6253\u5370\u5f53\u524d\u8def\u5f84\u7684\u6807\u51c6\u8f93\u5165\u6765\u83b7\u53d6flag\uff1a >>> found = simgr.found[0] >>> found.posix.dumps(0) b'flag{G00dJ0b}\\x00\\x00\\x00I\\x02\\x89\\x00J\\x1a*\\x89)\\x02*\\x00\\x00\\x1aL\\x00\\x8a\\x1a\\x0e\\x01\\x0e\\x08\\x89)\\x00\\x89Y\\x02*\\x08\\x00\\x02\\x00I\\x00\\x02\\x01(\\x00\\x08\\x8a\\x00\\x02\\x00' \u7b2c\u4e00\u4e2a\\x00\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u4e5f\u5c31\u662fflag\u3002\u8fd9\u662fangr\u6700\u7b80\u5355\u7c97\u66b4\u7684\u7528\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u7528\u6cd5\u5e76\u4e0d\u80fd\u4f53\u73b0\u7b26\u53f7\u6267\u884c\u548c\u7ea6\u675f\u6c42\u89e3\u7684\u672c\u8d28\uff0c\u4e0d\u5229\u4e8e\u6211\u4eec\u540e\u9762\u7684\u5b66\u4e60\uff0c\u6240\u4ee5\u6211\u4eec\u6362\u4e00\u79cd\u5199\u6cd5\uff1a import claripy import angr proj = angr.Project('example-1') sym_flag = claripy.BVS('flag', 100 * 8) # BV\u7684\u5927\u5c0f\u5f97\u8bbe\u5927\u4e00\u70b9\uff0c\u4e0d\u7136\u8dd1\u4e0d\u51fa\u6765\uff0c\u539f\u56e0\u672a\u77e5 state = proj.factory.entry_state(stdin=sym_flag) simgr = proj.factory.simgr(state) simgr.explore(find=0x40138D) solver = simgr.found[0].solver solver.add(simgr.found[0].regs.eax == 0) print(solver.eval(sym_flag, cast_to=bytes)) \u8f93\u51fa\uff1a b'flag{G00dJ0b}\\x00\\x8a\\x00\\x00*\\x00\\x00I\\x00\\x00\\x00\\x02\\x00\\x02\\x00\\x01\\x02\\x00\\x0c\\x08\\x00I\\x8a\\x19\\x00J\\x00\\x00K\\x18\\x1a\\x1a+\\x00\\x01-\\x08\\x00\\x00*\\x08\\x01\\x00***\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' \u6211\u4eec\u5148\u8ba9\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u8dd1\u52300x40138D\u8fd9\u4e2a\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u8df3\u8f6c\u5230Right\u6216Wrong\u7684jnz\u6307\u4ee4\u8fd9\uff1a strcmp\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5230eax\u5bc4\u5b58\u5668\u5185\uff0c\u5f53strcmp\u6bd4\u8f83\u6210\u7acb\u65f6eax\u4e3a0\uff0c\u4e0d\u6210\u7acb\u65f6eax\u4e3a1\u3002\u7b26\u53f7\u6267\u884c\u7684\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u72b6\u6001\u90fd\u4f1a\u5185\u7f6e\u4e00\u4e2a\u7ea6\u675f\u6c42\u89e3\u5668solver\uff0c\u6c42\u89e3\u5668\u4e2d\u4fdd\u5b58\u4e86\u5f53\u524d\u72b6\u6001\u7684\u8def\u5f84\u7ea6\u675fPC\uff0c\u6240\u4ee5\u53ef\u4ee5\u6211\u4eec\u5728\u5f53\u524d\u72b6\u6001\u624b\u52a8\u6dfb\u52a0\u65b0\u7684\u7ea6\u675f\uff1a solver = simgr.found[0].solver solver.add(simgr.found[0].regs.eax == 0) \u7136\u540e\u8ba9\u7ea6\u675f\u6c42\u89e3\u5668\u6c42\u89e3\u6ee1\u8db3\u7b26\u5408\u6761\u4ef6\u7684\u7b26\u53f7\u503c\u5bf9\u5e94\u7684\u5177\u4f53\u503c\uff1a print(solver.eval(sym_flag, cast_to=bytes)) \u8fd9\u5c31\u662fangr\u7684\u57fa\u672c\u7528\u6cd5\u4e86\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u7ed3\u5408\u4e00\u4e9bCTF\u7684\u5b9e\u4f8b\u6765\u8fdb\u4e00\u6b65\u5b66\u4e60angr\u3002","title":"01 angr\u5165\u95e8"},{"location":"angr/01_angr%E5%85%A5%E9%97%A8/#0x00-angr","text":"angr\u7684\u5b89\u88c5\u5341\u5206\u7b80\u5355\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e00\u6761\u7b80\u5355\u7684pip\u6307\u4ee4\u5373\u53ef\u5b8c\u6210\uff1a pip install angr \u4f46\u6839\u636e\u5b98\u65b9\u7684\u8bf4\u6cd5\uff0cangr\u4f7f\u7528\u7684\u51e0\u4e2a\u4f9d\u8d56\u9879\uff08z3\uff0cpyvex\u7b49\uff09\u4e0e\u5b98\u65b9\u63d0\u4f9b\u7684\u5171\u4eab\u5e93\u6709\u6240\u533a\u522b\uff0c\u6240\u4ee5\u4e3a\u4e86\u4e0d\u8ba9angr\u81ea\u5df1\u7684z3\u548cpyvex\u5e93\u8986\u76d6\u5b98\u65b9\u7684z3\u548cpyvex\u5e93\uff0c\u6211\u4eec\u9700\u8981\u5728python\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5angr\u3002 \u6211\u662f\u7528\u7684\u662fWindows\u4e0a\u7684conda\u6765\u521b\u5efa\u865a\u62df\u73af\u5883\uff0cangr\u7248\u672c\u4e3a\u76ee\u524d\u6700\u65b0\u7684angr-9.0.10055\uff0c\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u9009\u62e9\u64cd\u4f5c\u7cfb\u7edf\u548c\u865a\u62df\u73af\u5883\u5de5\u5177\uff0c\u57fa\u672c\u6ca1\u6709\u533a\u522b\u3002 \u5b98\u65b9\u7684\u5b89\u88c5\u6559\u7a0b\uff1a Installing \uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002","title":"0x00. angr\u7684\u5b89\u88c5"},{"location":"angr/01_angr%E5%85%A5%E9%97%A8/#0x01","text":"\u8fd8\u662f\u5148\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u7a0b\u5e8f\uff1a #include <cstdio> #include <cstdlib> #include <cstring> void encrypt(char* flag){ for(int i = 0;i < 13;i ++){ flag[i] ^= i; flag[i] += 32; } } // flag{G00dJ0b} int main(){ char flag[100] = {0}; scanf(\"%s\", flag); if(strlen(flag) != 13){ printf(\"Wrong length!\\n\"); exit(0); } encrypt(flag); if(!strcmp(flag, \"\\x86\\x8d\\x83\\x84\\x9f\\x62\\x56\\x57\\x8c\\x63\\x5a\\x89\\x91\")){ printf(\"Right!\\n\"); }else{ printf(\"Wrong!\\n\"); } } \u5728Ubuntu\u4e0b\u7f16\u8bd1\u540e\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6example-1\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5728Windows\u4e0b\u7f16\u8bd1\u5462\uff0c\u56e0\u4e3aWindows\u4e0b\u7f16\u8bd1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5728\u7b26\u53f7\u6267\u884c\u65f6\u4f1a\u9047\u5230\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\u5c31\u5728Ubuntu\u4e0b\u7f16\u8bd1\u3002","title":"0x01. \u57fa\u672c\u7528\u6cd5"},{"location":"angr/01_angr%E5%85%A5%E9%97%A8/#_1","text":"\u8981\u4f7f\u7528angr\uff0c\u9996\u5148\u9700\u8981\u52a0\u8f7d\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a >>> import angr >>> proj = angr.Project('example-1') \u52a0\u8f7d\u540e\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4e00\u4e9b\u5c5e\u6027\uff1a >>> proj.arch <Arch AMD64 (LE)> >>> proj.entry 4198688 >>> proj.filename 'example-1'","title":"\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6"},{"location":"angr/01_angr%E5%85%A5%E9%97%A8/#simstae","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u628a\u4e8c\u8fdb\u5236\u6587\u4ef6\u52a0\u8f7d\u5230\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u7b26\u53f7\u6267\u884c\u3002\u5728\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u63d0\u5230\u8fc7\uff0c\u7b26\u53f7\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u8981\u4e3a\u6bcf\u6761\u8def\u5f84\u7ef4\u62a4\u4e00\u4e2a\u7b26\u53f7\u72b6\u6001\u03c3\u548c\u8def\u5f84\u7ea6\u675fPC\uff0c\u5bf9\u5e94angr\u4e2d\u7684 SimState \u7c7b\uff1a >>> state = proj.factory.entry_state() <SimState @ 0x401120> angr\u4e2d\u8bb8\u591a\u7c7b\u7684\u90fd\u9700\u8981\u901a\u8fc7factory\u83b7\u5f97\uff0cfactory\u662f\u5de5\u5382\u7684\u610f\u601d\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3aproj\u7684factory\u7ed9\u7528\u6237\u751f\u4ea7\u4e86\u8bb8\u591a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8fd9\u91cc\u751f\u4ea7\u7684\u5b9e\u4f8b\u662fSimState\uff0centry_state\u51fd\u6570\u7528\u6765\u83b7\u53d6\u7a0b\u5e8f\u5165\u53e3\u70b9\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u72b6\u6001\u3002 \u67e5\u770bstate\u4e2d\u7684\u4e00\u4e9b\u5c5e\u6027\uff1a >>> state.regs.rip <BV64 0x401120> >>> state.regs.rax <BV64 0x1c> >>> state.mem[proj.entry].int.resolved <BV32 0xfa1e0ff3> \u521d\u59cb\u7684rip\u4e3a0x401120\uff0c\u4e5f\u5c31\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff1a \u5728angr\u4e2d\uff0c\u65e0\u8bba\u662f\u5177\u4f53\u503c\u8fd8\u662f\u7b26\u53f7\u91cf\u90fd\u6709\u76f8\u540c\u7684\u7c7b\u578b\u2014\u2014claripy.ast.bv.BV\uff0c\u4e5f\u5c31\u662fBitVector\u7684\u610f\u601d\uff0cBV\u540e\u9762\u7684\u6570\u5b57\u8868\u793a\u8fd9\u4e2a\u6bd4\u7279\u5411\u91cf\u7684\u4f4d\u6570\u3002 BV\u53ef\u4ee5\u901a\u8fc7claripy\u8fd9\u4e2a\u6a21\u5757\u521b\u5efa\uff1a >>> claripy.BVV(666, 32) # \u521b\u5efa\u4e00\u4e2a32\u4f4d\u7684\u6709\u5177\u4f53\u503c\u7684BV <BV32 0x29a> >>> claripy.BVS('sym_var', 32) # \u521b\u5efa\u4e00\u4e2a32\u4f4d\u7684\u7b26\u53f7\u503cBV <BV32 sym_var_97_32>","title":"\u7b26\u53f7\u6267\u884c\u72b6\u6001\u2014\u2014SimStae"},{"location":"angr/01_angr%E5%85%A5%E9%97%A8/#simulation-managers","text":"\u6709\u4e86\u521d\u59cb\u72b6\u6001\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u7b26\u53f7\u6267\u884c\u4e86\uff0c\u8981\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0c\u9996\u5148\u5f97\u521b\u5efa\u4e00\u4e2a\u7b26\u53f7\u6267\u884c\u5f15\u64ce\uff1a >>> simgr = proj.factory.simulation_manager(state) <SimulationManager with 1 active> with 1 active\u8868\u793a\u5f53\u524d\u6709\u4e00\u6761\u53ef\u4ee5\u7ee7\u7eed\u5ef6\u4f38\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u521d\u59cb\u72b6\u6001\uff1a >>> simgr.active [<SimState @ 0x401120>] \u63a5\u4e0b\u6765\u6211\u4eec\u8c03\u7528simgr\u7684step\u51fd\u6570\uff0c\u8ba9\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u5f80\u524d\u6267\u884c\u4e00\u6b65\uff0c\u518d\u6765\u67e5\u770b\u5f53\u524d\u7684\u72b6\u6001\uff1a >>> simgr.step() >>> simgr.active [<SimState @ 0x500000>] \u4e00\u6b65\u6b65step\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8ba9simgr\u6267\u884c\u5230\u6211\u4eec\u7684main\u51fd\u6570\u3002\u6b64\u65f6\u7684\u72b6\u6001\u88ab\u4fdd\u5b58\u5230\u4e86found\u8fd9\u4e2a\u6570\u7ec4\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7simgr.found[0]\u83b7\u53d6\u5f53\u524d\u7684\u72b6\u6001\uff1a >>> simgr.explore(find=0x401277) <SimulationManager with 1 found> >>> simgr.found[0] <SimState @ 0x401277> Simulation Managers\u4e2d\u6709\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u6570\u7ec4\uff0c\u4e5f\u53eb\u4f5cstash\uff0c\u7528\u6765\u4fdd\u5b58\u5f53\u524d\u7b26\u53f7\u6267\u884c\u7684\u6240\u6709\u72b6\u6001\uff0c\u8be6\u60c5\u8bf7\u770b\uff1a Stash types \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u8ba9simgr\u6267\u884c\u5230\u8f93\u51fa\"Right!\"\u7684\u90a3\u6761\u8def\u5f84\uff1a >>> simgr.explore(find=0x40138F) <SimulationManager with 1 active, 1 deadended, 1 found> >>> simgr.found[0] <SimState @ 0x40138f> \u7136\u540e\u76f4\u63a5\u6253\u5370\u5f53\u524d\u8def\u5f84\u7684\u6807\u51c6\u8f93\u5165\u6765\u83b7\u53d6flag\uff1a >>> found = simgr.found[0] >>> found.posix.dumps(0) b'flag{G00dJ0b}\\x00\\x00\\x00I\\x02\\x89\\x00J\\x1a*\\x89)\\x02*\\x00\\x00\\x1aL\\x00\\x8a\\x1a\\x0e\\x01\\x0e\\x08\\x89)\\x00\\x89Y\\x02*\\x08\\x00\\x02\\x00I\\x00\\x02\\x01(\\x00\\x08\\x8a\\x00\\x02\\x00' \u7b2c\u4e00\u4e2a\\x00\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u4e5f\u5c31\u662fflag\u3002\u8fd9\u662fangr\u6700\u7b80\u5355\u7c97\u66b4\u7684\u7528\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u7528\u6cd5\u5e76\u4e0d\u80fd\u4f53\u73b0\u7b26\u53f7\u6267\u884c\u548c\u7ea6\u675f\u6c42\u89e3\u7684\u672c\u8d28\uff0c\u4e0d\u5229\u4e8e\u6211\u4eec\u540e\u9762\u7684\u5b66\u4e60\uff0c\u6240\u4ee5\u6211\u4eec\u6362\u4e00\u79cd\u5199\u6cd5\uff1a import claripy import angr proj = angr.Project('example-1') sym_flag = claripy.BVS('flag', 100 * 8) # BV\u7684\u5927\u5c0f\u5f97\u8bbe\u5927\u4e00\u70b9\uff0c\u4e0d\u7136\u8dd1\u4e0d\u51fa\u6765\uff0c\u539f\u56e0\u672a\u77e5 state = proj.factory.entry_state(stdin=sym_flag) simgr = proj.factory.simgr(state) simgr.explore(find=0x40138D) solver = simgr.found[0].solver solver.add(simgr.found[0].regs.eax == 0) print(solver.eval(sym_flag, cast_to=bytes)) \u8f93\u51fa\uff1a b'flag{G00dJ0b}\\x00\\x8a\\x00\\x00*\\x00\\x00I\\x00\\x00\\x00\\x02\\x00\\x02\\x00\\x01\\x02\\x00\\x0c\\x08\\x00I\\x8a\\x19\\x00J\\x00\\x00K\\x18\\x1a\\x1a+\\x00\\x01-\\x08\\x00\\x00*\\x08\\x01\\x00***\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' \u6211\u4eec\u5148\u8ba9\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u8dd1\u52300x40138D\u8fd9\u4e2a\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u8df3\u8f6c\u5230Right\u6216Wrong\u7684jnz\u6307\u4ee4\u8fd9\uff1a strcmp\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5230eax\u5bc4\u5b58\u5668\u5185\uff0c\u5f53strcmp\u6bd4\u8f83\u6210\u7acb\u65f6eax\u4e3a0\uff0c\u4e0d\u6210\u7acb\u65f6eax\u4e3a1\u3002\u7b26\u53f7\u6267\u884c\u7684\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u72b6\u6001\u90fd\u4f1a\u5185\u7f6e\u4e00\u4e2a\u7ea6\u675f\u6c42\u89e3\u5668solver\uff0c\u6c42\u89e3\u5668\u4e2d\u4fdd\u5b58\u4e86\u5f53\u524d\u72b6\u6001\u7684\u8def\u5f84\u7ea6\u675fPC\uff0c\u6240\u4ee5\u53ef\u4ee5\u6211\u4eec\u5728\u5f53\u524d\u72b6\u6001\u624b\u52a8\u6dfb\u52a0\u65b0\u7684\u7ea6\u675f\uff1a solver = simgr.found[0].solver solver.add(simgr.found[0].regs.eax == 0) \u7136\u540e\u8ba9\u7ea6\u675f\u6c42\u89e3\u5668\u6c42\u89e3\u6ee1\u8db3\u7b26\u5408\u6761\u4ef6\u7684\u7b26\u53f7\u503c\u5bf9\u5e94\u7684\u5177\u4f53\u503c\uff1a print(solver.eval(sym_flag, cast_to=bytes)) \u8fd9\u5c31\u662fangr\u7684\u57fa\u672c\u7528\u6cd5\u4e86\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u7ed3\u5408\u4e00\u4e9bCTF\u7684\u5b9e\u4f8b\u6765\u8fdb\u4e00\u6b65\u5b66\u4e60angr\u3002","title":"\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u2014\u2014Simulation Managers"},{"location":"angr/02_angr_explore/","text":"\u4ece\u8fd9\u4e00\u8282\u5f00\u59cb\u6211\u4eec\u901a\u8fc7\u4e00\u4e9b\u5178\u578b\u7684CTF\u4f8b\u9898\u6765\u5b66\u4e60angr\u7684\u7528\u6cd5\uff0c\u8fd9\u4e9b\u4f8b\u5b50\u90fd\u6765\u81eaGitHub\u4e0a\u7684 angr_ctf \u4ed3\u5e93\uff0c\u5efa\u8bae\u8bfb\u8005\u8ddf\u7740\u6559\u7a0b\u4e00\u8d77\u7ec3\u4e60\uff0c\u5e76\u5c1d\u8bd5\u81ea\u5df1\u89e3\u51b3\u3002 \u7b2c\u4e00\u8282\u6211\u4eec\u9996\u5148\u5b66\u4e60explore\u51fd\u6570\u7684\u7b80\u5355\u7528\u6cd5\uff0c\u8fd9\u662fangr\u4e2d\u6700\u7b80\u5355\u7c97\u66b4\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u4e5f\u662f\u975e\u5e38\u5e38\u7528\u7684\u4e00\u4e2a\u51fd\u6570\u3002 00_angr_find \u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u9898\u76ee\uff0c\u8fd9\u70b9\u8ba1\u7b97\u91cf\u76f4\u63a5\u624b\u52a8\u5206\u6790\u4e5f\u5f88\u7b80\u5355\uff1a \u56e0\u4e3a\u7a0b\u5e8f\u6d41\u7a0b\u975e\u5e38\u7b80\u5355\uff0c\u8fd0\u7b97\u91cf\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u6700\u7b80\u5355\u7c97\u66b4\u7684explore\uff1a import angr proj = angr.Project('dist/00_angr_find') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=0x8048678) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'JXWVXRKX' 01_angr_avoid \u8fd9\u9898\u7684main\u51fd\u6570\u975e\u5e38\u5e9e\u5927\u5bfc\u81f4\u65e0\u6cd5\u53cd\u7f16\u8bd1\uff0c\u4e5f\u65e0\u6cd5\u624b\u52a8\u5206\u6790\u7a0b\u5e8f\u6d41\u7a0b\uff1a \u4f46\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u5206\u6790\u5173\u952e\u4ee3\u7801\u6765\u4e86\u89e3\u90e8\u5206\u7a0b\u5e8f\u903b\u8f91\uff0c\u663e\u7136\u53ea\u6709 should_succeed \u4e3atrue\u65f6\u624d\u80fd\u8f93\u51fa\"Good Job.\"\uff0c\u6240\u4ee5avoid_me\u8fd9\u4e2a\u51fd\u6570\u80af\u5b9a\u662f\u4e0d\u80fd\u88ab\u6267\u884c\u7684\uff1a \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u7ed9explore\u51fd\u6570\u4f20\u9012find\u53c2\u6570\u7684\u540c\u65f6\u518d\u4f20\u9012\u4e00\u4e2aavoid\u53c2\u6570\uff0c\u8ba9\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u907f\u5f00avoid_me\u8fd9\u4e2a\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import angr proj = angr.Project('dist/01_angr_avoid') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=0x80485E0, avoid=0x80485A8) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'HUJOZMYS' \u4e0d\u52a0avoid\u53c2\u6570\u4e5f\u80fd\u8dd1\u51fa\u7ed3\u679c\uff0c\u4e0d\u8fc7\u901f\u5ea6\u4f1a\u6162\u5f88\u591a\uff0c\u8fd9\u5c31\u662fexplore\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u7528\u6cd5\u3002 02_angr_find_condition \u8fd9\u9898\u7684\u63a7\u5236\u6d41\u56fe\uff08CFG\uff09\u975e\u5e38\u590d\u6742\uff0c\u4f46\u662f\u67e5\u770b\u4f2a\u4ee3\u7801\u5374\u5f88\u7b80\u5355\uff0c\u63a8\u6d4b\u662f\u6709\u5927\u91cf\u529f\u80fd\u76f8\u540c\u7684\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u5728IDA\u751f\u6210\u4f2a\u4ee3\u7801\u7684\u65f6\u5019\u88ab\u4f18\u5316\u4e86\uff1a \u56e0\u4e3a\u6709\u5f88\u591a\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u6240\u4ee5\u8fd9\u9898\u4e5f\u6709\u5f88\u591a\u53ef\u80fd\u4f1a\u8f93\u51fa\"Good Job.\"\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u50cf 00_angr_find \u90a3\u6837\u8bbe\u5b9a\u4e00\u4e2a\u5355\u4e00\u7684\u76ee\u6807\u5730\u5740\u5c31\u4e0d\u592a\u53ef\u80fd\u4e86\u3002\u4e0d\u8fc7\u5e78\u597d\uff0cexplore\u51fd\u6570\u7684find\u53c2\u6570\u9664\u4e86\u5730\u5740\u5916\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u643a\u5e26SimState\u53c2\u6570\u7684\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import angr def is_successful(state): return b'Good Job.' in state.posix.dumps(1) def should_avoid(state): return b'Try again.' in state.posix.dumps(1) proj = angr.Project('dist/02_angr_find_condition') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=is_successful, avoid=should_avoid) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'HETOBRCU' \u8fd9\u91cc\u901a\u8fc7is_successful\u51fd\u6570\u5224\u65ad\u5f53\u524d\u72b6\u6001\u7684\u8f93\u51fa\u6d41\u4e2d\u662f\u5426\u5305\u542bb'Good Job.'\uff0c\u5982\u679c\u5305\u542b\u5219\u8868\u793a\u5230\u8fbe\u76ee\u7684\u5730\u5740\uff0cok\uff0c\u6b64\u65f6\u53ef\u4ee5\u6253\u5370\u5bf9\u5e94\u7684\u8f93\u5165\u4e86\u3002should_avoid\u51fd\u6570\u540c\u7406\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u9664\u4e86\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u4ee5\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528lambda\u8868\u8fbe\u5f0f\u6765\u7b80\u5316\u4ee3\u7801\uff1a import angr proj = angr.Project('dist/02_angr_find_condition') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) # simgr.explore(find=is_successful, avoid=should_avoid) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u4ec0\u4e48\u662flambda\u8868\u8fbe\u5f0f\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5b66\u4e60\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002","title":"02 angr explore"},{"location":"angr/02_angr_explore/#00_angr_find","text":"\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u9898\u76ee\uff0c\u8fd9\u70b9\u8ba1\u7b97\u91cf\u76f4\u63a5\u624b\u52a8\u5206\u6790\u4e5f\u5f88\u7b80\u5355\uff1a \u56e0\u4e3a\u7a0b\u5e8f\u6d41\u7a0b\u975e\u5e38\u7b80\u5355\uff0c\u8fd0\u7b97\u91cf\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u6700\u7b80\u5355\u7c97\u66b4\u7684explore\uff1a import angr proj = angr.Project('dist/00_angr_find') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=0x8048678) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'JXWVXRKX'","title":"00_angr_find"},{"location":"angr/02_angr_explore/#01_angr_avoid","text":"\u8fd9\u9898\u7684main\u51fd\u6570\u975e\u5e38\u5e9e\u5927\u5bfc\u81f4\u65e0\u6cd5\u53cd\u7f16\u8bd1\uff0c\u4e5f\u65e0\u6cd5\u624b\u52a8\u5206\u6790\u7a0b\u5e8f\u6d41\u7a0b\uff1a \u4f46\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u5206\u6790\u5173\u952e\u4ee3\u7801\u6765\u4e86\u89e3\u90e8\u5206\u7a0b\u5e8f\u903b\u8f91\uff0c\u663e\u7136\u53ea\u6709 should_succeed \u4e3atrue\u65f6\u624d\u80fd\u8f93\u51fa\"Good Job.\"\uff0c\u6240\u4ee5avoid_me\u8fd9\u4e2a\u51fd\u6570\u80af\u5b9a\u662f\u4e0d\u80fd\u88ab\u6267\u884c\u7684\uff1a \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u7ed9explore\u51fd\u6570\u4f20\u9012find\u53c2\u6570\u7684\u540c\u65f6\u518d\u4f20\u9012\u4e00\u4e2aavoid\u53c2\u6570\uff0c\u8ba9\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u907f\u5f00avoid_me\u8fd9\u4e2a\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import angr proj = angr.Project('dist/01_angr_avoid') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=0x80485E0, avoid=0x80485A8) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'HUJOZMYS' \u4e0d\u52a0avoid\u53c2\u6570\u4e5f\u80fd\u8dd1\u51fa\u7ed3\u679c\uff0c\u4e0d\u8fc7\u901f\u5ea6\u4f1a\u6162\u5f88\u591a\uff0c\u8fd9\u5c31\u662fexplore\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u7528\u6cd5\u3002","title":"01_angr_avoid"},{"location":"angr/02_angr_explore/#02_angr_find_condition","text":"\u8fd9\u9898\u7684\u63a7\u5236\u6d41\u56fe\uff08CFG\uff09\u975e\u5e38\u590d\u6742\uff0c\u4f46\u662f\u67e5\u770b\u4f2a\u4ee3\u7801\u5374\u5f88\u7b80\u5355\uff0c\u63a8\u6d4b\u662f\u6709\u5927\u91cf\u529f\u80fd\u76f8\u540c\u7684\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u5728IDA\u751f\u6210\u4f2a\u4ee3\u7801\u7684\u65f6\u5019\u88ab\u4f18\u5316\u4e86\uff1a \u56e0\u4e3a\u6709\u5f88\u591a\u91cd\u590d\u4ee3\u7801\u5757\uff0c\u6240\u4ee5\u8fd9\u9898\u4e5f\u6709\u5f88\u591a\u53ef\u80fd\u4f1a\u8f93\u51fa\"Good Job.\"\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u50cf 00_angr_find \u90a3\u6837\u8bbe\u5b9a\u4e00\u4e2a\u5355\u4e00\u7684\u76ee\u6807\u5730\u5740\u5c31\u4e0d\u592a\u53ef\u80fd\u4e86\u3002\u4e0d\u8fc7\u5e78\u597d\uff0cexplore\u51fd\u6570\u7684find\u53c2\u6570\u9664\u4e86\u5730\u5740\u5916\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u643a\u5e26SimState\u53c2\u6570\u7684\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import angr def is_successful(state): return b'Good Job.' in state.posix.dumps(1) def should_avoid(state): return b'Try again.' in state.posix.dumps(1) proj = angr.Project('dist/02_angr_find_condition') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=is_successful, avoid=should_avoid) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'HETOBRCU' \u8fd9\u91cc\u901a\u8fc7is_successful\u51fd\u6570\u5224\u65ad\u5f53\u524d\u72b6\u6001\u7684\u8f93\u51fa\u6d41\u4e2d\u662f\u5426\u5305\u542bb'Good Job.'\uff0c\u5982\u679c\u5305\u542b\u5219\u8868\u793a\u5230\u8fbe\u76ee\u7684\u5730\u5740\uff0cok\uff0c\u6b64\u65f6\u53ef\u4ee5\u6253\u5370\u5bf9\u5e94\u7684\u8f93\u5165\u4e86\u3002should_avoid\u51fd\u6570\u540c\u7406\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \u9664\u4e86\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u4ee5\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528lambda\u8868\u8fbe\u5f0f\u6765\u7b80\u5316\u4ee3\u7801\uff1a import angr proj = angr.Project('dist/02_angr_find_condition') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) # simgr.explore(find=is_successful, avoid=should_avoid) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u4ec0\u4e48\u662flambda\u8868\u8fbe\u5f0f\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5b66\u4e60\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002","title":"02_angr_find_condition"},{"location":"angr/03_angr_symbolic/","text":"\u4e4b\u524d\u63d0\u5230\u8fc7\uff0cangr\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u4f1a\u7b26\u53f7\u5316\u4ece\u6807\u51c6\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u7684\u6570\u636e\uff0c\u800c\u5b9e\u9645\u60c5\u51b5\u5f80\u5f80\u9700\u8981\u6211\u4eec\u7b26\u53f7\u5316\u5176\u4ed6\u6570\u636e\uff0c\u5982\u5bc4\u5b58\u5668\u3001\u67d0\u5757\u5185\u5b58\u751a\u81f3\u662f\u67d0\u4e2a\u6587\u4ef6\u3002\u8fd9\u4e00\u8282\u6211\u4eec\u6765\u5b66\u4e60\u5982\u4f55\u624b\u52a8\u7b26\u53f7\u5316\u5e76\u4e14\u5229\u7528angr\u5185\u7f6e\u7684\u7ea6\u675f\u6c42\u89e3\u5668\u5bf9\u7b26\u53f7\u503c\u8fdb\u884c\u7ea6\u675f\u6c42\u89e3\u3002 03_angr_symbolic_registers \u8fd9\u9898\u7684\u903b\u8f91\u4e5f\u975e\u5e38\u7b80\u5355\uff1a \u5f53\u7136\u4e86\uff0c\u8fd9\u79cd\u9898\u663e\u7136\u4e5f\u662f\u53ef\u4ee5\u7528\u4e4b\u524d\u7684\u65b9\u6cd5\u8dd1\u51fa\u6765\u7684\uff1a import angr proj = angr.Project('../dist/03_angr_symbolic_registers') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'b9ffd04e ccf63fe8 8fd4d959' \u4f46\u4e3a\u4e86\u4f53\u73b0\u672c\u8282\u7684\u4e3b\u9898\uff0c\u5373\u624b\u52a8\u7b26\u53f7\u5316\u4e0e\u7ea6\u675f\u6c42\u89e3\uff0c\u6211\u4eec\u5c1d\u8bd5\u6362\u4e00\u79cd\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002 \u8981\u51c6\u786e\u8fdb\u884c\u7b26\u53f7\u5316\uff0c\u6211\u4eec\u5f97\u4ece\u6c47\u7f16\u7740\u624b\u5206\u6790\uff1a \u6211\u4eec\u4ece\u4ee5\u4e0a\u7528\u7ea2\u8272\u6846\u6846\u6807\u8bb0\u7684\u5173\u952e\u6307\u4ee4\u5904\u53ef\u4ee5\u5206\u6790\u51faget_user_input\u8bfb\u5165\u76843\u4e2aint\u662f\u5206\u522b\u4fdd\u5b58\u5728eax, ebx\u548cedx\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u7b26\u53f7\u5316\uff1a password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) password2 = claripy.BVS('password2', 32) state.regs.eax = password0 state.regs.ebx = password1 state.regs.edx = password2 \u7136\u540e\u8ba9\u7a0b\u5e8f\u8dd1\u52300x080489E6\u8fd9\u4e2a\u5730\u5740\uff1a simgr.explore(find=0x80489E6) \u5728\u8fd9\u4e2a\u5730\u5740\u5bf9\u5e94\u7684\u72b6\u6001\u4e0b\u5bf9\u6211\u4eec\u4e4b\u524d\u6ce8\u5165\u7684\u7b26\u53f7\u503c\u8fdb\u884c\u7ea6\u675f\u6c42\u89e3\uff0c\u4e4b\u524d\u8bf4\u8fc7SimState\u5185\u7f6e\u7684\u7ea6\u675f\u6c42\u89e3\u5668\u662f\u4f1a\u4fdd\u5b58\u5f53\u524d\u7684\u8def\u5f84\u7ea6\u675f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6dfb\u52a0\u989d\u5916\u7ea6\u675f\u4e86\uff1a solver = simgr.found[0].solver print(f'password0: {hex(solver.eval(password0))}') print(f'password1: {hex(solver.eval(password1))}') print(f'password2: {hex(solver.eval(password2))}') \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/03_angr_symbolic_registers') state = proj.factory.blank_state(addr=0x8048980) password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) password2 = claripy.BVS('password2', 32) state.regs.eax = password0 state.regs.ebx = password1 state.regs.edx = password2 simgr = proj.factory.simgr(state) simgr.explore(find=0x80489E6) solver = simgr.found[0].solver print(f'password0: {hex(solver.eval(password0))}') print(f'password1: {hex(solver.eval(password1))}') print(f'password2: {hex(solver.eval(password2))}') \u8f93\u51fa\uff1a password0: 0xb9ffd04e password1: 0xccf63fe8 password2: 0x8fd4d959 \u6ce8\u610f\u8fd9\u91cc\u7684\u521d\u59cbstate\u662f\u901a\u8fc7blank_state\u51fd\u6570\u800c\u4e0d\u662fentry_state\u51fd\u6570\u83b7\u5f97\u7684\uff1a state = proj.factory.blank_state(addr=0x8048980) \u56e0\u4e3a\u57280x8048980\u4e4b\u524d\u7684\u6307\u4ee4\u5bf9\u6211\u4eec\u7684\u6c42\u89e3\u5176\u5b9e\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\uff0c\u5305\u62ecget_user_input\u51fd\u6570\uff0c\u56e0\u4e3a\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5c06get_user_input\u51fd\u6570\u7684\u7ed3\u679c\u7b26\u53f7\u5316\u4e86\uff0c\u800c\u4e0d\u662f\u8ba9angr\u81ea\u52a8\u5e2e\u6211\u4eec\u7b26\u53f7\u5316\u901a\u8fc7scanf\u8bfb\u53d6\u7684\u6570\u636e\uff1a \u53ef\u80fd\u6709\u540c\u5b66\u8fd8\u4f1a\u6709\u7591\u95ee\uff1a\u5982\u679c\u76f4\u63a5\u4ece0x8048980\u8fd9\u4e2a\u5730\u5740\u5f00\u59cb\u7b26\u53f7\u6267\u884c\uff0c\u90a3\u521d\u59cb\u7684\u72b6\u6001\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f\u6839\u636ex86\u6c47\u7f16\u5e38\u8bc6\uff0c\u50cfeax\uff0cebx\uff0cecx\u8fd9\u6837\u7684\u5bc4\u5b58\u5668\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u51fd\u6570\u5185\u4e0d\u4f1a\u5f15\u7528\u5728\u51fd\u6570\u5916\u90e8\u8bbe\u7f6e\u7684eax\uff0cebx\u6216\u8005ecx\u7684\u503c\uff0c\u800c\u662f\u5728\u51fd\u6570\u5185\u90e8\u5bf9\u5bc4\u5b58\u5668\u91cd\u65b0\u521d\u59cb\u5316\u5e76\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a \u6240\u4ee5\u6211\u4eec\u7528blank_state\u83b7\u53d6\u7684\u72b6\u6001\uff0c\u5373\u65f6\u521d\u59cb\u7684\u4e00\u4e9b\u5bc4\u5b58\u5668\u5904\u4e8e\u672a\u521d\u59cb\u5316\u72b6\u6001\u4e5f\u662f\u4e1d\u6beb\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u88ab\u521d\u59cb\u5316\uff1a >>> state.regs.ecx <BV32 reg_c_3_32{UNINITIALIZED}> \u81f3\u4e8eesp\uff0cangr\u4f1a\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u9ed8\u8ba4\u7684\u521d\u503c\uff0c\u4f7f\u63a5\u4e0b\u6765\u7684\u51fd\u6570\u8c03\u7528\u4e0d\u4f1a\u7206\u70b8\uff1a >>> state.regs.esp <BV32 0x7fff0000> ebp\u7684\u521d\u59cb\u503c\u4ecd\u7136\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u4f46\u5bf9\u6211\u4eec\u540e\u7eed\u7684\u7b26\u53f7\u6267\u884c\u6ca1\u6709\u5f71\u54cd\uff0c\u4e0d\u7ba1\u5b83\u5c31\u884c\uff1a >>> state.regs.ebp <BV32 reg_1c_3_32{UNINITIALIZED}> \u8fd9\u90e8\u5206\u89e3\u91ca\u8d77\u6765\u6bd4\u8f83\u56f0\u96be\uff0c\u9700\u8981\u8bfb\u8005\u672c\u8eab\u5bf9x86\u6c47\u7f16\u975e\u5e38\u4e4b\u719f\u6089\uff0c\u6240\u4ee5\u5982\u679c\u5927\u5bb6\u8fd8\u6ca1\u6709\u5f04\u660e\u767d\uff0c\u662f\u56e0\u4e3a\u5bf9x86\u6c47\u7f16\u8fd8\u4e0d\u591f\u719f\u6089\uff0c\u800c\u4e0d\u662f\u4f5c\u8005\u6ca1\u6709\u89e3\u91ca\u6e05\u695a\uff08\u8bef\uff09\u3002 04_angr_symbolic_stack \u4e86\u89e3\u4e86\u5bf9\u5bc4\u5b58\u5668\u7684\u7b26\u53f7\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u770b\u770b\u5982\u4f55\u5bf9\u6808\u7a7a\u95f4\u5185\u7684\u6570\u636e\u8fdb\u884c\u7b26\u53f7\u5316\u3002\u8fd8\u662f\u5148\u6765\u770b\u770b\u8fd9\u9898\u7684\u903b\u8f91\uff1a \u6211\u4eec\u4ecd\u7136\u4ecescanf\u7684\u540e\u9762\u4e00\u6761\u6307\u4ee4\u5f00\u59cb\uff1a state = proj.factory.blank_state(addr=0x8048694) \u4e4b\u524d\u6211\u4eec\u8bf4\u8fc7\u901a\u8fc7blank_state\u83b7\u53d6\u521d\u59cb\u72b6\u6001\uff0cebp\u7684\u503c\u662f\u672a\u7ea6\u675f\u7684\u3002\u5728\u8fd9\u9898\u4e2d\uff0c\u6211\u4eec\u4e4b\u540e\u8981\u5411\u6808\u4e2dpush\u7b26\u53f7\u503c\uff0c\u5e76\u4e14\u901a\u8fc7ebp\u7d22\u5f15\u8fd9\u4e9b\u7b26\u53f7\u503c\uff08\u6bd4\u5982 [ebp+var_C] \uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u8ba9ebp\u6709\u4e00\u4e2a\u6b63\u786e\u7684\u521d\u503c\u4e86\u3002\u4e4b\u6240\u4ee5\u8bf4\u662f\u6b63\u786e\u7684\u521d\u503c\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u8df3\u8fc7\u4e86\u51fd\u6570\u5f00\u5934\u5bf9\u6808\u7684\u8c03\u6574\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u624b\u52a8\u8c03\u6574ebp\u7684\u503c\uff1a ebp\u7684\u503c\u662f\u4ec0\u4e48\u4e0d\u91cd\u8981\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5b83\u548cesp\u7684\u504f\u79fb\u662f\u6b63\u786e\u7684\u5373\u53ef\uff0c\u5bf9\u524d\u9762\u7684\u6c47\u7f16\u6307\u4ee4\u8fdb\u884c\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u6b64\u65f6ebp\u7684\u504f\u79fb\u91cf\u4e3a\uff1a0x18+4+4+4+4=40 state.regs.ebp = state.regs.esp + 40 \u7136\u540e\u5bf9esp\u7684\u503c\u6267\u884c\u8c03\u6574\uff0c\u4f7f\u6211\u4eec\u63a5\u4e0b\u6765push\u8fdb\u53bb\u7684\u7b26\u53f7\u503c\u6070\u597d\u5728[ebp+var_10]\u548c[ebp+var_C]\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u8bb0\u5f97push\u5b8c\u4e4b\u540e\u8981\u628aesp\u8c03\u56de\u6765\u54e6\uff1a state.regs.esp = state.regs.ebp - 0xC + 4 password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) state.stack_push(password0) state.stack_push(password1) state.regs.esp = state.regs.ebp - 40 \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/04_angr_symbolic_stack') state = proj.factory.blank_state(addr=0x8048694) state.regs.ebp = state.regs.esp + 40 state.regs.esp = state.regs.ebp - 0xC + 4 password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) state.stack_push(password0) state.stack_push(password1) state.regs.esp = state.regs.ebp - 40 simgr = proj.factory.simgr(state) simgr.explore(find=0x80486E1) solver = simgr.found[0].solver print(f'password0: {hex(solver.eval(password0))}') print(f'password1: {hex(solver.eval(password1))}') \u8f93\u51fa\uff1a password0: 0x65954334 password1: 0x8dffa41f \u8fd9\u9898\u7684\u5173\u952e\u5728\u4e8e\u7ef4\u62a4\u5806\u6808\uff0c\u540c\u6837\u9700\u8981\u8bfb\u8005\u5bf9x86\u6c47\u7f16\u8bed\u8a00\u6709\u4e00\u5b9a\u7684\u7406\u89e3\u3002\u5f53\u7136\u8fd9\u9898\u6709\u66f4\u7b80\u5355\u7684\u5199\u6cd5\uff0c\u8fd9\u4e00\u8282\u6240\u6709\u7684\u9898\u90fd\u6709\u7b80\u5355\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4e3a\u4e86\u8ba9\u5927\u5bb6\u80fd\u591f\u5b66\u5230angr\u7684\u7528\u6cd5\u800c\u6545\u610f\u5199\u5f97\u590d\u6742\u4e86\u3002 05_angr_symbolic_memory \u8fd9\u9898\u7684\u8f93\u5165\u4fdd\u5b58\u5728\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf user_input \u91cc\uff0c\u903b\u8f91\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\uff1a \u6211\u4eec\u53ea\u9700\u8981\u5bf9 user_input \u8fdb\u884c\u7b26\u53f7\u5316\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u5bf90xA1BA1C0\u5f00\u59cb\u768432\u5b57\u8282\u5185\u5b58\u8fdb\u884c\u7b26\u53f7\u5316\uff0c\u5bf9\u5185\u5b58\u8fdb\u884c\u7b26\u53f7\u5316\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) password2 = claripy.BVS('password2', 64) password3 = claripy.BVS('password3', 64) state.mem[0xA1BA1C0].uint64_t = password0 state.mem[0xA1BA1C0 + 8].uint64_t = password1 state.mem[0xA1BA1C0 + 16].uint64_t = password2 state.mem[0xA1BA1C0 + 24].uint64_t = password3 \u5982\u679c\u6211\u4eec\u8981\u83b7\u53d6\u5185\u5b58\u4e2d\u7684\u6570\u636e\uff08\u5177\u4f53\u503c\u6216\u8005\u7b26\u53f7\u503c\uff09\uff0c\u53ef\u4ee5\u8fd9\u6837\u7528\uff1a >>> state.mem[0xA1BA1C0].uint64_t.resolved <BV64 password0_0_64> \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a import angr import claripy proj = angr.Project('../dist/05_angr_symbolic_memory') state = proj.factory.blank_state(addr=0x80485FE) password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) password2 = claripy.BVS('password2', 64) password3 = claripy.BVS('password3', 64) state.mem[0xA1BA1C0].uint64_t = password0 state.mem[0xA1BA1C0 + 8].uint64_t = password1 state.mem[0xA1BA1C0 + 16].uint64_t = password2 state.mem[0xA1BA1C0 + 24].uint64_t = password3 simgr = proj.factory.simgr(state) simgr.explore(find=0x804866A) solver = simgr.found[0].solver print(f'password0: {solver.eval(password0, cast_to=bytes)}') print(f'password1: {solver.eval(password1, cast_to=bytes)}') print(f'password2: {solver.eval(password2, cast_to=bytes)}') print(f'password3: {solver.eval(password3, cast_to=bytes)}') \u8f93\u51fa\uff1a password0: b'RNGHTXAN' password1: b'EWPTFSVJ' password2: b'CWHUAGML' password3: b'ULAPCDMX' 06_angr_symbolic_dynamic_memory \u8fd9\u9898\u4f7f\u7528\u4e86malloc\u51fd\u6570\u6765\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u56e0\u6b64\u8f93\u5165\u7684\u5730\u5740\u5c31\u4e0d\u662f\u56fa\u5b9a\u7684\u4e86\uff1a \u4f46\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5728\u5185\u5b58\u4e2d\u9009\u5b9a\u4e00\u5757\u533a\u57df\u4f5c\u4e3a\u8f93\u5165\u7684\u5730\u5740\uff0c\u6bd4\u5982\u8bf4\u5728.bss\u6bb5\u9009\u5b9a\u4e00\u5757\u672a\u4f7f\u7528\u768416\u5b57\u8282\u533a\u57df\uff0c\u7136\u540e\u5bf9\u8f93\u5165\u8fdb\u884c\u7b26\u53f7\u5316\uff1a password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) state.mem[0xABCC700].uint64_t = password0 state.mem[0xABCC700 + 8].uint64_t = password1 \u7136\u540e\u5c06buffer0\u548cbuffer1\u7684\u5730\u5740\u8bbe\u6210\u6211\u4eec\u521a\u521a\u9009\u5b9a\u7684\u5730\u5740\uff1a state.mem[0xABCC8A4].uint32_t = 0xABCC700 state.mem[0xABCC8AC].uint32_t = 0xABCC700 + 8 \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/06_angr_symbolic_dynamic_memory') state = proj.factory.blank_state(addr=0x8048696) password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) state.mem[0xABCC700].uint64_t = password0 state.mem[0xABCC700 + 8].uint64_t = password1 state.mem[0xABCC8A4].uint32_t = 0xABCC700 state.mem[0xABCC8AC].uint32_t = 0xABCC700 + 8 simgr = proj.factory.simgr(state) simgr.explore(find=0x8048759) solver = simgr.found[0].solver print(f'password0: {solver.eval(password0, cast_to=bytes)}') print(f'password1: {solver.eval(password1, cast_to=bytes)}') \u8f93\u51fa\uff1a password0: b'VBMLKDBU' password1: b'SYNREONU' 07_angr_symbolic_file \u8fd9\u9898\u662f\u5148\u628a\u8f93\u5165\u5199\u8fdb\u6587\u4ef6\uff0c\u518d\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8f93\u5165\uff1a \u5728\u8fd9\u9898\u4e2d\u6211\u4eec\u8981\u5ffd\u7565scanf\uff0c\u76f4\u63a5\u5bf9\u6587\u4ef6\u7684\u5185\u5bb9\u8fdb\u884c\u7b26\u53f7\u5316\u3002\u8981\u5bf9\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u7b26\u53f7\u5316\uff0c\u9996\u5148\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u6a21\u62df\u7684\u6587\u4ef6 SimFile \uff0c\u6587\u4ef6\u540d\u4e3a'OJKSQYDP.txt'\uff0c\u5185\u5bb9\u4e3a8\u5b57\u8282\u7684\u7b26\u53f7\u503c\uff0c\u5927\u5c0f\u4e3a0x40\u5b57\u8282\uff1a password0 = claripy.BVS('password0', 64) sim_file = angr.SimFile(name='OJKSQYDP.txt', content=password0, size=0x40) \u7136\u540e\u63d2\u5165\u5230state\u7684\u6587\u4ef6\u7cfb\u7edf\uff08FileSystem\uff09\u4e2d\uff0cstate\u7684\u6587\u4ef6\u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7state.fs\u83b7\u5f97\uff1a state.fs.insert('OJKSQYDP.txt', sim_file) \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/07_angr_symbolic_file') state = proj.factory.blank_state(addr=0x80488D3) password0 = claripy.BVS('password0', 64) sim_file = angr.SimFile(name='OJKSQYDP.txt', content=password0, size=0x40) state.fs.insert('OJKSQYDP.txt', sim_file) simgr = proj.factory.simgr(state) simgr.explore(find=0x80489AD) solver = simgr.found[0].solver print(f'password0: {solver.eval(password0, cast_to=bytes)}') \u8f93\u51fa\uff1a password0: b'AZOMMMZM'","title":"03 angr symbolic"},{"location":"angr/03_angr_symbolic/#03_angr_symbolic_registers","text":"\u8fd9\u9898\u7684\u903b\u8f91\u4e5f\u975e\u5e38\u7b80\u5355\uff1a \u5f53\u7136\u4e86\uff0c\u8fd9\u79cd\u9898\u663e\u7136\u4e5f\u662f\u53ef\u4ee5\u7528\u4e4b\u524d\u7684\u65b9\u6cd5\u8dd1\u51fa\u6765\u7684\uff1a import angr proj = angr.Project('../dist/03_angr_symbolic_registers') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'b9ffd04e ccf63fe8 8fd4d959' \u4f46\u4e3a\u4e86\u4f53\u73b0\u672c\u8282\u7684\u4e3b\u9898\uff0c\u5373\u624b\u52a8\u7b26\u53f7\u5316\u4e0e\u7ea6\u675f\u6c42\u89e3\uff0c\u6211\u4eec\u5c1d\u8bd5\u6362\u4e00\u79cd\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002 \u8981\u51c6\u786e\u8fdb\u884c\u7b26\u53f7\u5316\uff0c\u6211\u4eec\u5f97\u4ece\u6c47\u7f16\u7740\u624b\u5206\u6790\uff1a \u6211\u4eec\u4ece\u4ee5\u4e0a\u7528\u7ea2\u8272\u6846\u6846\u6807\u8bb0\u7684\u5173\u952e\u6307\u4ee4\u5904\u53ef\u4ee5\u5206\u6790\u51faget_user_input\u8bfb\u5165\u76843\u4e2aint\u662f\u5206\u522b\u4fdd\u5b58\u5728eax, ebx\u548cedx\u5bc4\u5b58\u5668\u4e2d\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\u7b26\u53f7\u5316\uff1a password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) password2 = claripy.BVS('password2', 32) state.regs.eax = password0 state.regs.ebx = password1 state.regs.edx = password2 \u7136\u540e\u8ba9\u7a0b\u5e8f\u8dd1\u52300x080489E6\u8fd9\u4e2a\u5730\u5740\uff1a simgr.explore(find=0x80489E6) \u5728\u8fd9\u4e2a\u5730\u5740\u5bf9\u5e94\u7684\u72b6\u6001\u4e0b\u5bf9\u6211\u4eec\u4e4b\u524d\u6ce8\u5165\u7684\u7b26\u53f7\u503c\u8fdb\u884c\u7ea6\u675f\u6c42\u89e3\uff0c\u4e4b\u524d\u8bf4\u8fc7SimState\u5185\u7f6e\u7684\u7ea6\u675f\u6c42\u89e3\u5668\u662f\u4f1a\u4fdd\u5b58\u5f53\u524d\u7684\u8def\u5f84\u7ea6\u675f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6dfb\u52a0\u989d\u5916\u7ea6\u675f\u4e86\uff1a solver = simgr.found[0].solver print(f'password0: {hex(solver.eval(password0))}') print(f'password1: {hex(solver.eval(password1))}') print(f'password2: {hex(solver.eval(password2))}') \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/03_angr_symbolic_registers') state = proj.factory.blank_state(addr=0x8048980) password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) password2 = claripy.BVS('password2', 32) state.regs.eax = password0 state.regs.ebx = password1 state.regs.edx = password2 simgr = proj.factory.simgr(state) simgr.explore(find=0x80489E6) solver = simgr.found[0].solver print(f'password0: {hex(solver.eval(password0))}') print(f'password1: {hex(solver.eval(password1))}') print(f'password2: {hex(solver.eval(password2))}') \u8f93\u51fa\uff1a password0: 0xb9ffd04e password1: 0xccf63fe8 password2: 0x8fd4d959 \u6ce8\u610f\u8fd9\u91cc\u7684\u521d\u59cbstate\u662f\u901a\u8fc7blank_state\u51fd\u6570\u800c\u4e0d\u662fentry_state\u51fd\u6570\u83b7\u5f97\u7684\uff1a state = proj.factory.blank_state(addr=0x8048980) \u56e0\u4e3a\u57280x8048980\u4e4b\u524d\u7684\u6307\u4ee4\u5bf9\u6211\u4eec\u7684\u6c42\u89e3\u5176\u5b9e\u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\uff0c\u5305\u62ecget_user_input\u51fd\u6570\uff0c\u56e0\u4e3a\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5c06get_user_input\u51fd\u6570\u7684\u7ed3\u679c\u7b26\u53f7\u5316\u4e86\uff0c\u800c\u4e0d\u662f\u8ba9angr\u81ea\u52a8\u5e2e\u6211\u4eec\u7b26\u53f7\u5316\u901a\u8fc7scanf\u8bfb\u53d6\u7684\u6570\u636e\uff1a \u53ef\u80fd\u6709\u540c\u5b66\u8fd8\u4f1a\u6709\u7591\u95ee\uff1a\u5982\u679c\u76f4\u63a5\u4ece0x8048980\u8fd9\u4e2a\u5730\u5740\u5f00\u59cb\u7b26\u53f7\u6267\u884c\uff0c\u90a3\u521d\u59cb\u7684\u72b6\u6001\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f\u6839\u636ex86\u6c47\u7f16\u5e38\u8bc6\uff0c\u50cfeax\uff0cebx\uff0cecx\u8fd9\u6837\u7684\u5bc4\u5b58\u5668\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u51fd\u6570\u5185\u4e0d\u4f1a\u5f15\u7528\u5728\u51fd\u6570\u5916\u90e8\u8bbe\u7f6e\u7684eax\uff0cebx\u6216\u8005ecx\u7684\u503c\uff0c\u800c\u662f\u5728\u51fd\u6570\u5185\u90e8\u5bf9\u5bc4\u5b58\u5668\u91cd\u65b0\u521d\u59cb\u5316\u5e76\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a \u6240\u4ee5\u6211\u4eec\u7528blank_state\u83b7\u53d6\u7684\u72b6\u6001\uff0c\u5373\u65f6\u521d\u59cb\u7684\u4e00\u4e9b\u5bc4\u5b58\u5668\u5904\u4e8e\u672a\u521d\u59cb\u5316\u72b6\u6001\u4e5f\u662f\u4e1d\u6beb\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u88ab\u521d\u59cb\u5316\uff1a >>> state.regs.ecx <BV32 reg_c_3_32{UNINITIALIZED}> \u81f3\u4e8eesp\uff0cangr\u4f1a\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u9ed8\u8ba4\u7684\u521d\u503c\uff0c\u4f7f\u63a5\u4e0b\u6765\u7684\u51fd\u6570\u8c03\u7528\u4e0d\u4f1a\u7206\u70b8\uff1a >>> state.regs.esp <BV32 0x7fff0000> ebp\u7684\u521d\u59cb\u503c\u4ecd\u7136\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u4f46\u5bf9\u6211\u4eec\u540e\u7eed\u7684\u7b26\u53f7\u6267\u884c\u6ca1\u6709\u5f71\u54cd\uff0c\u4e0d\u7ba1\u5b83\u5c31\u884c\uff1a >>> state.regs.ebp <BV32 reg_1c_3_32{UNINITIALIZED}> \u8fd9\u90e8\u5206\u89e3\u91ca\u8d77\u6765\u6bd4\u8f83\u56f0\u96be\uff0c\u9700\u8981\u8bfb\u8005\u672c\u8eab\u5bf9x86\u6c47\u7f16\u975e\u5e38\u4e4b\u719f\u6089\uff0c\u6240\u4ee5\u5982\u679c\u5927\u5bb6\u8fd8\u6ca1\u6709\u5f04\u660e\u767d\uff0c\u662f\u56e0\u4e3a\u5bf9x86\u6c47\u7f16\u8fd8\u4e0d\u591f\u719f\u6089\uff0c\u800c\u4e0d\u662f\u4f5c\u8005\u6ca1\u6709\u89e3\u91ca\u6e05\u695a\uff08\u8bef\uff09\u3002","title":"03_angr_symbolic_registers"},{"location":"angr/03_angr_symbolic/#04_angr_symbolic_stack","text":"\u4e86\u89e3\u4e86\u5bf9\u5bc4\u5b58\u5668\u7684\u7b26\u53f7\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u770b\u770b\u5982\u4f55\u5bf9\u6808\u7a7a\u95f4\u5185\u7684\u6570\u636e\u8fdb\u884c\u7b26\u53f7\u5316\u3002\u8fd8\u662f\u5148\u6765\u770b\u770b\u8fd9\u9898\u7684\u903b\u8f91\uff1a \u6211\u4eec\u4ecd\u7136\u4ecescanf\u7684\u540e\u9762\u4e00\u6761\u6307\u4ee4\u5f00\u59cb\uff1a state = proj.factory.blank_state(addr=0x8048694) \u4e4b\u524d\u6211\u4eec\u8bf4\u8fc7\u901a\u8fc7blank_state\u83b7\u53d6\u521d\u59cb\u72b6\u6001\uff0cebp\u7684\u503c\u662f\u672a\u7ea6\u675f\u7684\u3002\u5728\u8fd9\u9898\u4e2d\uff0c\u6211\u4eec\u4e4b\u540e\u8981\u5411\u6808\u4e2dpush\u7b26\u53f7\u503c\uff0c\u5e76\u4e14\u901a\u8fc7ebp\u7d22\u5f15\u8fd9\u4e9b\u7b26\u53f7\u503c\uff08\u6bd4\u5982 [ebp+var_C] \uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u8ba9ebp\u6709\u4e00\u4e2a\u6b63\u786e\u7684\u521d\u503c\u4e86\u3002\u4e4b\u6240\u4ee5\u8bf4\u662f\u6b63\u786e\u7684\u521d\u503c\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u8df3\u8fc7\u4e86\u51fd\u6570\u5f00\u5934\u5bf9\u6808\u7684\u8c03\u6574\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u624b\u52a8\u8c03\u6574ebp\u7684\u503c\uff1a ebp\u7684\u503c\u662f\u4ec0\u4e48\u4e0d\u91cd\u8981\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5b83\u548cesp\u7684\u504f\u79fb\u662f\u6b63\u786e\u7684\u5373\u53ef\uff0c\u5bf9\u524d\u9762\u7684\u6c47\u7f16\u6307\u4ee4\u8fdb\u884c\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u6b64\u65f6ebp\u7684\u504f\u79fb\u91cf\u4e3a\uff1a0x18+4+4+4+4=40 state.regs.ebp = state.regs.esp + 40 \u7136\u540e\u5bf9esp\u7684\u503c\u6267\u884c\u8c03\u6574\uff0c\u4f7f\u6211\u4eec\u63a5\u4e0b\u6765push\u8fdb\u53bb\u7684\u7b26\u53f7\u503c\u6070\u597d\u5728[ebp+var_10]\u548c[ebp+var_C]\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u8bb0\u5f97push\u5b8c\u4e4b\u540e\u8981\u628aesp\u8c03\u56de\u6765\u54e6\uff1a state.regs.esp = state.regs.ebp - 0xC + 4 password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) state.stack_push(password0) state.stack_push(password1) state.regs.esp = state.regs.ebp - 40 \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/04_angr_symbolic_stack') state = proj.factory.blank_state(addr=0x8048694) state.regs.ebp = state.regs.esp + 40 state.regs.esp = state.regs.ebp - 0xC + 4 password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) state.stack_push(password0) state.stack_push(password1) state.regs.esp = state.regs.ebp - 40 simgr = proj.factory.simgr(state) simgr.explore(find=0x80486E1) solver = simgr.found[0].solver print(f'password0: {hex(solver.eval(password0))}') print(f'password1: {hex(solver.eval(password1))}') \u8f93\u51fa\uff1a password0: 0x65954334 password1: 0x8dffa41f \u8fd9\u9898\u7684\u5173\u952e\u5728\u4e8e\u7ef4\u62a4\u5806\u6808\uff0c\u540c\u6837\u9700\u8981\u8bfb\u8005\u5bf9x86\u6c47\u7f16\u8bed\u8a00\u6709\u4e00\u5b9a\u7684\u7406\u89e3\u3002\u5f53\u7136\u8fd9\u9898\u6709\u66f4\u7b80\u5355\u7684\u5199\u6cd5\uff0c\u8fd9\u4e00\u8282\u6240\u6709\u7684\u9898\u90fd\u6709\u7b80\u5355\u5199\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u4e3a\u4e86\u8ba9\u5927\u5bb6\u80fd\u591f\u5b66\u5230angr\u7684\u7528\u6cd5\u800c\u6545\u610f\u5199\u5f97\u590d\u6742\u4e86\u3002","title":"04_angr_symbolic_stack"},{"location":"angr/03_angr_symbolic/#05_angr_symbolic_memory","text":"\u8fd9\u9898\u7684\u8f93\u5165\u4fdd\u5b58\u5728\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf user_input \u91cc\uff0c\u903b\u8f91\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\uff1a \u6211\u4eec\u53ea\u9700\u8981\u5bf9 user_input \u8fdb\u884c\u7b26\u53f7\u5316\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u5bf90xA1BA1C0\u5f00\u59cb\u768432\u5b57\u8282\u5185\u5b58\u8fdb\u884c\u7b26\u53f7\u5316\uff0c\u5bf9\u5185\u5b58\u8fdb\u884c\u7b26\u53f7\u5316\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) password2 = claripy.BVS('password2', 64) password3 = claripy.BVS('password3', 64) state.mem[0xA1BA1C0].uint64_t = password0 state.mem[0xA1BA1C0 + 8].uint64_t = password1 state.mem[0xA1BA1C0 + 16].uint64_t = password2 state.mem[0xA1BA1C0 + 24].uint64_t = password3 \u5982\u679c\u6211\u4eec\u8981\u83b7\u53d6\u5185\u5b58\u4e2d\u7684\u6570\u636e\uff08\u5177\u4f53\u503c\u6216\u8005\u7b26\u53f7\u503c\uff09\uff0c\u53ef\u4ee5\u8fd9\u6837\u7528\uff1a >>> state.mem[0xA1BA1C0].uint64_t.resolved <BV64 password0_0_64> \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a import angr import claripy proj = angr.Project('../dist/05_angr_symbolic_memory') state = proj.factory.blank_state(addr=0x80485FE) password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) password2 = claripy.BVS('password2', 64) password3 = claripy.BVS('password3', 64) state.mem[0xA1BA1C0].uint64_t = password0 state.mem[0xA1BA1C0 + 8].uint64_t = password1 state.mem[0xA1BA1C0 + 16].uint64_t = password2 state.mem[0xA1BA1C0 + 24].uint64_t = password3 simgr = proj.factory.simgr(state) simgr.explore(find=0x804866A) solver = simgr.found[0].solver print(f'password0: {solver.eval(password0, cast_to=bytes)}') print(f'password1: {solver.eval(password1, cast_to=bytes)}') print(f'password2: {solver.eval(password2, cast_to=bytes)}') print(f'password3: {solver.eval(password3, cast_to=bytes)}') \u8f93\u51fa\uff1a password0: b'RNGHTXAN' password1: b'EWPTFSVJ' password2: b'CWHUAGML' password3: b'ULAPCDMX'","title":"05_angr_symbolic_memory"},{"location":"angr/03_angr_symbolic/#06_angr_symbolic_dynamic_memory","text":"\u8fd9\u9898\u4f7f\u7528\u4e86malloc\u51fd\u6570\u6765\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u56e0\u6b64\u8f93\u5165\u7684\u5730\u5740\u5c31\u4e0d\u662f\u56fa\u5b9a\u7684\u4e86\uff1a \u4f46\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5728\u5185\u5b58\u4e2d\u9009\u5b9a\u4e00\u5757\u533a\u57df\u4f5c\u4e3a\u8f93\u5165\u7684\u5730\u5740\uff0c\u6bd4\u5982\u8bf4\u5728.bss\u6bb5\u9009\u5b9a\u4e00\u5757\u672a\u4f7f\u7528\u768416\u5b57\u8282\u533a\u57df\uff0c\u7136\u540e\u5bf9\u8f93\u5165\u8fdb\u884c\u7b26\u53f7\u5316\uff1a password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) state.mem[0xABCC700].uint64_t = password0 state.mem[0xABCC700 + 8].uint64_t = password1 \u7136\u540e\u5c06buffer0\u548cbuffer1\u7684\u5730\u5740\u8bbe\u6210\u6211\u4eec\u521a\u521a\u9009\u5b9a\u7684\u5730\u5740\uff1a state.mem[0xABCC8A4].uint32_t = 0xABCC700 state.mem[0xABCC8AC].uint32_t = 0xABCC700 + 8 \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/06_angr_symbolic_dynamic_memory') state = proj.factory.blank_state(addr=0x8048696) password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) state.mem[0xABCC700].uint64_t = password0 state.mem[0xABCC700 + 8].uint64_t = password1 state.mem[0xABCC8A4].uint32_t = 0xABCC700 state.mem[0xABCC8AC].uint32_t = 0xABCC700 + 8 simgr = proj.factory.simgr(state) simgr.explore(find=0x8048759) solver = simgr.found[0].solver print(f'password0: {solver.eval(password0, cast_to=bytes)}') print(f'password1: {solver.eval(password1, cast_to=bytes)}') \u8f93\u51fa\uff1a password0: b'VBMLKDBU' password1: b'SYNREONU'","title":"06_angr_symbolic_dynamic_memory"},{"location":"angr/03_angr_symbolic/#07_angr_symbolic_file","text":"\u8fd9\u9898\u662f\u5148\u628a\u8f93\u5165\u5199\u8fdb\u6587\u4ef6\uff0c\u518d\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8f93\u5165\uff1a \u5728\u8fd9\u9898\u4e2d\u6211\u4eec\u8981\u5ffd\u7565scanf\uff0c\u76f4\u63a5\u5bf9\u6587\u4ef6\u7684\u5185\u5bb9\u8fdb\u884c\u7b26\u53f7\u5316\u3002\u8981\u5bf9\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u7b26\u53f7\u5316\uff0c\u9996\u5148\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u6a21\u62df\u7684\u6587\u4ef6 SimFile \uff0c\u6587\u4ef6\u540d\u4e3a'OJKSQYDP.txt'\uff0c\u5185\u5bb9\u4e3a8\u5b57\u8282\u7684\u7b26\u53f7\u503c\uff0c\u5927\u5c0f\u4e3a0x40\u5b57\u8282\uff1a password0 = claripy.BVS('password0', 64) sim_file = angr.SimFile(name='OJKSQYDP.txt', content=password0, size=0x40) \u7136\u540e\u63d2\u5165\u5230state\u7684\u6587\u4ef6\u7cfb\u7edf\uff08FileSystem\uff09\u4e2d\uff0cstate\u7684\u6587\u4ef6\u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7state.fs\u83b7\u5f97\uff1a state.fs.insert('OJKSQYDP.txt', sim_file) \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/07_angr_symbolic_file') state = proj.factory.blank_state(addr=0x80488D3) password0 = claripy.BVS('password0', 64) sim_file = angr.SimFile(name='OJKSQYDP.txt', content=password0, size=0x40) state.fs.insert('OJKSQYDP.txt', sim_file) simgr = proj.factory.simgr(state) simgr.explore(find=0x80489AD) solver = simgr.found[0].solver print(f'password0: {solver.eval(password0, cast_to=bytes)}') \u8f93\u51fa\uff1a password0: b'AZOMMMZM'","title":"07_angr_symbolic_file"},{"location":"angr/04_angr_constraints/","text":"angr\u5728\u7b26\u53f7\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u5c06\u8def\u5f84\u7ea6\u675f\u4fdd\u5b58\u5728SimState\u5185\u7f6e\u7684\u7ea6\u675f\u6c42\u89e3\u5668\u5185\u3002\u8fd9\u4e00\u8282\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u624b\u52a8\u6dfb\u52a0\u7ea6\u675f\u5e76\u8fdb\u884c\u7ea6\u675f\u6c42\u89e3\uff0c\u4ee5\u53ca\u5e94\u5bf9 \u8def\u5f84\u7206\u70b8 \u7684\u4e00\u79cd\u65b9\u6cd5\u3002 08_angr_constraints \u8fd9\u9898\u7684\u6d41\u7a0b\u662f\u5148\u5bf9\u8f93\u5165\u52a0\u5bc6\uff0c\u7136\u540e\u8c03\u7528check_equals_xxx\u51fd\u6570\u5bf9\u52a0\u5bc6\u540e\u7684\u8f93\u5165\u8fdb\u884c\u6bd4\u8f83\uff0c\u82e5\u6bd4\u5bf9\u6210\u529f\u5219\u8f93\u51fa\"Good Job.\"\uff1a check_equals_AUPDNNPROEZRJWKB\u51fd\u6570\u4f1a\u5c06\u8f93\u5165\u4e0e\"AUPDNNPROEZRJWKB\"\u8fdb\u884c\u6bd4\u8f83\uff1a \u8fd9\u9898\u76f4\u63a5\u8c03\u7528explore\u662f\u8dd1\u4e0d\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u5728check_equals\u51fd\u6570\u4e2d\u4e0d\u662f\u6bd4\u5bf9\u5931\u8d25\u5c31\u7acb\u523b\u9000\u51fa\u5faa\u73af\uff0c\u800c\u662f\u4e00\u76f4\u5faa\u73af\u5230\u6700\u540e\u3002\u603b\u5171\u670916\u8f6e\u5faa\u73af\uff0c\u6bcf\u6b21\u5faa\u73af\u4f1a\u4ea7\u751f\u6bd4\u5bf9\u6210\u529f\u548c\u6bd4\u5bf9\u5931\u8d25\u4e24\u4e2a\u72b6\u6001\uff0c\u6240\u4ee5\u7b26\u53f7\u6267\u884c\u603b\u5171\u4f1a\u4ea7\u751f2 16 \u4e2a\u72b6\u6001\uff0c\u5bfc\u81f4 \u8def\u5f84\u7206\u70b8 \uff1a simgr.explore(find=lambda state : b'Good Job.' in state.posix.dumps(1)) # \u4e0d\u884c \u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u6bd4\u8f83\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u6839\u672c\u6ca1\u6709\u5fc5\u8981\u53bb\u8ba9angr\u8dd1\uff0c\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u8fd9\u4e2a\u7ea6\u675f\uff0c\u7136\u540e\u8fdb\u884c\u6c42\u89e3\uff1a simgr.explore(find=0x8048669) # \u6267\u884ccheck_equals_AUPDNNPROEZRJWKB\u51fd\u6570\u4e4b\u524d found = simgr.found[0] found.add_constraints(found.memory.load(buffer_addr, 16) == b'AUPDNNPROEZRJWKB') print(found.solver.eval(password, cast_to=bytes)) \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/08_angr_constraints') state = proj.factory.blank_state(addr=0x8048622) password = claripy.BVS('password', 16 * 8) buffer_addr = 0x804A050 state.memory.store(buffer_addr, password) simgr = proj.factory.simgr(state) simgr.explore(find=0x8048669) found = simgr.found[0] found.add_constraints(found.memory.load(buffer_addr, 16) == b'AUPDNNPROEZRJWKB') print(found.solver.eval(password, cast_to=bytes)) \u8f93\u51fa\uff1a b'LGCRCDGJHYUNGUJB' \u8def\u5f84\u7206\u70b8 \u8def\u5f84\u7206\u70b8\u7684\u6982\u5ff5\u4e0e\u6570\u5b66\u4e2d\u7684 \u6307\u6570\u7206\u70b8 \u6982\u5ff5\u7c7b\u4f3c\uff0c\u5373\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7b26\u53f7\u6267\u884c\u7684\u8def\u5f84/\u72b6\u6001\u4ee5\u6307\u6570\u7ea7\u589e\u957f\u3002 \u4ece 08_angr_constraints \u4e2d\u6211\u4eec\u53d1\u73b0\uff0c\u5373\u4f7f\u662f\u975e\u5e38\u7b80\u5355\u7684\u6bd4\u8f83\u51fd\u6570\uff0c\u4e5f\u53ef\u80fd\u8ba9angr\u4ea7\u751f\u6307\u6570\u7ea7\u7684\u8def\u5f84\uff082 16 \u6761\u8def\u5f84\uff09\uff0c\u8017\u8d39\u5927\u91cf\u65f6\u95f4\u751a\u81f3\u6839\u672c\u8dd1\u4e0d\u51fa\u6765\uff0c\u8fd9\u5c31\u662f\u7b26\u53f7\u6267\u884c\u7684\u91cd\u5927\u7f3a\u9677\u4e4b\u4e00\u2014\u2014\u8def\u5f84\u7206\u70b8\u3002\u8fd9\u65e2\u662f\u6211\u4eec\u5728\u7528\u7b26\u53f7\u6267\u884c\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u65f6\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff0c\u4e5f\u662f\u4e00\u79cd\u53ef\u4ee5\u7528\u6765\u6297\u7b26\u53f7\u6267\u884c\u7684\u601d\u8def\u3002 \u5e94\u5bf9\u8def\u5f84\u7206\u70b8\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u751a\u81f3\u8fd8\u6709\u4e13\u95e8\u7684\u8bba\u6587\u6765\u8bb2\u8ff0\u7f13\u89e3\u8def\u5f84\u7206\u70b8\u7684\u65b9\u6cd5\uff0c\u5728\u4e0a\u4e00\u9898\u4e2d\u6211\u4eec\u5b66\u5230\u4e86\u6700\u7b80\u5355\u7684\u4e00\u79cd\uff1a\u907f\u5f00\u4f1a\u4ea7\u751f\u8def\u5f84\u7206\u70b8\u7684\u51fd\u6570\uff0c\u7528\u624b\u52a8\u6dfb\u52a0\u7ea6\u675f\u66ff\u4ee3\uff0c\u8fd9\u662f\u6700\u7b80\u5355\uff0c\u4e5f\u662f\u975e\u5e38\u597d\u7528\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u603b\u7684\u6765\u8bf4\uff0c\u8bfb\u8005\u4eec\u5728\u4f7f\u7528\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u65f6\uff0c\u8981\u8bc6\u522b\u90a3\u4e9b\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u4ee3\u7801\uff0c\u5e76\u5de7\u5999\u7ed5\u8fc7\u3002","title":"04 angr constraints"},{"location":"angr/04_angr_constraints/#08_angr_constraints","text":"\u8fd9\u9898\u7684\u6d41\u7a0b\u662f\u5148\u5bf9\u8f93\u5165\u52a0\u5bc6\uff0c\u7136\u540e\u8c03\u7528check_equals_xxx\u51fd\u6570\u5bf9\u52a0\u5bc6\u540e\u7684\u8f93\u5165\u8fdb\u884c\u6bd4\u8f83\uff0c\u82e5\u6bd4\u5bf9\u6210\u529f\u5219\u8f93\u51fa\"Good Job.\"\uff1a check_equals_AUPDNNPROEZRJWKB\u51fd\u6570\u4f1a\u5c06\u8f93\u5165\u4e0e\"AUPDNNPROEZRJWKB\"\u8fdb\u884c\u6bd4\u8f83\uff1a \u8fd9\u9898\u76f4\u63a5\u8c03\u7528explore\u662f\u8dd1\u4e0d\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u5728check_equals\u51fd\u6570\u4e2d\u4e0d\u662f\u6bd4\u5bf9\u5931\u8d25\u5c31\u7acb\u523b\u9000\u51fa\u5faa\u73af\uff0c\u800c\u662f\u4e00\u76f4\u5faa\u73af\u5230\u6700\u540e\u3002\u603b\u5171\u670916\u8f6e\u5faa\u73af\uff0c\u6bcf\u6b21\u5faa\u73af\u4f1a\u4ea7\u751f\u6bd4\u5bf9\u6210\u529f\u548c\u6bd4\u5bf9\u5931\u8d25\u4e24\u4e2a\u72b6\u6001\uff0c\u6240\u4ee5\u7b26\u53f7\u6267\u884c\u603b\u5171\u4f1a\u4ea7\u751f2 16 \u4e2a\u72b6\u6001\uff0c\u5bfc\u81f4 \u8def\u5f84\u7206\u70b8 \uff1a simgr.explore(find=lambda state : b'Good Job.' in state.posix.dumps(1)) # \u4e0d\u884c \u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u6bd4\u8f83\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u6839\u672c\u6ca1\u6709\u5fc5\u8981\u53bb\u8ba9angr\u8dd1\uff0c\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u8fd9\u4e2a\u7ea6\u675f\uff0c\u7136\u540e\u8fdb\u884c\u6c42\u89e3\uff1a simgr.explore(find=0x8048669) # \u6267\u884ccheck_equals_AUPDNNPROEZRJWKB\u51fd\u6570\u4e4b\u524d found = simgr.found[0] found.add_constraints(found.memory.load(buffer_addr, 16) == b'AUPDNNPROEZRJWKB') print(found.solver.eval(password, cast_to=bytes)) \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy proj = angr.Project('../dist/08_angr_constraints') state = proj.factory.blank_state(addr=0x8048622) password = claripy.BVS('password', 16 * 8) buffer_addr = 0x804A050 state.memory.store(buffer_addr, password) simgr = proj.factory.simgr(state) simgr.explore(find=0x8048669) found = simgr.found[0] found.add_constraints(found.memory.load(buffer_addr, 16) == b'AUPDNNPROEZRJWKB') print(found.solver.eval(password, cast_to=bytes)) \u8f93\u51fa\uff1a b'LGCRCDGJHYUNGUJB'","title":"08_angr_constraints"},{"location":"angr/04_angr_constraints/#_1","text":"\u8def\u5f84\u7206\u70b8\u7684\u6982\u5ff5\u4e0e\u6570\u5b66\u4e2d\u7684 \u6307\u6570\u7206\u70b8 \u6982\u5ff5\u7c7b\u4f3c\uff0c\u5373\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7b26\u53f7\u6267\u884c\u7684\u8def\u5f84/\u72b6\u6001\u4ee5\u6307\u6570\u7ea7\u589e\u957f\u3002 \u4ece 08_angr_constraints \u4e2d\u6211\u4eec\u53d1\u73b0\uff0c\u5373\u4f7f\u662f\u975e\u5e38\u7b80\u5355\u7684\u6bd4\u8f83\u51fd\u6570\uff0c\u4e5f\u53ef\u80fd\u8ba9angr\u4ea7\u751f\u6307\u6570\u7ea7\u7684\u8def\u5f84\uff082 16 \u6761\u8def\u5f84\uff09\uff0c\u8017\u8d39\u5927\u91cf\u65f6\u95f4\u751a\u81f3\u6839\u672c\u8dd1\u4e0d\u51fa\u6765\uff0c\u8fd9\u5c31\u662f\u7b26\u53f7\u6267\u884c\u7684\u91cd\u5927\u7f3a\u9677\u4e4b\u4e00\u2014\u2014\u8def\u5f84\u7206\u70b8\u3002\u8fd9\u65e2\u662f\u6211\u4eec\u5728\u7528\u7b26\u53f7\u6267\u884c\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u65f6\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff0c\u4e5f\u662f\u4e00\u79cd\u53ef\u4ee5\u7528\u6765\u6297\u7b26\u53f7\u6267\u884c\u7684\u601d\u8def\u3002 \u5e94\u5bf9\u8def\u5f84\u7206\u70b8\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u751a\u81f3\u8fd8\u6709\u4e13\u95e8\u7684\u8bba\u6587\u6765\u8bb2\u8ff0\u7f13\u89e3\u8def\u5f84\u7206\u70b8\u7684\u65b9\u6cd5\uff0c\u5728\u4e0a\u4e00\u9898\u4e2d\u6211\u4eec\u5b66\u5230\u4e86\u6700\u7b80\u5355\u7684\u4e00\u79cd\uff1a\u907f\u5f00\u4f1a\u4ea7\u751f\u8def\u5f84\u7206\u70b8\u7684\u51fd\u6570\uff0c\u7528\u624b\u52a8\u6dfb\u52a0\u7ea6\u675f\u66ff\u4ee3\uff0c\u8fd9\u662f\u6700\u7b80\u5355\uff0c\u4e5f\u662f\u975e\u5e38\u597d\u7528\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u603b\u7684\u6765\u8bf4\uff0c\u8bfb\u8005\u4eec\u5728\u4f7f\u7528\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u65f6\uff0c\u8981\u8bc6\u522b\u90a3\u4e9b\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u4ee3\u7801\uff0c\u5e76\u5de7\u5999\u7ed5\u8fc7\u3002","title":"\u8def\u5f84\u7206\u70b8"},{"location":"angr/05_angr_hooks/","text":"\u8fd9\u4e00\u8282\u6211\u4eec\u6765\u5b66\u4e60\u907f\u514d\u8def\u5f84\u7206\u70b8\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u2014\u2014hook\u3002\u5bf9\u9006\u5411\u5df2\u7ecf\u6bd4\u8f83\u719f\u6089\u7684\u8bfb\u8005\u5e94\u8be5\u80fd\u5f88\u5feb\u7406\u89e3hook\u7684\u610f\u601d\u3002hook\u4e5f\u5c31\u662f\u94a9\u5b50\u7684\u610f\u601d\uff0c\u7b80\u5355\u6765\u8bf4\uff0chook\u5c31\u662f\u5c06\u4e00\u6bb5\u4ee3\u7801\u6216\u4e00\u4e2a\u51fd\u6570\u201c\u94a9\u4f4f\u201d\uff0c\u66ff\u6362\u4e3a\u6211\u4eec\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u7c7b\u4f3c\u201c\u5077\u6881\u6362\u67f1\u201d\u3002\u5982\u679c\u73b0\u5728\u8fd8\u4e0d\u7406\u89e3hook\u7684\u542b\u4e49\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u9a6c\u4e0a\u901a\u8fc7\u4e00\u4e9b\u5b9e\u4f8b\u5b66\u4e60\u3002 09_angr_hooks \u8fd9\u4e00\u9898\u7684\u7a0b\u5e8f\u6d41\u7a0b\u4e0e\u4e0a\u9898\u7c7b\u4f3c\uff0c\u4e5f\u662f\u6709\u4e00\u4e2a\u4f1a\u5f15\u8d77\u8def\u5f84\u7206\u70b8\u7684\u6bd4\u8f83\u51fd\u6570\u3002\u4e0e\u4e0a\u9898\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u9898\u7684\u6bd4\u8f83\u51fd\u6570\u4e0d\u5728\u6574\u4e2a\u52a0\u5bc6\u6d41\u7a0b\u7684\u6700\u540e\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u518d\u91c7\u7528\u4e0a\u9898\u624b\u52a8\u6dfb\u52a0\u7ea6\u675f\u5e76\u6c42\u89e3\u7684\u65b9\u6cd5\uff1a \u600e\u4e48\u529e\u5462\uff1f\u65e2\u7136check_equals\u51fd\u6570\u672c\u8eab\u7684\u6d41\u7a0b\u975e\u5e38\u7b80\u5355\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528hook\u6280\u672f\u5c06check_equals\u51fd\u6570\u66ff\u6362\u4e3a\u4e00\u4e2a \u7b49\u6548\u7684\u5e76\u4e14\u4e0d\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u51fd\u6570 \uff0c\u7136\u540e\u518d\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff1a @proj.hook(addr=0x80486B3, length=5) # check_equals_XYMKBKUHNIQYNQXE def my_check_equals(state): buffer_addr = 0x804A054 buffer = state.memory.load(buffer_addr, 16) state.regs.eax = claripy.If(buffer == b'XYMKBKUHNIQYNQXE', claripy.BVV(1, 32), claripy.BVV(0, 32)) \u6ce8\u610f\u8fd9\u91cc\u7684hook\u662f\u5bf9call\u6307\u4ee4\u8fdb\u884c\u4e86hook\uff0c\u800c\u4e0d\u662f\u51fd\u6570\u672c\u8eab\uff0clength\u6307\u7684\u662f\u8df3\u8fc7\u7684\u5b57\u8282\u6570\uff0ccall\u6307\u4ee4\u53605\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5length=5\uff1a \u81f3\u4e8e\u8fd9\u4e2a\u8bed\u6cd5\uff1a @proj.hook(addr=0x80486B3, length=5) # check_equals_XYMKBKUHNIQYNQXE \u53eb\u505a \u6ce8\u89e3 \uff0c\u5177\u4f53\u7684\u7528\u6cd5\u8bf7\u8bfb\u8005\u53bb\u7f51\u4e0a\u641c\u7d22\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u8fd9\u4e2a\u5199\u6cd5\u4e0e\u4e0a\u8ff0\u7684\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff1a def my_check_equals(state): buffer_addr = 0x804A054 buffer = state.memory.load(buffer_addr, 16) state.regs.eax = claripy.If(buffer == b'XYMKBKUHNIQYNQXE', claripy.BVV(1, 32), claripy.BVV(0, 32)) proj.hook(addr=0x80486B3, hook=my_check_equals, length=5) \u89e3\u51b3\u6389\u8fd9\u4e2a\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u51fd\u6570\u4e4b\u540e\u5c31\u597d\u529e\u4e86\uff0c\u76f4\u63a5explore\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import angr import claripy proj = angr.Project('../dist/09_angr_hooks') @proj.hook(addr=0x80486B3, length=5) # check_equals_XYMKBKUHNIQYNQXE def my_check_equals(state): buffer_addr = 0x804A054 buffer = state.memory.load(buffer_addr, 16) state.regs.eax = claripy.If(buffer == b'XYMKBKUHNIQYNQXE', claripy.BVV(1, 32), claripy.BVV(0, 32)) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'ZXIDRXEORJOTFFJNWUFAOUBLOGLQCCGK' 10_angr_simprocedures \u8fd8\u662f\u8001\u5957\u8def\u2014\u2014\u91cd\u590d\u4ee3\u7801\u3002\u73b0\u5728\u6211\u4eec\u6ca1\u6cd5hook\u6240\u6709\u6389call\u6307\u4ee4\u4e86\uff0c\u56e0\u4e3acall\u6307\u4ee4\u5b9e\u5728\u662f\u592a\u591a\u4e86\uff01\uff01\uff01\uff1a \u600e\u4e48\u529e\u5462\uff1f\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5f15\u5165\u4e00\u79cd\u5bf9\u51fd\u6570\u672c\u8eab\u8fdb\u884chook\u7684\u65b9\u6cd5\u2014\u2014SimProcedures\uff0c\u5b9a\u4e49\u4e00\u4e2aSimProcedures\u7684\u4ee3\u7801\u5982\u4e0b\uff1a class MyCheckEquals(angr.SimProcedure): def run(self, buffer_addr, length): buffer = self.state.memory.load(buffer_addr, length) return claripy.If(buffer == b'ORSDDWXHZURJRBDH', claripy.BVV(1, 32), claripy.BVV(0, 32)) SimProcedure\u6309\u5b57\u9762\u610f\u601d\u6765\u7406\u89e3\u5c31\u662f\u201c\u6a21\u62df\u7a0b\u5e8f\u201d\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u4e2aSimProcedure\u7684\u5b50\u7c7bMyCheckEquals\u6a21\u62df\u4e86check_equals_ORSDDWXHZURJRBDH\u51fd\u6570\u7684\u529f\u80fd\uff0cSimProcedure\u4e2d\u7684run\u51fd\u6570\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u5176\u63a5\u6536\u7684\u53c2\u6570\u4e0eC\u8bed\u8a00\u4e2d\u7684\u53c2\u6570\u4fdd\u6301\u4e00\u81f4\uff0c\u8fd4\u56de\u4e3a\u5bf9\u5e94\u539f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 \u5b9a\u4e49\u597d\u4e86SimProcedure\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u8c03\u7528hook_symbol\u51fd\u6570\u5bf9\u7a0b\u5e8f\u4e2d\u540d\u4e3acheck_equals_ORSDDWXHZURJRBDH\u7684\u51fd\u6570\u8fdb\u884chook\uff1a proj.hook_symbol(symbol_name='check_equals_ORSDDWXHZURJRBDH', simproc=MyCheckEquals()) hook\u4e4b\u540eangr\u5728\u7b26\u53f7\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u5c06\u4e0d\u4f1a\u8c03\u7528\u539f\u5148\u7684check_equals_ORSDDWXHZURJRBDH\u51fd\u6570\uff0c\u800c\u4e14MyCheckEquals\u7c7b\u4e2d\u7684run\u51fd\u6570\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8001\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\u4e86\uff0c\u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy class MyCheckEquals(angr.SimProcedure): def run(self, buffer_addr, length): buffer = self.state.memory.load(buffer_addr, length) return claripy.If(buffer == b'ORSDDWXHZURJRBDH', claripy.BVV(1, 32), claripy.BVV(0, 32)) proj = angr.Project('../dist/10_angr_simprocedures') proj.hook_symbol(symbol_name='check_equals_ORSDDWXHZURJRBDH', simproc=MyCheckEquals()) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'MSWKNJNAVTTOZMRY' 11_angr_sim_scanf \u5173\u4e8e\u8fd9\u4e00\u9898\uff0cangr_ctf\u7ed9\u7684\u8bf4\u6cd5\u662f angr\u4e0d\u652f\u6301\u591a\u4e2a\u53c2\u6570\u7684scanf \uff1a # This time, the solution involves simply replacing scanf with our own version, # since Angr does not support requesting multiple parameters with scanf. \u7136\u800c\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u53ef\u80fd\u4ee5\u524d\u7684\u7248\u672c\u4e0d\u884c\uff0c\u6bd5\u7adfangr\u7248\u672c\u8fed\u4ee3\u8fd8\u662f\u5f88\u5feb\u7684\uff1a import angr proj = angr.Project('../dist/11_angr_sim_scanf') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'1448564819 1398294103' \u867d\u7136\u6709\u70b9\u5c0f\u4e4c\u9f99\uff0c\u4f46\u4e0d\u59a8\u788d\u6211\u4eec\u501f\u6b64\u673a\u4f1a\u4e86\u89e3\u4e00\u4e0bangr\u4e2d\u81ea\u5e26\u7684SimProcedures\u3002angr\u5728angr/procedures\u4e2d\u5b9a\u4e49\u4e86\u5f88\u591a\u6a21\u62df\u7cfb\u7edf\u51fd\u6570\u7684SimProcedures\uff1a \u8fd9\u4e9bSimProcedures\u6211\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7angr.SIM_PROCEDURES\u6765\u83b7\u5f97\uff0c\u7528\u6cd5\u5982\u4e0b\uff1a proj.hook_symbol(\"__isoc99_scanf\", angr.SIM_PROCEDURES['libc']['scanf']()) \u6839\u636e\u6211\u7684\u731c\u6d4b\uff0cangr\u4f1a\u6839\u636e\u5bfc\u5165\u8868\u81ea\u52a8\u8bc6\u522b \u52a8\u6001\u94fe\u63a5 \u7684\u5e93\u51fd\u6570\u5e76\u7528\u81ea\u5df1\u5b9e\u73b0\u7684SimProcedures\u8fdb\u884c\u66ff\u6362\u7684\uff08\u4e4b\u6240\u4ee5\u8bf4\u662f\u731c\u6d4b\uff0c\u662f\u56e0\u4e3a\u6211\u8fd8\u6ca1\u770b\u8fc7\u8fd9\u90e8\u5206\u7684\u6e90\u7801\uff0c\u4e0d\u8fc7\u80af\u5b9a\u516b\u4e5d\u4e0d\u79bb\u5341\uff09\uff0c\u6240\u4ee5\u8fd9\u4e00\u6b65hook\u5b8c\u5168\u662f\u591a\u6b64\u4e00\u4e3e\u3002 \u5b8c\u6574\u4ee3\u7801\uff1a import angr proj = angr.Project('../dist/11_angr_sim_scanf') proj.hook_symbol(\"__isoc99_scanf\", angr.SIM_PROCEDURES['libc']['scanf']()) # \u591a\u6b64\u4e00\u4e3e state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'1448564819 1398294103'","title":"05 angr hooks"},{"location":"angr/05_angr_hooks/#09_angr_hooks","text":"\u8fd9\u4e00\u9898\u7684\u7a0b\u5e8f\u6d41\u7a0b\u4e0e\u4e0a\u9898\u7c7b\u4f3c\uff0c\u4e5f\u662f\u6709\u4e00\u4e2a\u4f1a\u5f15\u8d77\u8def\u5f84\u7206\u70b8\u7684\u6bd4\u8f83\u51fd\u6570\u3002\u4e0e\u4e0a\u9898\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u9898\u7684\u6bd4\u8f83\u51fd\u6570\u4e0d\u5728\u6574\u4e2a\u52a0\u5bc6\u6d41\u7a0b\u7684\u6700\u540e\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u518d\u91c7\u7528\u4e0a\u9898\u624b\u52a8\u6dfb\u52a0\u7ea6\u675f\u5e76\u6c42\u89e3\u7684\u65b9\u6cd5\uff1a \u600e\u4e48\u529e\u5462\uff1f\u65e2\u7136check_equals\u51fd\u6570\u672c\u8eab\u7684\u6d41\u7a0b\u975e\u5e38\u7b80\u5355\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528hook\u6280\u672f\u5c06check_equals\u51fd\u6570\u66ff\u6362\u4e3a\u4e00\u4e2a \u7b49\u6548\u7684\u5e76\u4e14\u4e0d\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u51fd\u6570 \uff0c\u7136\u540e\u518d\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff1a @proj.hook(addr=0x80486B3, length=5) # check_equals_XYMKBKUHNIQYNQXE def my_check_equals(state): buffer_addr = 0x804A054 buffer = state.memory.load(buffer_addr, 16) state.regs.eax = claripy.If(buffer == b'XYMKBKUHNIQYNQXE', claripy.BVV(1, 32), claripy.BVV(0, 32)) \u6ce8\u610f\u8fd9\u91cc\u7684hook\u662f\u5bf9call\u6307\u4ee4\u8fdb\u884c\u4e86hook\uff0c\u800c\u4e0d\u662f\u51fd\u6570\u672c\u8eab\uff0clength\u6307\u7684\u662f\u8df3\u8fc7\u7684\u5b57\u8282\u6570\uff0ccall\u6307\u4ee4\u53605\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5length=5\uff1a \u81f3\u4e8e\u8fd9\u4e2a\u8bed\u6cd5\uff1a @proj.hook(addr=0x80486B3, length=5) # check_equals_XYMKBKUHNIQYNQXE \u53eb\u505a \u6ce8\u89e3 \uff0c\u5177\u4f53\u7684\u7528\u6cd5\u8bf7\u8bfb\u8005\u53bb\u7f51\u4e0a\u641c\u7d22\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u8fd9\u4e2a\u5199\u6cd5\u4e0e\u4e0a\u8ff0\u7684\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff1a def my_check_equals(state): buffer_addr = 0x804A054 buffer = state.memory.load(buffer_addr, 16) state.regs.eax = claripy.If(buffer == b'XYMKBKUHNIQYNQXE', claripy.BVV(1, 32), claripy.BVV(0, 32)) proj.hook(addr=0x80486B3, hook=my_check_equals, length=5) \u89e3\u51b3\u6389\u8fd9\u4e2a\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u51fd\u6570\u4e4b\u540e\u5c31\u597d\u529e\u4e86\uff0c\u76f4\u63a5explore\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import angr import claripy proj = angr.Project('../dist/09_angr_hooks') @proj.hook(addr=0x80486B3, length=5) # check_equals_XYMKBKUHNIQYNQXE def my_check_equals(state): buffer_addr = 0x804A054 buffer = state.memory.load(buffer_addr, 16) state.regs.eax = claripy.If(buffer == b'XYMKBKUHNIQYNQXE', claripy.BVV(1, 32), claripy.BVV(0, 32)) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'ZXIDRXEORJOTFFJNWUFAOUBLOGLQCCGK'","title":"09_angr_hooks"},{"location":"angr/05_angr_hooks/#10_angr_simprocedures","text":"\u8fd8\u662f\u8001\u5957\u8def\u2014\u2014\u91cd\u590d\u4ee3\u7801\u3002\u73b0\u5728\u6211\u4eec\u6ca1\u6cd5hook\u6240\u6709\u6389call\u6307\u4ee4\u4e86\uff0c\u56e0\u4e3acall\u6307\u4ee4\u5b9e\u5728\u662f\u592a\u591a\u4e86\uff01\uff01\uff01\uff1a \u600e\u4e48\u529e\u5462\uff1f\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5f15\u5165\u4e00\u79cd\u5bf9\u51fd\u6570\u672c\u8eab\u8fdb\u884chook\u7684\u65b9\u6cd5\u2014\u2014SimProcedures\uff0c\u5b9a\u4e49\u4e00\u4e2aSimProcedures\u7684\u4ee3\u7801\u5982\u4e0b\uff1a class MyCheckEquals(angr.SimProcedure): def run(self, buffer_addr, length): buffer = self.state.memory.load(buffer_addr, length) return claripy.If(buffer == b'ORSDDWXHZURJRBDH', claripy.BVV(1, 32), claripy.BVV(0, 32)) SimProcedure\u6309\u5b57\u9762\u610f\u601d\u6765\u7406\u89e3\u5c31\u662f\u201c\u6a21\u62df\u7a0b\u5e8f\u201d\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u4e2aSimProcedure\u7684\u5b50\u7c7bMyCheckEquals\u6a21\u62df\u4e86check_equals_ORSDDWXHZURJRBDH\u51fd\u6570\u7684\u529f\u80fd\uff0cSimProcedure\u4e2d\u7684run\u51fd\u6570\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u5176\u63a5\u6536\u7684\u53c2\u6570\u4e0eC\u8bed\u8a00\u4e2d\u7684\u53c2\u6570\u4fdd\u6301\u4e00\u81f4\uff0c\u8fd4\u56de\u4e3a\u5bf9\u5e94\u539f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 \u5b9a\u4e49\u597d\u4e86SimProcedure\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u8c03\u7528hook_symbol\u51fd\u6570\u5bf9\u7a0b\u5e8f\u4e2d\u540d\u4e3acheck_equals_ORSDDWXHZURJRBDH\u7684\u51fd\u6570\u8fdb\u884chook\uff1a proj.hook_symbol(symbol_name='check_equals_ORSDDWXHZURJRBDH', simproc=MyCheckEquals()) hook\u4e4b\u540eangr\u5728\u7b26\u53f7\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u5c06\u4e0d\u4f1a\u8c03\u7528\u539f\u5148\u7684check_equals_ORSDDWXHZURJRBDH\u51fd\u6570\uff0c\u800c\u4e14MyCheckEquals\u7c7b\u4e2d\u7684run\u51fd\u6570\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8001\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\u4e86\uff0c\u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy class MyCheckEquals(angr.SimProcedure): def run(self, buffer_addr, length): buffer = self.state.memory.load(buffer_addr, length) return claripy.If(buffer == b'ORSDDWXHZURJRBDH', claripy.BVV(1, 32), claripy.BVV(0, 32)) proj = angr.Project('../dist/10_angr_simprocedures') proj.hook_symbol(symbol_name='check_equals_ORSDDWXHZURJRBDH', simproc=MyCheckEquals()) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'MSWKNJNAVTTOZMRY'","title":"10_angr_simprocedures"},{"location":"angr/05_angr_hooks/#11_angr_sim_scanf","text":"\u5173\u4e8e\u8fd9\u4e00\u9898\uff0cangr_ctf\u7ed9\u7684\u8bf4\u6cd5\u662f angr\u4e0d\u652f\u6301\u591a\u4e2a\u53c2\u6570\u7684scanf \uff1a # This time, the solution involves simply replacing scanf with our own version, # since Angr does not support requesting multiple parameters with scanf. \u7136\u800c\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u53ef\u80fd\u4ee5\u524d\u7684\u7248\u672c\u4e0d\u884c\uff0c\u6bd5\u7adfangr\u7248\u672c\u8fed\u4ee3\u8fd8\u662f\u5f88\u5feb\u7684\uff1a import angr proj = angr.Project('../dist/11_angr_sim_scanf') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'1448564819 1398294103' \u867d\u7136\u6709\u70b9\u5c0f\u4e4c\u9f99\uff0c\u4f46\u4e0d\u59a8\u788d\u6211\u4eec\u501f\u6b64\u673a\u4f1a\u4e86\u89e3\u4e00\u4e0bangr\u4e2d\u81ea\u5e26\u7684SimProcedures\u3002angr\u5728angr/procedures\u4e2d\u5b9a\u4e49\u4e86\u5f88\u591a\u6a21\u62df\u7cfb\u7edf\u51fd\u6570\u7684SimProcedures\uff1a \u8fd9\u4e9bSimProcedures\u6211\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7angr.SIM_PROCEDURES\u6765\u83b7\u5f97\uff0c\u7528\u6cd5\u5982\u4e0b\uff1a proj.hook_symbol(\"__isoc99_scanf\", angr.SIM_PROCEDURES['libc']['scanf']()) \u6839\u636e\u6211\u7684\u731c\u6d4b\uff0cangr\u4f1a\u6839\u636e\u5bfc\u5165\u8868\u81ea\u52a8\u8bc6\u522b \u52a8\u6001\u94fe\u63a5 \u7684\u5e93\u51fd\u6570\u5e76\u7528\u81ea\u5df1\u5b9e\u73b0\u7684SimProcedures\u8fdb\u884c\u66ff\u6362\u7684\uff08\u4e4b\u6240\u4ee5\u8bf4\u662f\u731c\u6d4b\uff0c\u662f\u56e0\u4e3a\u6211\u8fd8\u6ca1\u770b\u8fc7\u8fd9\u90e8\u5206\u7684\u6e90\u7801\uff0c\u4e0d\u8fc7\u80af\u5b9a\u516b\u4e5d\u4e0d\u79bb\u5341\uff09\uff0c\u6240\u4ee5\u8fd9\u4e00\u6b65hook\u5b8c\u5168\u662f\u591a\u6b64\u4e00\u4e3e\u3002 \u5b8c\u6574\u4ee3\u7801\uff1a import angr proj = angr.Project('../dist/11_angr_sim_scanf') proj.hook_symbol(\"__isoc99_scanf\", angr.SIM_PROCEDURES['libc']['scanf']()) # \u591a\u6b64\u4e00\u4e3e state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'1448564819 1398294103'","title":"11_angr_sim_scanf"},{"location":"angr/06_angr_veritesting/","text":"\u524d\u9762\u4e24\u8282\u6211\u4eec\u5206\u522b\u5b66\u4e60\u4e86\u5e94\u5bf9\u8def\u5f84\u7206\u70b8\u7684\u4e24\u79cd\u65b9\u6cd5\u2014\u2014\u624b\u52a8\u7ea6\u675f\u548chook\uff0c\u8fd9\u4e00\u8282\u6211\u4eec\u6765\u5b66\u4e60\u6709\u6548\u7f13\u89e3\u8def\u5f84\u7206\u70b8\u7684\u7b2c\u4e09\u79cd\u65b9\u6cd5\u2014\u2014Veritesting\u3002 Veritesting\u610f\u4e3a\u8def\u5f84\u5f52\u5e76\uff0c\u51fa\u81ea2014\u5e74\u7684\u4e00\u7bc7\u8bba\u6587 Enhancing Symbolic Execution with Veritesting \uff0c\u8bfb\u8005\u5bf9\u5f52\u5e76\u7684\u539f\u7406\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u9605\u8bfb\u4e00\u4e0b\u3002 12_angr_veritesting angr\u4e2d\u5b9e\u73b0\u4e86\u4e0a\u8ff0\u8bba\u6587\u4e2d\u63d0\u5230\u7684Veritesting\u6280\u672f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u6784\u5efasimgr\u7684\u65f6\u5019\u6dfb\u52a0\u4e00\u4e2a veritesting=True \u53c2\u6570\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a simgr = proj.factory.simgr(state, veritesting=True) \u7136\u540e\u6211\u4eec\u518d\u6765\u6d4b\u8bd5\u4e00\u4e0b\u8fd9\u4e00\u6bb5\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u4ee3\u7801\uff1a import angr proj = angr.Project('../dist/12_angr_veritesting') state = proj.factory.entry_state() simgr = proj.factory.simgr(state, veritesting=True) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8dd1\u51fa\u6765\u8fd8\u662f\u8981\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u8d77\u7801\u4e0d\u4f1a\u5361\u6b7b\u4e86\u3002\u8f93\u51fa\uff1a b'OQSUWYACEGIKMOQSUWYACEGIKMOQSUWY' \u8fd9\u79cd\u5199\u6cd5\u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff1a simgr = proj.factory.simgr(state) simgr.use_technique(angr.exploration_techniques.Veritesting()) \u53e6\u5916\u6839\u636e\u5b98\u65b9\u7684\u8bf4\u6cd5\uff1a Note that it frequenly doesn't play nice with other techniques due to the invasive way it implements static symbolic execution. Versitesting\u901a\u5e38\u4e0e\u5176\u4ed6exploration techniques\u4e0d\u517c\u5bb9\u3002","title":"06 angr veritesting"},{"location":"angr/06_angr_veritesting/#12_angr_veritesting","text":"angr\u4e2d\u5b9e\u73b0\u4e86\u4e0a\u8ff0\u8bba\u6587\u4e2d\u63d0\u5230\u7684Veritesting\u6280\u672f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u6784\u5efasimgr\u7684\u65f6\u5019\u6dfb\u52a0\u4e00\u4e2a veritesting=True \u53c2\u6570\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a simgr = proj.factory.simgr(state, veritesting=True) \u7136\u540e\u6211\u4eec\u518d\u6765\u6d4b\u8bd5\u4e00\u4e0b\u8fd9\u4e00\u6bb5\u4f1a\u5bfc\u81f4\u8def\u5f84\u7206\u70b8\u7684\u4ee3\u7801\uff1a import angr proj = angr.Project('../dist/12_angr_veritesting') state = proj.factory.entry_state() simgr = proj.factory.simgr(state, veritesting=True) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8dd1\u51fa\u6765\u8fd8\u662f\u8981\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u8d77\u7801\u4e0d\u4f1a\u5361\u6b7b\u4e86\u3002\u8f93\u51fa\uff1a b'OQSUWYACEGIKMOQSUWYACEGIKMOQSUWY' \u8fd9\u79cd\u5199\u6cd5\u4e0e\u4e0a\u9762\u7684\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff1a simgr = proj.factory.simgr(state) simgr.use_technique(angr.exploration_techniques.Veritesting()) \u53e6\u5916\u6839\u636e\u5b98\u65b9\u7684\u8bf4\u6cd5\uff1a Note that it frequenly doesn't play nice with other techniques due to the invasive way it implements static symbolic execution. Versitesting\u901a\u5e38\u4e0e\u5176\u4ed6exploration techniques\u4e0d\u517c\u5bb9\u3002","title":"12_angr_veritesting"},{"location":"angr/07_angr_library/","text":"\u572805_angr_hooks\u4e2d\u6211\u63d0\u51fa\u4e86\u4e00\u4e2a\u731c\u6d4b\uff1aangr\u4f1a\u6839\u636e\u5bfc\u5165\u8868\u81ea\u52a8\u8bc6\u522b \u52a8\u6001\u94fe\u63a5 \u7684\u5e93\u51fd\u6570\u5e76\u8fdb\u884c\u66ff\u6362\u3002\u5982\u679c\u662f\u9759\u6001\u94fe\u63a5\u7684\u5e93\u51fd\u6570angr\u80fd\u4e0d\u80fd\u8bc6\u522b\u5462\uff1f\u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u4e24\u4e2a\u4f8b\u5b50\u6765\u9a8c\u8bc1\u3002 13_angr_static_binary \u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662f\u4e00\u4e2a\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\uff0c\u903b\u8f91\u8ddf00_angr_find\u57fa\u672c\u4e00\u81f4\uff1a \u518d\u752800_angr_find\u7684\u811a\u672c\u8dd1\u4e00\u4e0b\u8bd5\u8bd5\uff1a import angr proj = angr.Project('../dist/13_angr_static_binary') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u53d1\u73b0\u6839\u672c\u8dd1\u4e0d\u51fa\u6765\uff0c\u6240\u4ee5angr\u5728\u8fd9\u91cc\u662f\u6ca1\u6709\u6210\u529f\u8bc6\u522b\u5e93\u51fd\u6570\u5e76\u66ff\u6362\u7684\uff0c\u9700\u8981\u6211\u4eec\u624b\u52a8\u66ff\u6362\uff0c\u9632\u6b62angr\u7b26\u53f7\u6267\u884c\u9677\u8fdb\u590d\u6742\u7684\u5e93\u51fd\u6570\u91cc\u9762\uff1a proj.hook_symbol('printf', angr.SIM_PROCEDURES['libc']['printf']()) proj.hook_symbol('__isoc99_scanf',angr.SIM_PROCEDURES['libc']['scanf']()) proj.hook_symbol('strcmp', angr.SIM_PROCEDURES['libc']['strcmp']()) proj.hook_symbol('puts', angr.SIM_PROCEDURES['libc']['puts']()) proj.hook_symbol('__libc_start_main',angr.SIM_PROCEDURES['glibc']['__libc_start_main']()) \u5b8c\u6574\u4ee3\u7801\uff1a import angr proj = angr.Project('../dist/13_angr_static_binary') proj.hook_symbol('printf', angr.SIM_PROCEDURES['libc']['printf']()) proj.hook_symbol('__isoc99_scanf',angr.SIM_PROCEDURES['libc']['scanf']()) proj.hook_symbol('strcmp', angr.SIM_PROCEDURES['libc']['strcmp']()) proj.hook_symbol('puts', angr.SIM_PROCEDURES['libc']['puts']()) proj.hook_symbol('__libc_start_main',angr.SIM_PROCEDURES['glibc']['__libc_start_main']()) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'PNMXNMUD' __libc_start_main \u51fd\u6570\u4f1a\u5728\u5165\u53e3\u51fd\u6570 _start \u91cc\u88ab\u8c03\u7528\uff0c\u4e3b\u8981\u662f\u5b8c\u6210\u4e00\u4e9b\u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4ee5\u53camain\u51fd\u6570\u7684\u8c03\u7528\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e5f\u628a\u5b83hook\u6389\uff1a 14_angr_shared_library \u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u8fd9\u9898\u6765\u4e86\u89e3\u5982\u4f55\u5bf9\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u5355\u4e2a\u7684\u51fd\u6570\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0cmain\u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff1a \u5176\u4e2dvalidate\u51fd\u6570\u662f\u52a8\u6001\u94fe\u63a5\u5e93lib14_angr_shared_library.so\u7684\u51fd\u6570\uff1a \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7call_state\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u521d\u59cb\u72b6\u6001\uff1a state = proj.factory.call_state(validate_addr, password, length) \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a import angr import claripy proj = angr.Project('../dist/lib14_angr_shared_library.so') validate_addr = 0x4006D7 password = claripy.BVS('password', 8 * 8) length = claripy.BVV(8, 32) state = proj.factory.call_state(validate_addr, password, length) simgr = proj.factory.simgr(state) simgr.explore(find=0x400783) found = simgr.found[0] found.solver.add(found.regs.eax == 1) print(found.solver.eval(password, cast_to=bytes)) \u8f93\u51fa\uff1a b'PGXSNWTS' \u52a8\u6001\u94fe\u63a5\u5e93\u90fd\u662f\u5730\u5740\u65e0\u5173\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff08position-independent executable\uff0cPIE\uff09\uff0c\u82e5\u4e0d\u624b\u52a8\u6307\u5b9aPIE\u7684\u57fa\u8d28\uff0cangr\u4f1a\u5c06\u7b26\u53f7\u6267\u884c\u7684\u57fa\u5740\u6307\u5b9a\u4e3a\u9ed8\u8ba4\u76840x400000\uff0c\u5e76\u8f93\u51fa\uff1a WARNING | 2021-10-07 00:15:28,674 | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000. \u5f53\u7136\u4e5f\u53ef\u4ee5\u81ea\u884c\u6307\u5b9a\u57fa\u5740\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a proj = angr.Project('../dist/lib14_angr_shared_library.so', load_options={ 'main_opts' : { 'base_addr' : 0x400000 } })","title":"07 angr library"},{"location":"angr/07_angr_library/#13_angr_static_binary","text":"\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u662f\u4e00\u4e2a\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\uff0c\u903b\u8f91\u8ddf00_angr_find\u57fa\u672c\u4e00\u81f4\uff1a \u518d\u752800_angr_find\u7684\u811a\u672c\u8dd1\u4e00\u4e0b\u8bd5\u8bd5\uff1a import angr proj = angr.Project('../dist/13_angr_static_binary') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u53d1\u73b0\u6839\u672c\u8dd1\u4e0d\u51fa\u6765\uff0c\u6240\u4ee5angr\u5728\u8fd9\u91cc\u662f\u6ca1\u6709\u6210\u529f\u8bc6\u522b\u5e93\u51fd\u6570\u5e76\u66ff\u6362\u7684\uff0c\u9700\u8981\u6211\u4eec\u624b\u52a8\u66ff\u6362\uff0c\u9632\u6b62angr\u7b26\u53f7\u6267\u884c\u9677\u8fdb\u590d\u6742\u7684\u5e93\u51fd\u6570\u91cc\u9762\uff1a proj.hook_symbol('printf', angr.SIM_PROCEDURES['libc']['printf']()) proj.hook_symbol('__isoc99_scanf',angr.SIM_PROCEDURES['libc']['scanf']()) proj.hook_symbol('strcmp', angr.SIM_PROCEDURES['libc']['strcmp']()) proj.hook_symbol('puts', angr.SIM_PROCEDURES['libc']['puts']()) proj.hook_symbol('__libc_start_main',angr.SIM_PROCEDURES['glibc']['__libc_start_main']()) \u5b8c\u6574\u4ee3\u7801\uff1a import angr proj = angr.Project('../dist/13_angr_static_binary') proj.hook_symbol('printf', angr.SIM_PROCEDURES['libc']['printf']()) proj.hook_symbol('__isoc99_scanf',angr.SIM_PROCEDURES['libc']['scanf']()) proj.hook_symbol('strcmp', angr.SIM_PROCEDURES['libc']['strcmp']()) proj.hook_symbol('puts', angr.SIM_PROCEDURES['libc']['puts']()) proj.hook_symbol('__libc_start_main',angr.SIM_PROCEDURES['glibc']['__libc_start_main']()) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'PNMXNMUD' __libc_start_main \u51fd\u6570\u4f1a\u5728\u5165\u53e3\u51fd\u6570 _start \u91cc\u88ab\u8c03\u7528\uff0c\u4e3b\u8981\u662f\u5b8c\u6210\u4e00\u4e9b\u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4ee5\u53camain\u51fd\u6570\u7684\u8c03\u7528\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e5f\u628a\u5b83hook\u6389\uff1a","title":"13_angr_static_binary"},{"location":"angr/07_angr_library/#14_angr_shared_library","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u8fd9\u9898\u6765\u4e86\u89e3\u5982\u4f55\u5bf9\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u5355\u4e2a\u7684\u51fd\u6570\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0cmain\u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff1a \u5176\u4e2dvalidate\u51fd\u6570\u662f\u52a8\u6001\u94fe\u63a5\u5e93lib14_angr_shared_library.so\u7684\u51fd\u6570\uff1a \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7call_state\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u521d\u59cb\u72b6\u6001\uff1a state = proj.factory.call_state(validate_addr, password, length) \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a import angr import claripy proj = angr.Project('../dist/lib14_angr_shared_library.so') validate_addr = 0x4006D7 password = claripy.BVS('password', 8 * 8) length = claripy.BVV(8, 32) state = proj.factory.call_state(validate_addr, password, length) simgr = proj.factory.simgr(state) simgr.explore(find=0x400783) found = simgr.found[0] found.solver.add(found.regs.eax == 1) print(found.solver.eval(password, cast_to=bytes)) \u8f93\u51fa\uff1a b'PGXSNWTS' \u52a8\u6001\u94fe\u63a5\u5e93\u90fd\u662f\u5730\u5740\u65e0\u5173\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff08position-independent executable\uff0cPIE\uff09\uff0c\u82e5\u4e0d\u624b\u52a8\u6307\u5b9aPIE\u7684\u57fa\u8d28\uff0cangr\u4f1a\u5c06\u7b26\u53f7\u6267\u884c\u7684\u57fa\u5740\u6307\u5b9a\u4e3a\u9ed8\u8ba4\u76840x400000\uff0c\u5e76\u8f93\u51fa\uff1a WARNING | 2021-10-07 00:15:28,674 | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000. \u5f53\u7136\u4e5f\u53ef\u4ee5\u81ea\u884c\u6307\u5b9a\u57fa\u5740\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a proj = angr.Project('../dist/lib14_angr_shared_library.so', load_options={ 'main_opts' : { 'base_addr' : 0x400000 } })","title":"14_angr_shared_library"},{"location":"angr/08_angr_overflow/","text":"\u8fd9\u662fangr_ctf\u7cfb\u5217\u7684\u6700\u540e\u4e00\u8282\uff0c\u5728\u8fd9\u4e00\u8282\u6211\u4eec\u901a\u8fc7\u4e09\u4e2a\u6808\u6ea2\u51fa\u7684\u4f8b\u5b50\u6765\u5b66\u4e60angr\u5728\u6f0f\u6d1e\u6316\u6398\u65b9\u5411\u7684\u7b80\u5355\u5e94\u7528\u3002 15_angr_arbitrary_read \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5165\u95e8\u7ea7\u7684\u6808\u6ea2\u51fa\u9898\uff0c\u7a0b\u5e8f\u903b\u8f91\u5982\u4e0b\uff1a \u624b\u52a8\u5206\u6790\u7684\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0cscanf\u5904\u6709\u4e00\u4e2a\u4efb\u610f\u8bfb\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u901a\u8fc7scanf\u5c06s\u7684\u5730\u5740\u8986\u76d6\u4e3a0x484F6038\uff0c\u4f7f puts(s) \u80fd\u591f\u6253\u5370\"Good Jobs\"\uff1a \u76f4\u63a5\u68ad\u54c8\u7684\u8bdd\u4e0d\u592a\u884c\uff0cangr\u6ca1\u6709\u5206\u6790\u51fa\u8fd9\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u539f\u56e0\u53ef\u80fd\u662fangr\u65e0\u6cd5\u5206\u6790\u51fa\"Good Job\"\u6765\u81ea\u54ea\u4e2a\u5730\u5740\uff1a import angr proj = angr.Project('../dist/15_angr_arbitrary_read') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) # \u4e0d\u884c \u8be5\u9898\u662f\u901a\u8fc7puts\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5224\u65ad\u8f93\u51fa\u4e2d\u662f\u5426\u5305\u542b\"Good Job.\"\u7684\u6761\u4ef6\u6539\u4e3a\uff0cputs\u7684\u53c2\u6570\u662f\u5426\u4e3a\"Good Job.\"\u7684\u5730\u5740\uff0c\u53730x484F6038\u3002\u68c0\u6d4bputs\u53c2\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u5f88\u597d\u7406\u89e3\uff1a def check_puts(state): puts_parameter = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) if state.solver.symbolic(puts_parameter): good_job_string_address = 0x484F6038 is_vulnerable_expression = puts_parameter == good_job_string_address copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False explore\u7684\u6761\u4ef6is_successful\uff1a def is_successful(state): puts_address = 0x08048370 if state.addr == puts_address: return check_puts(state) return False \u7a0b\u5e8f\u7684\u6d41\u7a0b\u5e76\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u6240\u4ee5\u672c\u9898\u7684\u5173\u952e\u8fd8\u662f\u5728\u4e8e\u7ed9explore\u51fd\u6570\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u5224\u5b9a\u6761\u4ef6\u3002\u5728\u81ea\u52a8\u5316Pwn\u4e2d\uff0c\u8fd9\u4e2a\u6761\u4ef6\u5f80\u5f80\u8981\u6539\u4e3a\u6267\u884c\u5230 system(\"/bin/sh\") \u3002 \u5b8c\u6574\u4ee3\u7801\uff1a import angr def check_puts(state): puts_parameter = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) if state.solver.symbolic(puts_parameter): good_job_string_address = 0x484F6038 is_vulnerable_expression = puts_parameter == good_job_string_address copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False def is_successful(state): puts_address = 0x08048370 if state.addr == puts_address: return check_puts(state) return False proj = angr.Project('../dist/15_angr_arbitrary_read') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=is_successful) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'0041810812 \\xd9\\xd9\\xd1\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd98`OH' \u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\u8fd9\u91cc\uff1a puts_parameter = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) \u7684 endness=proj.arch.memory_endness \u662f\u6307\u5b9a\u8bfb\u53d6\u7684\u65b9\u5f0f\u4e3a\u5c0f\u7aef\u3002 16_angr_arbitrary_write \u8fd9\u9898\u7684\u601d\u8def\u7a0d\u5fae\u6bd4\u4e0a\u9898\u590d\u6742\u4e00\u70b9\uff0c\u5728\u8fd9\u9898\u4e2d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7scanf\u5c06dest\u8986\u76d6\u6210\u4efb\u610f\u5730\u5740\uff0c\u7136\u540e\u901a\u8fc7\u7b2c\u4e8c\u4e2astrncpy\u5411dest\u4e2d\u4fdd\u5b58\u7684\u5730\u5740\u5199\u5165\u4efb\u4f55\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5411\u4efb\u4f55\u5730\u5740\u5199\u5165\u4efb\u4f55\u6570\u636e\uff0c\u8fd9\u662f\u4e00\u4e2a\u4efb\u610f\u5199\u6f0f\u6d1e\u3002\u9996\u5148\u6211\u4eec\u5c06dest\u8986\u76d6\u6210password_buffer\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u901a\u8fc7\u7b2c\u4e8c\u4e2astrncpy\u5f80dest\u4e2d\u5199\u5165\"PASSWORD\"\uff0c\u6700\u540e\u8f93\u51fa\"Good Job.\"\uff1a \u76f4\u63a5\u68ad\u54c8\u8fd8\u662f\u4e0d\u884c\uff0c\u539f\u56e0\u53ef\u80fd\u662fangr\u6ca1\u6709\u5224\u65ad\u51fapassword_buffer\u53ef\u4ee5\u88ab\u8986\u76d6\u4e3a\u7b26\u53f7\u503c\u3002 \u8fd8\u662f\u6309\u7167\u4e0a\u9898\u7684\u601d\u8def\uff0c\u8fd9\u56de\u6211\u4eec\u8981check\u7684\u662fstrncpy\u51fd\u6570\uff0c\u7ea6\u675f\u6761\u4ef6\u4e3adest\u6307\u5411\u7684\u5730\u5740\u4e3apassword_buffer\uff0c\u5e76\u4e14src\u4e3a\"NDYNWEUJ\"\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a def check_strncpy(state): dest = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) src = state.memory.load(state.regs.esp + 8, 4, endness=proj.arch.memory_endness) src_content = state.memory.load(src, 8) if state.solver.symbolic(src_content) and state.solver.symbolic(dest): is_vulnerable_expression = claripy.And(src_content == b'NDYNWEUJ', dest == 0x57584344) copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy def check_strncpy(state): dest = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) src = state.memory.load(state.regs.esp + 8, 4, endness=proj.arch.memory_endness) src_content = state.memory.load(src, 8) if state.solver.symbolic(src_content) and state.solver.symbolic(dest): is_vulnerable_expression = claripy.And(src_content == b'NDYNWEUJ', dest == 0x57584344) copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False def is_successful(state): strncpy_address = 0x08048410 if state.addr == strncpy_address: return check_strncpy(state) return False proj = angr.Project('../dist/16_angr_arbitrary_write') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=is_successful) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'0011604995 NDYNWEUJ\\xd9\\xd9\\xd9\\xd9\\xd9\\xd1\\xd9\\xd9DCXW' 17_angr_arbitrary_jump \u975e\u5e38\u7ecf\u5178\u7684ROP\uff0c\u53ef\u4ee5\u8986\u76d6\u8fd4\u56de\u503c\u5b9e\u73b0\u4efb\u610f\u8df3\u8f6c\uff1a \u5f53\u4e00\u4e2a\u6307\u4ee4\u6709\u5f88\u591a\u5206\u652f\u7684\u53ef\u80fd\u6027\u65f6\uff0c\u79f0\u4e4b\u4e3a\u4e0d\u53d7\u7ea6\u675f\uff08unconstrained\uff09\u7684\u72b6\u6001\uff0c \u6bd4\u5982\u8bf4\u5f53\u7528\u6237\u7684\u8f93\u5165\u51b3\u5b9a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u4f4d\u7f6e\u3002angr \u5728\u9047\u5230\u4e0d\u53d7\u7ea6\u675f\u7684\u72b6\u6001\u65f6\u4f1a\u5c06\u5176\u629b\u51fa\uff0c\u672c\u9898\u5c06\u8981\u5173\u95ed\u8fd9\u4e2a\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8f6c\u800c\u5229\u7528\u6b64\u72b6\u6001\u53bb\u6c42\u89e3\u80fd\u591f\u8df3\u8f6c\u5230print_good\u51fd\u6570\u7684payload\u3002 \u6c42\u89e3\u6b65\u9aa4\uff1a \u521d\u59cb\u5316proj\uff0c\u8ba9 angr \u8bb0\u5f55\u4e0d\u53d7\u7ea6\u675f\u7684\u72b6\u6001 \u5f00\u59cbstep\u76f4\u5230\u53d1\u73b0 eip \u4e3a\u7b26\u53f7\u7684\u72b6\u6001 \u7ea6\u675f eip \u4e0e print_good \u51fd\u6570\u5730\u5740\u76f8\u540c \u7ea6\u675f\u6c42\u89e3 \u5b8c\u6574exp\uff1a import angr import claripy proj = angr.Project('../dist/17_angr_arbitrary_jump') payload = claripy.BVS('payload', 64 * 8) state = proj.factory.entry_state(stdin=payload) simgr = proj.factory.simgr( state, save_unconstrained=True, stashes={ 'active':[state], 'unconstrained': [], 'found': [], }) while (len(simgr.active) or len(simgr.unconstrained)) and not len(simgr.found): for unconstrained in simgr.unconstrained: eip = unconstrained.regs.eip print_good_addr = 0x42585249 if unconstrained.satisfiable(extra_constraints=[eip == print_good_addr]): unconstrained.add_constraints(eip == print_good_addr) simgr.move('unconstrained', 'found') break simgr.drop(stash=\"unconstrained\") simgr.step() print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xda\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdbIRXB\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\x00\\x00\\x00\\x00\\x00' \u6253\u5370unconstrained\u72b6\u6001\uff0c\u53ef\u4ee5\u53d1\u73b0\u5176\u5730\u5740\u662f\u7531\u8f93\u5165\u51b3\u5b9a\u7684\uff1a >>> unconstrained <SimState @ <BV32 payload_0_512[199:192] .. payload_0_512[207:200] .. payload_0_512[215:208] .. payload_0_512[223:216]>> \u6240\u4ee5\u6211\u4eec\u5bf9eip\u8fdb\u884c\u7ea6\u675f\u6c42\u89e3\uff0c\u5c31\u80fd\u627e\u5230\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u7684payload\u3002","title":"08 angr overflow"},{"location":"angr/08_angr_overflow/#15_angr_arbitrary_read","text":"\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5165\u95e8\u7ea7\u7684\u6808\u6ea2\u51fa\u9898\uff0c\u7a0b\u5e8f\u903b\u8f91\u5982\u4e0b\uff1a \u624b\u52a8\u5206\u6790\u7684\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0cscanf\u5904\u6709\u4e00\u4e2a\u4efb\u610f\u8bfb\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u901a\u8fc7scanf\u5c06s\u7684\u5730\u5740\u8986\u76d6\u4e3a0x484F6038\uff0c\u4f7f puts(s) \u80fd\u591f\u6253\u5370\"Good Jobs\"\uff1a \u76f4\u63a5\u68ad\u54c8\u7684\u8bdd\u4e0d\u592a\u884c\uff0cangr\u6ca1\u6709\u5206\u6790\u51fa\u8fd9\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u539f\u56e0\u53ef\u80fd\u662fangr\u65e0\u6cd5\u5206\u6790\u51fa\"Good Job\"\u6765\u81ea\u54ea\u4e2a\u5730\u5740\uff1a import angr proj = angr.Project('../dist/15_angr_arbitrary_read') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore( find=lambda state : b'Good Job.' in state.posix.dumps(1), avoid=lambda state: b'Try again.' in state.posix.dumps(1) ) print(simgr.found[0].posix.dumps(0)) # \u4e0d\u884c \u8be5\u9898\u662f\u901a\u8fc7puts\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5224\u65ad\u8f93\u51fa\u4e2d\u662f\u5426\u5305\u542b\"Good Job.\"\u7684\u6761\u4ef6\u6539\u4e3a\uff0cputs\u7684\u53c2\u6570\u662f\u5426\u4e3a\"Good Job.\"\u7684\u5730\u5740\uff0c\u53730x484F6038\u3002\u68c0\u6d4bputs\u53c2\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u5f88\u597d\u7406\u89e3\uff1a def check_puts(state): puts_parameter = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) if state.solver.symbolic(puts_parameter): good_job_string_address = 0x484F6038 is_vulnerable_expression = puts_parameter == good_job_string_address copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False explore\u7684\u6761\u4ef6is_successful\uff1a def is_successful(state): puts_address = 0x08048370 if state.addr == puts_address: return check_puts(state) return False \u7a0b\u5e8f\u7684\u6d41\u7a0b\u5e76\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u6240\u4ee5\u672c\u9898\u7684\u5173\u952e\u8fd8\u662f\u5728\u4e8e\u7ed9explore\u51fd\u6570\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u5224\u5b9a\u6761\u4ef6\u3002\u5728\u81ea\u52a8\u5316Pwn\u4e2d\uff0c\u8fd9\u4e2a\u6761\u4ef6\u5f80\u5f80\u8981\u6539\u4e3a\u6267\u884c\u5230 system(\"/bin/sh\") \u3002 \u5b8c\u6574\u4ee3\u7801\uff1a import angr def check_puts(state): puts_parameter = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) if state.solver.symbolic(puts_parameter): good_job_string_address = 0x484F6038 is_vulnerable_expression = puts_parameter == good_job_string_address copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False def is_successful(state): puts_address = 0x08048370 if state.addr == puts_address: return check_puts(state) return False proj = angr.Project('../dist/15_angr_arbitrary_read') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=is_successful) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'0041810812 \\xd9\\xd9\\xd1\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd98`OH' \u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\u8fd9\u91cc\uff1a puts_parameter = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) \u7684 endness=proj.arch.memory_endness \u662f\u6307\u5b9a\u8bfb\u53d6\u7684\u65b9\u5f0f\u4e3a\u5c0f\u7aef\u3002","title":"15_angr_arbitrary_read"},{"location":"angr/08_angr_overflow/#16_angr_arbitrary_write","text":"\u8fd9\u9898\u7684\u601d\u8def\u7a0d\u5fae\u6bd4\u4e0a\u9898\u590d\u6742\u4e00\u70b9\uff0c\u5728\u8fd9\u9898\u4e2d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7scanf\u5c06dest\u8986\u76d6\u6210\u4efb\u610f\u5730\u5740\uff0c\u7136\u540e\u901a\u8fc7\u7b2c\u4e8c\u4e2astrncpy\u5411dest\u4e2d\u4fdd\u5b58\u7684\u5730\u5740\u5199\u5165\u4efb\u4f55\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5411\u4efb\u4f55\u5730\u5740\u5199\u5165\u4efb\u4f55\u6570\u636e\uff0c\u8fd9\u662f\u4e00\u4e2a\u4efb\u610f\u5199\u6f0f\u6d1e\u3002\u9996\u5148\u6211\u4eec\u5c06dest\u8986\u76d6\u6210password_buffer\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u901a\u8fc7\u7b2c\u4e8c\u4e2astrncpy\u5f80dest\u4e2d\u5199\u5165\"PASSWORD\"\uff0c\u6700\u540e\u8f93\u51fa\"Good Job.\"\uff1a \u76f4\u63a5\u68ad\u54c8\u8fd8\u662f\u4e0d\u884c\uff0c\u539f\u56e0\u53ef\u80fd\u662fangr\u6ca1\u6709\u5224\u65ad\u51fapassword_buffer\u53ef\u4ee5\u88ab\u8986\u76d6\u4e3a\u7b26\u53f7\u503c\u3002 \u8fd8\u662f\u6309\u7167\u4e0a\u9898\u7684\u601d\u8def\uff0c\u8fd9\u56de\u6211\u4eec\u8981check\u7684\u662fstrncpy\u51fd\u6570\uff0c\u7ea6\u675f\u6761\u4ef6\u4e3adest\u6307\u5411\u7684\u5730\u5740\u4e3apassword_buffer\uff0c\u5e76\u4e14src\u4e3a\"NDYNWEUJ\"\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a def check_strncpy(state): dest = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) src = state.memory.load(state.regs.esp + 8, 4, endness=proj.arch.memory_endness) src_content = state.memory.load(src, 8) if state.solver.symbolic(src_content) and state.solver.symbolic(dest): is_vulnerable_expression = claripy.And(src_content == b'NDYNWEUJ', dest == 0x57584344) copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False \u5b8c\u6574\u4ee3\u7801\uff1a import angr import claripy def check_strncpy(state): dest = state.memory.load(state.regs.esp + 4, 4, endness=proj.arch.memory_endness) src = state.memory.load(state.regs.esp + 8, 4, endness=proj.arch.memory_endness) src_content = state.memory.load(src, 8) if state.solver.symbolic(src_content) and state.solver.symbolic(dest): is_vulnerable_expression = claripy.And(src_content == b'NDYNWEUJ', dest == 0x57584344) copied_state = state.copy() copied_state.add_constraints(is_vulnerable_expression) if copied_state.satisfiable(): state.add_constraints(is_vulnerable_expression) return True return False def is_successful(state): strncpy_address = 0x08048410 if state.addr == strncpy_address: return check_strncpy(state) return False proj = angr.Project('../dist/16_angr_arbitrary_write') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find=is_successful) print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'0011604995 NDYNWEUJ\\xd9\\xd9\\xd9\\xd9\\xd9\\xd1\\xd9\\xd9DCXW'","title":"16_angr_arbitrary_write"},{"location":"angr/08_angr_overflow/#17_angr_arbitrary_jump","text":"\u975e\u5e38\u7ecf\u5178\u7684ROP\uff0c\u53ef\u4ee5\u8986\u76d6\u8fd4\u56de\u503c\u5b9e\u73b0\u4efb\u610f\u8df3\u8f6c\uff1a \u5f53\u4e00\u4e2a\u6307\u4ee4\u6709\u5f88\u591a\u5206\u652f\u7684\u53ef\u80fd\u6027\u65f6\uff0c\u79f0\u4e4b\u4e3a\u4e0d\u53d7\u7ea6\u675f\uff08unconstrained\uff09\u7684\u72b6\u6001\uff0c \u6bd4\u5982\u8bf4\u5f53\u7528\u6237\u7684\u8f93\u5165\u51b3\u5b9a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u4f4d\u7f6e\u3002angr \u5728\u9047\u5230\u4e0d\u53d7\u7ea6\u675f\u7684\u72b6\u6001\u65f6\u4f1a\u5c06\u5176\u629b\u51fa\uff0c\u672c\u9898\u5c06\u8981\u5173\u95ed\u8fd9\u4e2a\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8f6c\u800c\u5229\u7528\u6b64\u72b6\u6001\u53bb\u6c42\u89e3\u80fd\u591f\u8df3\u8f6c\u5230print_good\u51fd\u6570\u7684payload\u3002 \u6c42\u89e3\u6b65\u9aa4\uff1a \u521d\u59cb\u5316proj\uff0c\u8ba9 angr \u8bb0\u5f55\u4e0d\u53d7\u7ea6\u675f\u7684\u72b6\u6001 \u5f00\u59cbstep\u76f4\u5230\u53d1\u73b0 eip \u4e3a\u7b26\u53f7\u7684\u72b6\u6001 \u7ea6\u675f eip \u4e0e print_good \u51fd\u6570\u5730\u5740\u76f8\u540c \u7ea6\u675f\u6c42\u89e3 \u5b8c\u6574exp\uff1a import angr import claripy proj = angr.Project('../dist/17_angr_arbitrary_jump') payload = claripy.BVS('payload', 64 * 8) state = proj.factory.entry_state(stdin=payload) simgr = proj.factory.simgr( state, save_unconstrained=True, stashes={ 'active':[state], 'unconstrained': [], 'found': [], }) while (len(simgr.active) or len(simgr.unconstrained)) and not len(simgr.found): for unconstrained in simgr.unconstrained: eip = unconstrained.regs.eip print_good_addr = 0x42585249 if unconstrained.satisfiable(extra_constraints=[eip == print_good_addr]): unconstrained.add_constraints(eip == print_good_addr) simgr.move('unconstrained', 'found') break simgr.drop(stash=\"unconstrained\") simgr.step() print(simgr.found[0].posix.dumps(0)) \u8f93\u51fa\uff1a b'\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xda\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdbIRXB\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\xdb\\x00\\x00\\x00\\x00\\x00' \u6253\u5370unconstrained\u72b6\u6001\uff0c\u53ef\u4ee5\u53d1\u73b0\u5176\u5730\u5740\u662f\u7531\u8f93\u5165\u51b3\u5b9a\u7684\uff1a >>> unconstrained <SimState @ <BV32 payload_0_512[199:192] .. payload_0_512[207:200] .. payload_0_512[215:208] .. payload_0_512[223:216]>> \u6240\u4ee5\u6211\u4eec\u5bf9eip\u8fdb\u884c\u7ea6\u675f\u6c42\u89e3\uff0c\u5c31\u80fd\u627e\u5230\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u7684payload\u3002","title":"17_angr_arbitrary_jump"},{"location":"angr/09_VEX%20IR/","text":"\u5728\u7b2c0\u8282\u4e2d\uff0c\u6211\u4eec\u7528C\u8bed\u8a00\u4ee3\u7801\u8868\u793a\u4e86\u7b26\u53f7\u6267\u884c\u8fc7\u7a0b\uff0c\u800c\u5b9e\u9645\u4e0aangr\u7684\u7b26\u53f7\u6267\u884c\u65e2\u4e0d\u662f\u57fa\u4e8eC\u8bed\u8a00\uff0c\u4e5f\u4e0d\u662f\u57fa\u4e8e\u6c47\u7f16\uff0c\u800c\u662f\u662f\u57fa\u4e8e\u4e00\u79cd\u7279\u5b9a\u7684\u4e2d\u95f4\u4ee3\u7801\uff08Intermediate Representation, IR\uff09\u2014\u2014VEX\u3002 \u8fd9\u4e00\u8282\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u7b80\u5355\u4e86\u89e3VEX IR\uff0c\u4e0d\u540c\u67b6\u6784\u7684\u6c47\u7f16\u8f6c\u5316\u4e3aVEX IR\u7565\u6709\u533a\u522b\uff0c\u8fd9\u91cc\u4ee5x86\u4e3a\u4f8b\u3002 0x00. x86\u67b6\u6784\u4e0b\u7684VEX IR \u7f16\u8bd1\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff1a #include <cstdio> #include <cstring> #include <cstdlib> char input[100] = {0}; char enc[100] = \"\\x86\\x8a\\x7d\\x87\\x93\\x8b\\x4d\\x81\\x80\\x8a\\x43\\x7f\\x86\\x4b\\x84\\x7f\\x51\\x90\\x7f\\x62\\x2b\\x6d\\x2c\\x91\"; void encrypt(unsigned char *dest, char *src){ int len = strlen(src); for(int i = 0;i < len;i ++){ dest[i] = (src[i] + (32 - i)) ^ i; } } // flag{s1mpl3_v3x_1r_d3m0} int main(){ printf(\"Please input your flag: \"); scanf(\"%s\", input); if(strlen(input) != 24){ printf(\"Wrong length!\\n\"); exit(0); } unsigned char dest[100] = {0}; encrypt(dest, input); if(!memcmp(dest, enc, 24)){ printf(\"Congratulations~\\n\"); }else{ printf(\"Sorry try again.\\n\"); } } \u5199\u4e00\u4e2a\u7b80\u5355\u7684demo\u8f93\u51fa\u4e00\u4e0bmain\u51fd\u6570\u7b2c\u4e00\u4e2a\u57fa\u672c\u5757\u7684VEX IR\uff0cirsb\u7684\u542b\u4e49\u662f IR Super Block \uff0c\u5927\u6982\u610f\u601d\u662f\u7531VEX IR\u6307\u4ee4\u7ec4\u6210\u7684\u4e00\u4e2a\u57fa\u672c\u5757\uff1a import angr proj = angr.Project('TestProgram') block = proj.factory.block(0x40075F) irsb = block.vex irsb.pp() \u8fd0\u884c\u8f93\u51fa\u5982\u4e0b\uff1a IRSB { t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I32 t8:Ity_I32 t9:Ity_I32 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I32 t23:Ity_I64 t24:Ity_I32 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64 00 | ------ IMark(0x40075f, 1, 0) ------ 01 | t0 = GET:I64(rbp) 02 | t13 = GET:I64(rsp) 03 | t12 = Sub64(t13,0x0000000000000008) 04 | PUT(rsp) = t12 05 | STle(t12) = t0 06 | ------ IMark(0x400760, 3, 0) ------ 07 | PUT(rbp) = t12 08 | ------ IMark(0x400763, 4, 0) ------ 09 | t2 = Sub64(t12,0x0000000000000070) 10 | PUT(rsp) = t2 11 | PUT(rip) = 0x0000000000400767 12 | ------ IMark(0x400767, 9, 0) ------ 13 | t16 = GET:I64(fs) 14 | t15 = Add64(0x0000000000000028,t16) 15 | t17 = LDle:I64(t15) 16 | PUT(rip) = 0x0000000000400770 17 | ------ IMark(0x400770, 4, 0) ------ 18 | t18 = Add64(t12,0xfffffffffffffff8) 19 | STle(t18) = t17 20 | ------ IMark(0x400774, 2, 0) ------ 21 | PUT(cc_op) = 0x0000000000000013 22 | PUT(cc_dep1) = 0x0000000000000000 23 | PUT(cc_dep2) = 0x0000000000000000 24 | ------ IMark(0x400776, 5, 0) ------ 25 | PUT(rdi) = 0x00000000004008c4 26 | ------ IMark(0x40077b, 5, 0) ------ 27 | PUT(rax) = 0x0000000000000000 28 | PUT(rip) = 0x0000000000400780 29 | ------ IMark(0x400780, 5, 0) ------ 30 | t30 = Sub64(t2,0x0000000000000008) 31 | PUT(rsp) = t30 32 | STle(t30) = 0x0000000000400785 33 | t32 = Sub64(t30,0x0000000000000080) 34 | ====== AbiHint(0xt32, 128, 0x00000000004005a0) ====== NEXT: PUT(rip) = 0x00000000004005a0; Ijk_Call } \u53ef\u4ee5\u770b\u5230\u5927\u90e8\u5206\u7684VEX IR\u5c31\u662f\u628a\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\u7528\u591a\u6761VEX IR\u6307\u4ee4\u66ff\u4ee3\uff0c\u6bd4\u5982 push rbp \u88ab\u66ff\u6362\u6210\u4e86\uff1a 00 | ------ IMark(0x40075f, 1, 0) ------ 01 | t0 = GET:I64(rbp) 02 | t13 = GET:I64(rsp) 03 | t12 = Sub64(t13,0x0000000000000008) 04 | PUT(rsp) = t12 05 | STle(t12) = t0 \u5176\u4e2d t0 \u3001 t13 \u3001 t12 \u7b49\u4ee5t\u5f00\u5934\u53d8\u91cf\u5728VEX IR\u4e2d\u90fd\u53eb\u505a\u4e34\u65f6\u53d8\u91cf\uff08temporary variable\uff09\u3002STle\u6307\u4ee4\u7684\u542b\u4e49\u4e3aStore Memory\uff0c\u9664\u4e86\u8fd9\u6761\u6307\u4ee4\u5176\u4ed6\u6307\u4ee4\u7684\u542b\u4e49\u5e94\u8be5\u90fd\u6bd4\u8f83\u597d\u7406\u89e3\u3002\u672c\u6587\u4e0d\u53ef\u80fd\u628a\u6240\u6709VEX IR\u6307\u4ee4\u90fd\u89e3\u91ca\u4e00\u904d\uff0c\u6240\u4ee5\u5177\u4f53\u7684\u89e3\u91ca\u8bf7\u67e5\u770bangr\u7684\u5b98\u65b9\u6587\u6863 Intermediate Representation \u4ee5\u53ca\u9644\u5c5e\u94fe\u63a5\u3002 \u4e0d\u540c\u4e8eIDA\u4e2d\u7684CFG\uff0cVEX IR\u4f1a\u5c06call\u6307\u4ee4\u4e5f\u89c6\u4f5c\u4e00\u79cd\u8df3\u8f6c\uff0c\u6240\u4ee5\u8fd9\u4e2airsb\u4ee5\u4e00\u6761call\u6307\u4ee4\u7ed3\u675f\u4e86\uff1a NEXT: PUT(rip) = 0x00000000004005a0; Ijk_Call \u5bf9\u5e94IDA CFG\u4e2d\u7684 call _printf \u8fd9\u6761\u6307\u4ee4\uff1a 0x01. \u7b26\u53f7\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684VEX IR \u5199\u4e00\u4e2a\u7b80\u5355\u7684demo\u6765\u770b\u4e00\u4e0bangr\u7b26\u53f7\u6267\u884c\u4e2d\u6bcf\u6b21step\u7684\u5355\u4f4d\uff1a import angr proj = angr.Project('TestProgram') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) while len(simgr.active): print('--------------') for active in simgr.active: print(hex(active.addr)) if b'Congratulations~' in active.posix.dumps(1): print(active.posix.dumps(0)) simgr.step() \u90e8\u5206\u8f93\u51fa\u5982\u4e0b\uff1a -------------- 0x40075f -------------- 0x4005a0 -------------- 0x700018 -------------- 0x400785 -------------- 0x4005d0 \u53ef\u4ee5\u53d1\u73b0simgr\u7684step\u51fd\u6570\u662f\u4ee5\u4e00\u4e2airsb\u4e3a\u5355\u4f4d\u8fdb\u884c\u7b26\u53f7\u6267\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21step\u4e4b\u540e\u7684\u72b6\u6001\uff0c\u662f\u5728\u4e0a\u4e00\u6b21state\u7684\u57fa\u7840\u4e0a\uff0c\u7b26\u53f7\u6267\u884c\u4e00\u4e2airsb\u4e4b\u540e\u7684\u7ed3\u679c\uff1a \u5f53\u524d\u8981\u6267\u884c\u7684irsb\u53ef\u4ee5\u901a\u8fc7state.scratch.irsb\u83b7\u5f97\uff1a >>> active.scratch.irsb IRSB { t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 00 | ------ IMark(0x400834, 1, 0) ------ 01 | t0 = GET:I64(rbp) 02 | PUT(rsp) = t0 03 | t1 = LDle:I64(t0) 04 | PUT(rbp) = t1 05 | t5 = Add64(t0,0x0000000000000008) 06 | PUT(rsp) = t5 07 | PUT(rip) = 0x0000000000400835 08 | ------ IMark(0x400835, 1, 0) ------ 09 | t3 = LDle:I64(t5) 10 | t4 = Add64(t5,0x0000000000000008) 11 | PUT(rsp) = t4 12 | t6 = Sub64(t4,0x0000000000000080) 13 | ====== AbiHint(0xt6, 128, t3) ====== NEXT: PUT(rip) = t3; Ijk_Ret } 0x02. \u901a\u8fc7statement\u65ad\u70b9\u76d1\u63a7\u7b26\u53f7\u6267\u884c\u8fc7\u7a0b \u901a\u8fc7step\u51fd\u6570\u6211\u4eec\u53ef\u4ee5\u4ee5irsb\u4e3a\u5355\u4f4d\u76d1\u63a7\u7b26\u53f7\u6267\u884c\u7684\u8fc7\u7a0b\uff0c\u800cangr\u7684inspect\u673a\u5236\u5219\u53ef\u4ee5\u8ba9\u6211\u4eec\u76d1\u63a7\u4e00\u4e9b\u989d\u5916\u7684\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5305\u62ec\uff08\u6765\u81ea angr/angr/state_plugins/inspect.py \uff09\uff1a event_types = { 'vex_lift', 'mem_read', 'mem_write', 'address_concretization', 'reg_read', 'reg_write', 'tmp_read', 'tmp_write', 'expr', 'statement', 'instruction', 'irsb', 'constraints', 'exit', 'fork', 'symbolic_variable', 'call', 'return', 'simprocedure', 'dirty', 'syscall', 'cfg_handle_job', 'vfg_handle_successor', 'vfg_widen_state', 'engine_process', 'memory_page_map', } \u5176\u4e2dstatement\u610f\u4e3a\u4e00\u6761VEX IR\u6307\u4ee4\uff0c\u5bf9statement\u8fdb\u884c\u76d1\u63a7\u5373\u5bf9\u6bcf\u6761VEX IR\u6307\u4ee4\u8fdb\u884c\u76d1\u63a7\uff0c\u76d1\u63a7\u7684\u65b9\u6cd5\u4e3a\u5bf9statement\u4e8b\u4ef6\u4e0b\u65ad\u70b9\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a state.inspect.b('statement', when=BP_BEFORE, action=action) action\u662f\u4e00\u4e2a\u9700\u8981SimState\u53c2\u6570\u7684\u51fd\u6570\uff1a def action(state): print(state.scratch.irsb.statements[state.inspect.statement]) \u53ef\u4ee5\u901a\u8fc7\uff1a state.scratch.irsb.statements[state.inspect.statement] \u6765\u83b7\u53d6\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684VEX IR\u6307\u4ee4\uff0c\u4f8b\u5982\uff1a t6 = Sub64(t4,0x0000000000000080) \u901a\u8fc7\uff1a list(state.scratch.irsb.statements[state.inspect.statement].expressions) \u5bf9\u5f53\u524d\u7684statement\u8fdb\u884c\u62c6\u5206\uff0c\u4e00\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a >>> state.scratch.irsb.statements[state.inspect.statement] t6 = Sub64(t4,0x0000000000000080) >>> list(state.scratch.irsb.statements[state.inspect.statement].expressions) [<pyvex.expr.Binop object at 0x000002282817E780>, <pyvex.expr.RdTmp object at 0x0000022822CBDD60>, <pyvex.expr.Const object at 0x0000022822D356D0>] Sub64\u5bf9\u5e94Binop\uff0c\u5373\u4e8c\u5143\u8fd0\u7b97\uff08Binary Operation\uff09\uff1bRdTmp\u5bf9\u5e94t4\uff0c\u8bfb\u53d6\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff1bConst\u5bf9\u5e94\u5e38\u65700x80\u3002 \u4e4b\u524d\u6211\u4eec\u901a\u8fc7state\u6765\u4fee\u6539\u5bc4\u5b58\u5668\u3001\u5185\u5b58\uff0c\u8fdb\u800c\u6539\u53d8\u5f53\u524d\u7b26\u53f7\u6267\u884c\u7684\u72b6\u6001\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u57fa\u4e8eVEX IR\u6765\u4fee\u6539\u7b26\u53f7\u6267\u884c\u7684\u72b6\u6001\u5462\uff1f\u7b54\u6848\u5c06\u5728\u4e0b\u4e00\u8282\u2014\u2014 \u5229\u7528angr\u7b26\u53f7\u6267\u884c\u53bb\u9664\u63a7\u5236\u6d41\u5e73\u5766\u5316 \u63ed\u6653\u3002VEX IR\u7684\u5185\u5bb9\u5dee\u4e0d\u591a\u5c31\u8bb2\u5230\u8fd9\u4e86\uff0c\u60f3\u66f4\u6df1\u5165\u4e86\u89e3VEX IR\u7684\u8bfb\u8005\u53ef\u4ee5\u901a\u8fc7angr\u7684\u5b98\u65b9\u6587\u6863\u548cangr\u4ee5\u53capyvex\u7684\u6e90\u4ee3\u7801\u5b66\u4e60\u3002","title":"09 VEX IR"},{"location":"angr/09_VEX%20IR/#0x00-x86vex-ir","text":"\u7f16\u8bd1\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff1a #include <cstdio> #include <cstring> #include <cstdlib> char input[100] = {0}; char enc[100] = \"\\x86\\x8a\\x7d\\x87\\x93\\x8b\\x4d\\x81\\x80\\x8a\\x43\\x7f\\x86\\x4b\\x84\\x7f\\x51\\x90\\x7f\\x62\\x2b\\x6d\\x2c\\x91\"; void encrypt(unsigned char *dest, char *src){ int len = strlen(src); for(int i = 0;i < len;i ++){ dest[i] = (src[i] + (32 - i)) ^ i; } } // flag{s1mpl3_v3x_1r_d3m0} int main(){ printf(\"Please input your flag: \"); scanf(\"%s\", input); if(strlen(input) != 24){ printf(\"Wrong length!\\n\"); exit(0); } unsigned char dest[100] = {0}; encrypt(dest, input); if(!memcmp(dest, enc, 24)){ printf(\"Congratulations~\\n\"); }else{ printf(\"Sorry try again.\\n\"); } } \u5199\u4e00\u4e2a\u7b80\u5355\u7684demo\u8f93\u51fa\u4e00\u4e0bmain\u51fd\u6570\u7b2c\u4e00\u4e2a\u57fa\u672c\u5757\u7684VEX IR\uff0cirsb\u7684\u542b\u4e49\u662f IR Super Block \uff0c\u5927\u6982\u610f\u601d\u662f\u7531VEX IR\u6307\u4ee4\u7ec4\u6210\u7684\u4e00\u4e2a\u57fa\u672c\u5757\uff1a import angr proj = angr.Project('TestProgram') block = proj.factory.block(0x40075F) irsb = block.vex irsb.pp() \u8fd0\u884c\u8f93\u51fa\u5982\u4e0b\uff1a IRSB { t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I32 t8:Ity_I32 t9:Ity_I32 t10:Ity_I64 t11:Ity_I64 t12:Ity_I64 t13:Ity_I64 t14:Ity_I64 t15:Ity_I64 t16:Ity_I64 t17:Ity_I64 t18:Ity_I64 t19:Ity_I64 t20:Ity_I64 t21:Ity_I64 t22:Ity_I32 t23:Ity_I64 t24:Ity_I32 t25:Ity_I64 t26:Ity_I64 t27:Ity_I64 t28:Ity_I64 t29:Ity_I64 t30:Ity_I64 t31:Ity_I64 t32:Ity_I64 t33:Ity_I64 00 | ------ IMark(0x40075f, 1, 0) ------ 01 | t0 = GET:I64(rbp) 02 | t13 = GET:I64(rsp) 03 | t12 = Sub64(t13,0x0000000000000008) 04 | PUT(rsp) = t12 05 | STle(t12) = t0 06 | ------ IMark(0x400760, 3, 0) ------ 07 | PUT(rbp) = t12 08 | ------ IMark(0x400763, 4, 0) ------ 09 | t2 = Sub64(t12,0x0000000000000070) 10 | PUT(rsp) = t2 11 | PUT(rip) = 0x0000000000400767 12 | ------ IMark(0x400767, 9, 0) ------ 13 | t16 = GET:I64(fs) 14 | t15 = Add64(0x0000000000000028,t16) 15 | t17 = LDle:I64(t15) 16 | PUT(rip) = 0x0000000000400770 17 | ------ IMark(0x400770, 4, 0) ------ 18 | t18 = Add64(t12,0xfffffffffffffff8) 19 | STle(t18) = t17 20 | ------ IMark(0x400774, 2, 0) ------ 21 | PUT(cc_op) = 0x0000000000000013 22 | PUT(cc_dep1) = 0x0000000000000000 23 | PUT(cc_dep2) = 0x0000000000000000 24 | ------ IMark(0x400776, 5, 0) ------ 25 | PUT(rdi) = 0x00000000004008c4 26 | ------ IMark(0x40077b, 5, 0) ------ 27 | PUT(rax) = 0x0000000000000000 28 | PUT(rip) = 0x0000000000400780 29 | ------ IMark(0x400780, 5, 0) ------ 30 | t30 = Sub64(t2,0x0000000000000008) 31 | PUT(rsp) = t30 32 | STle(t30) = 0x0000000000400785 33 | t32 = Sub64(t30,0x0000000000000080) 34 | ====== AbiHint(0xt32, 128, 0x00000000004005a0) ====== NEXT: PUT(rip) = 0x00000000004005a0; Ijk_Call } \u53ef\u4ee5\u770b\u5230\u5927\u90e8\u5206\u7684VEX IR\u5c31\u662f\u628a\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\u7528\u591a\u6761VEX IR\u6307\u4ee4\u66ff\u4ee3\uff0c\u6bd4\u5982 push rbp \u88ab\u66ff\u6362\u6210\u4e86\uff1a 00 | ------ IMark(0x40075f, 1, 0) ------ 01 | t0 = GET:I64(rbp) 02 | t13 = GET:I64(rsp) 03 | t12 = Sub64(t13,0x0000000000000008) 04 | PUT(rsp) = t12 05 | STle(t12) = t0 \u5176\u4e2d t0 \u3001 t13 \u3001 t12 \u7b49\u4ee5t\u5f00\u5934\u53d8\u91cf\u5728VEX IR\u4e2d\u90fd\u53eb\u505a\u4e34\u65f6\u53d8\u91cf\uff08temporary variable\uff09\u3002STle\u6307\u4ee4\u7684\u542b\u4e49\u4e3aStore Memory\uff0c\u9664\u4e86\u8fd9\u6761\u6307\u4ee4\u5176\u4ed6\u6307\u4ee4\u7684\u542b\u4e49\u5e94\u8be5\u90fd\u6bd4\u8f83\u597d\u7406\u89e3\u3002\u672c\u6587\u4e0d\u53ef\u80fd\u628a\u6240\u6709VEX IR\u6307\u4ee4\u90fd\u89e3\u91ca\u4e00\u904d\uff0c\u6240\u4ee5\u5177\u4f53\u7684\u89e3\u91ca\u8bf7\u67e5\u770bangr\u7684\u5b98\u65b9\u6587\u6863 Intermediate Representation \u4ee5\u53ca\u9644\u5c5e\u94fe\u63a5\u3002 \u4e0d\u540c\u4e8eIDA\u4e2d\u7684CFG\uff0cVEX IR\u4f1a\u5c06call\u6307\u4ee4\u4e5f\u89c6\u4f5c\u4e00\u79cd\u8df3\u8f6c\uff0c\u6240\u4ee5\u8fd9\u4e2airsb\u4ee5\u4e00\u6761call\u6307\u4ee4\u7ed3\u675f\u4e86\uff1a NEXT: PUT(rip) = 0x00000000004005a0; Ijk_Call \u5bf9\u5e94IDA CFG\u4e2d\u7684 call _printf \u8fd9\u6761\u6307\u4ee4\uff1a","title":"0x00. x86\u67b6\u6784\u4e0b\u7684VEX IR"},{"location":"angr/09_VEX%20IR/#0x01-vex-ir","text":"\u5199\u4e00\u4e2a\u7b80\u5355\u7684demo\u6765\u770b\u4e00\u4e0bangr\u7b26\u53f7\u6267\u884c\u4e2d\u6bcf\u6b21step\u7684\u5355\u4f4d\uff1a import angr proj = angr.Project('TestProgram') state = proj.factory.entry_state() simgr = proj.factory.simgr(state) while len(simgr.active): print('--------------') for active in simgr.active: print(hex(active.addr)) if b'Congratulations~' in active.posix.dumps(1): print(active.posix.dumps(0)) simgr.step() \u90e8\u5206\u8f93\u51fa\u5982\u4e0b\uff1a -------------- 0x40075f -------------- 0x4005a0 -------------- 0x700018 -------------- 0x400785 -------------- 0x4005d0 \u53ef\u4ee5\u53d1\u73b0simgr\u7684step\u51fd\u6570\u662f\u4ee5\u4e00\u4e2airsb\u4e3a\u5355\u4f4d\u8fdb\u884c\u7b26\u53f7\u6267\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21step\u4e4b\u540e\u7684\u72b6\u6001\uff0c\u662f\u5728\u4e0a\u4e00\u6b21state\u7684\u57fa\u7840\u4e0a\uff0c\u7b26\u53f7\u6267\u884c\u4e00\u4e2airsb\u4e4b\u540e\u7684\u7ed3\u679c\uff1a \u5f53\u524d\u8981\u6267\u884c\u7684irsb\u53ef\u4ee5\u901a\u8fc7state.scratch.irsb\u83b7\u5f97\uff1a >>> active.scratch.irsb IRSB { t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64 t4:Ity_I64 t5:Ity_I64 t6:Ity_I64 t7:Ity_I64 00 | ------ IMark(0x400834, 1, 0) ------ 01 | t0 = GET:I64(rbp) 02 | PUT(rsp) = t0 03 | t1 = LDle:I64(t0) 04 | PUT(rbp) = t1 05 | t5 = Add64(t0,0x0000000000000008) 06 | PUT(rsp) = t5 07 | PUT(rip) = 0x0000000000400835 08 | ------ IMark(0x400835, 1, 0) ------ 09 | t3 = LDle:I64(t5) 10 | t4 = Add64(t5,0x0000000000000008) 11 | PUT(rsp) = t4 12 | t6 = Sub64(t4,0x0000000000000080) 13 | ====== AbiHint(0xt6, 128, t3) ====== NEXT: PUT(rip) = t3; Ijk_Ret }","title":"0x01. \u7b26\u53f7\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684VEX IR"},{"location":"angr/09_VEX%20IR/#0x02-statement","text":"\u901a\u8fc7step\u51fd\u6570\u6211\u4eec\u53ef\u4ee5\u4ee5irsb\u4e3a\u5355\u4f4d\u76d1\u63a7\u7b26\u53f7\u6267\u884c\u7684\u8fc7\u7a0b\uff0c\u800cangr\u7684inspect\u673a\u5236\u5219\u53ef\u4ee5\u8ba9\u6211\u4eec\u76d1\u63a7\u4e00\u4e9b\u989d\u5916\u7684\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5305\u62ec\uff08\u6765\u81ea angr/angr/state_plugins/inspect.py \uff09\uff1a event_types = { 'vex_lift', 'mem_read', 'mem_write', 'address_concretization', 'reg_read', 'reg_write', 'tmp_read', 'tmp_write', 'expr', 'statement', 'instruction', 'irsb', 'constraints', 'exit', 'fork', 'symbolic_variable', 'call', 'return', 'simprocedure', 'dirty', 'syscall', 'cfg_handle_job', 'vfg_handle_successor', 'vfg_widen_state', 'engine_process', 'memory_page_map', } \u5176\u4e2dstatement\u610f\u4e3a\u4e00\u6761VEX IR\u6307\u4ee4\uff0c\u5bf9statement\u8fdb\u884c\u76d1\u63a7\u5373\u5bf9\u6bcf\u6761VEX IR\u6307\u4ee4\u8fdb\u884c\u76d1\u63a7\uff0c\u76d1\u63a7\u7684\u65b9\u6cd5\u4e3a\u5bf9statement\u4e8b\u4ef6\u4e0b\u65ad\u70b9\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a state.inspect.b('statement', when=BP_BEFORE, action=action) action\u662f\u4e00\u4e2a\u9700\u8981SimState\u53c2\u6570\u7684\u51fd\u6570\uff1a def action(state): print(state.scratch.irsb.statements[state.inspect.statement]) \u53ef\u4ee5\u901a\u8fc7\uff1a state.scratch.irsb.statements[state.inspect.statement] \u6765\u83b7\u53d6\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684VEX IR\u6307\u4ee4\uff0c\u4f8b\u5982\uff1a t6 = Sub64(t4,0x0000000000000080) \u901a\u8fc7\uff1a list(state.scratch.irsb.statements[state.inspect.statement].expressions) \u5bf9\u5f53\u524d\u7684statement\u8fdb\u884c\u62c6\u5206\uff0c\u4e00\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a >>> state.scratch.irsb.statements[state.inspect.statement] t6 = Sub64(t4,0x0000000000000080) >>> list(state.scratch.irsb.statements[state.inspect.statement].expressions) [<pyvex.expr.Binop object at 0x000002282817E780>, <pyvex.expr.RdTmp object at 0x0000022822CBDD60>, <pyvex.expr.Const object at 0x0000022822D356D0>] Sub64\u5bf9\u5e94Binop\uff0c\u5373\u4e8c\u5143\u8fd0\u7b97\uff08Binary Operation\uff09\uff1bRdTmp\u5bf9\u5e94t4\uff0c\u8bfb\u53d6\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff1bConst\u5bf9\u5e94\u5e38\u65700x80\u3002 \u4e4b\u524d\u6211\u4eec\u901a\u8fc7state\u6765\u4fee\u6539\u5bc4\u5b58\u5668\u3001\u5185\u5b58\uff0c\u8fdb\u800c\u6539\u53d8\u5f53\u524d\u7b26\u53f7\u6267\u884c\u7684\u72b6\u6001\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u57fa\u4e8eVEX IR\u6765\u4fee\u6539\u7b26\u53f7\u6267\u884c\u7684\u72b6\u6001\u5462\uff1f\u7b54\u6848\u5c06\u5728\u4e0b\u4e00\u8282\u2014\u2014 \u5229\u7528angr\u7b26\u53f7\u6267\u884c\u53bb\u9664\u63a7\u5236\u6d41\u5e73\u5766\u5316 \u63ed\u6653\u3002VEX IR\u7684\u5185\u5bb9\u5dee\u4e0d\u591a\u5c31\u8bb2\u5230\u8fd9\u4e86\uff0c\u60f3\u66f4\u6df1\u5165\u4e86\u89e3VEX IR\u7684\u8bfb\u8005\u53ef\u4ee5\u901a\u8fc7angr\u7684\u5b98\u65b9\u6587\u6863\u548cangr\u4ee5\u53capyvex\u7684\u6e90\u4ee3\u7801\u5b66\u4e60\u3002","title":"0x02. \u901a\u8fc7statement\u65ad\u70b9\u76d1\u63a7\u7b26\u53f7\u6267\u884c\u8fc7\u7a0b"},{"location":"angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/","text":"\u6700\u540e\u4e00\u8282\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u7528angr\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u2014\u2014\u5229\u7528angr\u7b26\u53f7\u6267\u884c\u53bb\u9664\u63a7\u5236\u6d41\u5e73\u5766\u5316\u3002\u5728\u9605\u8bfb\u672c\u8282\u6559\u7a0b\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u4e86\u89e3\u4ec0\u4e48\u662f\u63a7\u5236\u6d41\u5e73\u5766\u5316\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff1a Control Flow Flattening \u57fa\u4e8eLLVM Pass\u5b9e\u73b0\u63a7\u5236\u6d41\u5e73\u5766\u5316 \u672c\u8282\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u662f\u817e\u8baf\u5e94\u6025\u54cd\u5e94\u4e2d\u5fc32017\u5e74\u4e00\u7bc7\u535a\u5ba2\u7684\u590d\u73b0\uff0c\u56e0\u6b64\u4e00\u4e9b\u539f\u6587\u5df2\u7ecf\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\u7684\u5185\u5bb9\u4e0d\u4f1a\u5728\u672c\u8282\u91cd\u8ff0\uff1a \u5229\u7528\u7b26\u53f7\u6267\u884c\u53bb\u9664\u63a7\u5236\u6d41\u5e73\u5766\u5316 \u540c\u65f6\u4e5f\u53c2\u8003\u4e86QuarksLab\u7684\u8fd9\u7bc7\u535a\u5ba2\uff1a Deobfuscation: recovering an OLLVM-protected program \u4ee3\u7801\u4e3b\u8981\u53c2\u8003\uff1a cq674350529/deflat 0x00. \u521d\u6b65\u5206\u6790 \u8fd8\u662f\u6309\u7167\u60ef\u4f8b\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u8fdb\u884c\u8bb2\u89e3\uff1a #include <cstdio> #include <cstring> #include <cstdlib> char input[100] = {0}; char enc[100] = \"\\x86\\x8a\\x7d\\x87\\x93\\x8b\\x4d\\x81\\x80\\x8a\\x43\\x7f\\x86\\x4b\\x84\\x7f\\x51\\x90\\x7f\\x62\\x2b\\x6d\\x2c\\x91\"; void encrypt(unsigned char *dest, char *src){ int len = strlen(src); for(int i = 0;i < len;i ++){ dest[i] = (src[i] + (32 - i)) ^ i; } } // flag{s1mpl3_v3x_1r_d3m0} int main(){ printf(\"Please input your flag: \"); scanf(\"%s\", input); if(strlen(input) != 24){ printf(\"Wrong length!\\n\"); exit(0); } unsigned char dest[100] = {0}; encrypt(dest, input); if(!memcmp(dest, enc, 24)){ printf(\"Congratulations~\\n\"); }else{ printf(\"Sorry try again.\\n\"); } } \u5728Ubuntu\u4e0b\u7f16\u8bd1\u6b63\u5e38\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a clang TestProgram.cpp -o TestProgram \u7f16\u8bd1\u63a7\u5236\u6d41\u5e73\u5766\u5316\u6df7\u6dc6\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a clang -mllvm -fla -mllvm -split -mllvm -split_num=3 TestProgram.cpp -o TestProgram_fla \u5728IDA\u4e2d\u6253\u5f00\u8fd9\u4e24\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u9996\u5148\u662f\u6b63\u5e38\u7684\u53ef\u6267\u884c\u6587\u4ef6TestProgram\uff0cCFG\u7684\u903b\u8f91\u6bd4\u8f83\u6e05\u6670\u6613\u61c2\uff1a \u518d\u770b\u770b\u63a7\u5236\u6d41\u5e73\u5766\u5316\u6df7\u6dc6\u540e\u7684CFG\uff0c\u867d\u7136\u7a0b\u5e8f\u903b\u8f91\u5df2\u7ecf\u88ab\u6df7\u6dc6\u4e86\uff0c\u4f46\u5176\u7ed3\u6784\u8fd8\u662f\u6709\u89c4\u5f8b\u53ef\u5faa\u7684\uff1a \u63a7\u5236\u6d41\u5e73\u5766\u5316\u540e\u7684CFG\u4e2d\u7684\u57fa\u672c\u5757\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff0c\u8fd9\u51e0\u7c7b\u57fa\u672c\u5757\u7684\u542b\u4e49\u8bfb\u8005\u53ef\u4ee5\u9605\u8bfb\u817e\u8baf\u5e94\u6025\u54cd\u5e94\u5b9e\u9a8c\u5ba4\u7684\u90a3\u7bc7\u535a\u5ba2\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff1a \u603b\u7ed3\u6765\u8bf4\uff0c\u5229\u7528angr\u7b26\u53f7\u6267\u884c\u53bb\u9664\u63a7\u5236\u6d41\u5e73\u5766\u5316\u7684\u6b65\u9aa4\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4e09\u4e2a\u6b65\u9aa4\uff1a \u9759\u6001\u5206\u6790CFG\u5f97\u5230\u5e8f\u8a00/\u5165\u53e3\u5757\uff08Prologue\uff09\u3001\u4e3b\u5206\u53d1\u5668\uff08Main dispatcher\uff09\u3001\u5b50\u5206\u53d1\u5668/\u65e0\u7528\u5757\uff08Sub dispatchers\uff09\u3001\u771f\u5b9e\u5757\uff08Relevant blocks\uff09\u3001\u9884\u5206\u53d1\u5668\uff08Predispatcher\uff09\u548c\u8fd4\u56de\u5757\uff08Return\uff09 \u5229\u7528\u7b26\u53f7\u6267\u884c\u6062\u590d\u771f\u5b9e\u5757\u7684\u524d\u540e\u5173\u7cfb\uff0c\u91cd\u5efa\u63a7\u5236\u6d41 \u6839\u636e\u7b2c\u4e8c\u6b65\u91cd\u5efa\u7684\u63a7\u5236\u6d41Patch\u7a0b\u5e8f\uff0c\u8f93\u51fa\u6062\u590d\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6 0x01. \u9759\u6001\u5206\u6790CFG \u6574\u4e2a\u7a0b\u5e8f\u7684CFG\u53ef\u4ee5\u901a\u8fc7CFGFast\u51fd\u6570\u5f97\u5230\uff1a cfg = proj.analyses.CFGFast(normalize=True, force_complete_scan=False) \u4f46angr\u7684CFG\u4f1a\u5c06call\u6307\u4ee4\u4e5f\u89c6\u4e3a\u8df3\u8f6c\u7684\u4e00\u79cd\uff0c\u4f5c\u4e3a\u57fa\u672c\u5757\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\uff0c\u800cIDA\u4e2d\u53ea\u4f1a\u5c06jmp\u4e00\u7c7b\u7684\u6307\u4ee4\u4ee5\u53caret\u548ccall exit\u4f5c\u4e3a\u57fa\u672c\u5757\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\uff0c\u5e76\u4e14IDA\u4e2d\u7684CFG\u662f\u4ee5\u51fd\u6570\u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u7a0b\u5e8f\uff1a \u6240\u4ee5\u6211\u4eec\u8981\u901a\u8fc7angrmangement\u4e2d\u7684to_supergraph\u51fd\u6570\u5c06angr\u7684CFG\u5355\u4e2a\u51fd\u6570\u7684CFG\uff0c\u518d\u8f6c\u5316\u4e3a\u7c7b\u4f3cIDA\u7684CFG\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a def get_cfg(): cfg = proj.analyses.CFGFast(normalize=True, force_complete_scan=False) function_cfg = cfg.functions.get(start).transition_graph super_cfg = to_supergraph(function_cfg) return super_cfg \u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u7c7b\u4f3cIDA\u7684CFG\uff0c\u63a5\u7740\u6211\u4eec\u8981\u901a\u8fc7\u5206\u6790\u5e73\u5766\u5316\u540e\u7684\u63a7\u5236\u6d41\u7684\u7ed3\u6784\u89c4\u5f8b\u6765\u8bc6\u522b\u51fa\u5404\u7c7b\u578b\u7684\u57fa\u672c\u5757\uff0c\u8bc6\u522b\u65b9\u6cd5\u5982\u4e0b\uff1a \u5e8f\u8a00/\u5165\u53e3\u5757\uff08Prologue\uff09\uff1a\u6ca1\u6709\u524d\u9a71\u5757\u7684\u57fa\u672c\u5757\u5373\u662f\u5165\u53e3\u5757 for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node \u8fd4\u56de\u5757\uff08Return\uff09\uff1a\u6ca1\u6709\u540e\u7ee7\u5757\u7684\u57fa\u672c\u5757\u5373\u662f\u8fd4\u56de\u5757\uff0c\u8fd4\u56de\u5757\u53ef\u80fd\u6709\u591a\u4e2a retn_nodes = [] for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node elif cfg.out_degree(node) == 0: retn_nodes.append(node) \u4e3b\u5206\u53d1\u5668\uff08Main dispatcher\uff09\uff1a\u5165\u53e3\u5757\u7684\u540e\u7ee7\u5757\u5373\u4e3a\u4e3b\u5206\u53d1\u5668 main_dispatcher_node = list(cfg.successors(prologue_node))[0] \u9884\u5206\u53d1\u5668\uff08Predispatcher\uff09\uff1a\u4e3b\u5206\u53d1\u5668\u7684\u524d\u9a71\u5757\uff0c\u4e14\u4e0d\u4e3a\u5165\u53e3\u5757 for node in cfg.predecessors(main_dispatcher_node): if node.addr != prologue_node.addr: predispatcher_node = node break \u771f\u5b9e\u5757\uff08Relevant blocks\uff09\uff1a\u9884\u5206\u53d1\u5668\u7684\u524d\u9a71\u5757\uff0c\u4e3a\u4e86\u540e\u7eed\u5904\u7406\u65b9\u4fbf\uff0c\u8fd9\u91cc\u4e5f\u628a\u5165\u53e3\u5757\u7b97\u4f5c\u771f\u5b9e\u5757 relevant_nodes = [prologue_node] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) \u5b50\u5206\u53d1\u5668/\u65e0\u7528\u5757\uff08Sub dispatchers\uff09\uff1a\u9664\u4e0a\u8ff0\u57fa\u672c\u5757\u4e4b\u5916\u7684\u57fa\u672c\u5757\u90fd\u4e3a\u5b50\u5206\u53d1\u5668\uff0c\u56e0\u4e3a\u5b50\u5206\u53d1\u5668\u518d\u6062\u590d\u4e4b\u540e\u7684\u63a7\u5236\u6d41\u4e2d\u4e0d\u8d77\u4efb\u4f55\u4f5c\u7528\uff0c\u6240\u4ee5\u4e5f\u53eb\u4f5c\u65e0\u7528\u5757\uff0c\u4e4b\u540e\u8981\u88abNop\u6389 relevant_nodes = [prologue_node] sub_dispatcher_nodes = [] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) elif node != prologue_node and node not in retn_nodes: sub_dispatcher_nodes.append(node) \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a def analyse_blocks(): retn_nodes = [] for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node elif cfg.out_degree(node) == 0: retn_nodes.append(node) main_dispatcher_node = list(cfg.successors(prologue_node))[0] for node in cfg.predecessors(main_dispatcher_node): if node.addr != prologue_node.addr: predispatcher_node = node break relevant_nodes = [prologue_node] sub_dispatcher_nodes = [] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) elif node != prologue_node and node not in retn_nodes: sub_dispatcher_nodes.append(node) return prologue_node, main_dispatcher_node, sub_dispatcher_nodes, retn_nodes, relevant_nodes, predispatcher_node 0x02. \u91cd\u5efa\u63a7\u5236\u6d41 \u5728\u8fd9\u4e00\u6b65\u4e2d\u6211\u4eec\u8981\u901a\u8fc7\u7b26\u53f7\u6267\u884c\u6765\u786e\u5b9a\u771f\u5b9e\u5757\u4e4b\u95f4\u7684\u524d\u540e\u5173\u7cfb\uff0c\u771f\u5b9e\u5757\u4e4b\u95f4\u7684\u524d\u540e\u5173\u7cfb\u53c8\u5206\u4e3a\u4e24\u7c7b\uff1a \u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u540e\u7ee7\u5757 \u6709\u4e24\u4e2a\u540e\u7ee7\u5757\uff0c\u8df3\u8f6c\u5230\u54ea\u4e2a\u7531\u67d0\u4e2a\u6761\u4ef6\u51b3\u5b9a \u7b2c\u4e00\u79cd\u60c5\u51b5\u975e\u5e38\u597d\u5904\u7406\uff0c\u6211\u4eec\u4ece\u4e00\u4e2a\u771f\u5b9e\u5757A\u5f00\u59cb\u7b26\u53f7\u6267\u884c\uff0c\u76f4\u5230\u78b0\u5230\u4e0b\u4e00\u4e2a\u771f\u5b9e\u5757B\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u786e\u5b9a\u4e86\u4e00\u5bf9\u57fa\u672c\u5757\u7684\u6267\u884c\u987a\u5e8fA\u2192B\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u6211\u4eec\u9700\u8981\u5148\u4ee4\u8be5\u6761\u4ef6\u4e3aTrue\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0c\u5f97\u5230\u4e00\u4e2a\u540e\u7ee7\u771f\u5b9e\u5757\u7684\u5730\u5740\uff1b\u518d\u4ee4\u6761\u4ef6\u4e3aFalse\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0c\u5f97\u5230\u53e6\u4e00\u4e2a\u540e\u7ee7\u771f\u5b9e\u5757\u7684\u5730\u5740\u3002\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u4ee3\u7801\u5199\u8d77\u6765\u4f1a\u7a0d\u5fae\u6709\u70b9\u590d\u6742\u3002 \u6709\u4e00\u4e2a\u786e\u5b9a\u540e\u7ee7\u5757\u7684\u771f\u5b9e\u5757\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u8fd9\u7c7b\u57fa\u672c\u5757\u4f1a\u5728\u672b\u5c3e\u4fee\u6539switch\u53d8\u91cf\u7684\u503c\uff0c\u5728\u4e0b\u4e00\u6b21\u8fdb\u5165\u5206\u53d1\u5668\u65f6\u5c31\u80fd\u8fbe\u5230\u53e6\u4e00\u4e2a\u771f\u5b9e\u5757\uff1a \u8fd9\u7c7b\u5219\u662f\u5177\u6709\u4e24\u4e2a\u53ef\u80fd\u540e\u7ee7\u5757\u7684\u771f\u5b9e\u5757\uff0ccmovnz\u6709\u70b9\u7c7b\u4f3cjnz\u6307\u4ee4\uff0c\u4f1a\u5728ZF\u4e3a0\u65f6\u6267\u884cmov eax, ecx\u64cd\u4f5c\uff0c\u800cZF\u4e3a1\u65f6\u4e0d\u505a\u5904\u7406\u3002\u6240\u6709\u8fd9\u7c7b\u771f\u5b9e\u5757\u90fd\u5305\u542bcmovnz\u6216cmovz\u6307\u4ee4\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u7279\u5f81\u5224\u5b9a\u771f\u5b9e\u5757\u662f\u5177\u6709\u5206\u652f\uff1a \u7b2c\u4e8c\u6b65\u7684\u4ee3\u7801\u5982\u4e0b\uff1a relevant_addrs = [node.addr for node in relevant_nodes] relevant_addrs += [node.addr for node in retn_nodes] patch_addrs = {} cmov_types = {} flow = defaultdict(list) for node in relevant_nodes: block_addr = node.addr has_branch = preprocess(block_addr) if has_branch: symbolic_execute(block_addr, modify_cond=claripy.BVV(1, 1)) symbolic_execute(block_addr, modify_cond=claripy.BVV(0, 1)) else: symbolic_execute(block_addr) for node in relevant_nodes: block_addr = node.addr print('Real successors of block %#x: ' % block_addr, [hex(child) for child in flow[block_addr]]) relevant_addrs\u6b64\u65f6\u5305\u542b\u5165\u53e3\u5757\u3001\u771f\u5b9e\u5757\u4ee5\u53ca\u8fd4\u56de\u5757\u7684\u5730\u5740\uff0c\u5f53\u6211\u4eec\u4ece\u4e00\u4e2a\u771f\u5b9e\u5757\u51fa\u53d1\uff08\u4e0d\u5305\u542b\u8fd4\u56de\u5757\uff09\u78b0\u5230relevant_addrs\u4e2d\u7684\u5730\u5740\u65f6\uff0c\u5c31\u8fd8\u539f\u4e86\u4e00\u5bf9\u771f\u5b9e\u5757\u7684\u524d\u540e\u5173\u7cfb patch_addrs\u4fdd\u5b58\u771f\u5b9e\u5757\u4e2dcmov\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4ee5\u4fbf\u7b2c\u4e09\u6b65\u8fdb\u884cPatch cmov_types\u4fdd\u5b58\u771f\u5b9e\u5757\u4e2dcmov\u6307\u4ee4\u7684\u7c7b\u578b\uff0c\u6bd4\u5982cmovz\u3001cmovnz\u7b49 flow\u521b\u5efa\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7c7b\u578b\u4e3alist\u7684dict\uff0c\u4fdd\u5b58\u771f\u5b9e\u5757\u7684\u540e\u7ee7\u5757\u5730\u5740 preprocess\u5bf9\u771f\u5b9e\u5757\u4e2d\u7684call\u6307\u4ee4\u8fdb\u884chook\uff0c\u56e0\u4e3a\u8fd9\u4e9bcall\u6307\u4ee4\u5bf9\u63a5\u4e0b\u6765\u7684\u7b26\u53f7\u6267\u884c\u5b8c\u5168\u6ca1\u6709\u4f5c\u7528\uff1b\u53e6\u5916\u6839\u636e\u6709\u65e0cmov\u6307\u4ee4\u5224\u65ad\u6539\u771f\u5b9e\u5757\u662f\u5426\u6709\u5206\u652f\u4ee5\u53ca\u8bb0\u5f55cmov\u6307\u4ee4\u7684\u5730\u5740\u548c\u7c7b\u578b\uff1a def preprocess(block_addr): block = proj.factory.block(block_addr) has_branch = False for insn in block.capstone.insns: if insn.mnemonic == 'call': proj.hook(insn.address, hook=lambda state : proj.unhook(state.addr), length=5) print('Hook [%s\\t%s] at %#x' % (insn.mnemonic, insn.op_str, insn.address)) elif insn.mnemonic.startswith('cmov'): has_branch = True patch_addrs[block_addr] = insn.address cmov_types[block_addr] = insn.mnemonic return has_branch \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u5f53\u524d\u771f\u5b9e\u5757\u6ca1\u6709\u5206\u652f\uff0c\u5219symbolic_execute\u4ece\u4e00\u4e2a\u771f\u5b9e\u5757\u5f00\u59cb\u7b26\u53f7\u6267\u884c\uff0c\u76f4\u5230\u78b0\u5230\u4e0b\u4e00\u4e2a\u771f\u5b9e\u5757\uff0c\u5f80flow\u4e2d\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u771f\u5b9e\u5757\u7684\u5730\u5740\uff1a def symbolic_execute(block_addr, modify_cond=None): simgr = proj.factory.simgr(state) simgr.step() while len(simgr.active): for active in simgr.active: if active.addr in relevant_addrs: flow[block_addr].append(active.addr) return simgr.step() print('Error at block %#x' % block_addr) \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u5f53\u524d\u771f\u5b9e\u5757\u6709\u5206\u652f\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4ee4\u5206\u652f\u7684\u6761\u4ef6\u5206\u522b\u4e3aTrue\u548cFalse\u7b26\u53f7\u6267\u884c\u4e24\u6b21\uff0c\u5206\u522b\u5f97\u5230\u4e24\u4e2a\u540e\u7ee7\u771f\u5b9e\u5757\u7684\u5730\u5740\uff1a def symbolic_execute(block_addr, modify_cond=None): def modify_ITE_cond(state): expressions = list(state.scratch.irsb.statements[state.inspect.statement].expressions) if len(expressions) != 0 and isinstance(expressions[0], pyvex.expr.ITE): state.scratch.temps[expressions[0].cond.tmp] = modify_cond state.inspect._breakpoints['statement'] = [] state = proj.factory.blank_state(addr=block_addr, remove_options={ angr.sim_options.LAZY_SOLVES}) if modify_cond is not None: state.inspect.b('statement',when=BP_BEFORE, action=modify_ITE_cond) simgr = proj.factory.simgr(state) simgr.step() while len(simgr.active): for active in simgr.active: if active.addr in relevant_addrs: flow[block_addr].append(active.addr) return simgr.step() print('Error at block %#x' % block_addr) \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7statement\u65ad\u70b9\u76d1\u63a7\u4e86VEX IR\u4e2d\u7684ITE\u6307\u4ee4\uff0c\u901a\u8fc7\u4fee\u6539ITE\u6307\u4ee4\u4e2d\u7684\u4e34\u65f6\u53d8\u91cf\u6539\u53d8\u4e86\u7b26\u53f7\u6267\u884c\u7684\u72b6\u6001\uff0cITE\u6307\u4ee4\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u4e2d\u7684\u4e09\u5143\u8fd0\u7b97\u7b26\uff1a \u5199\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6253\u5370\u4e00\u4e0bVEX IR\uff0c\u5bf9\u6bd4ITE\u6307\u4ee4\u4e0e\u539f\u6307\u4ee4\u7684\u5bf9\u5e94\u5173\u7cfb\uff1a import angr proj = angr.Project('TestProgram_fla') block = proj.factory.block(0x4008A8) block.vex.pp() \u8f93\u51fa\uff1a 00 | ------ IMark(0x4008a8, 5, 0) ------ ... 16 | ------ IMark(0x4008b8, 3, 0) ------ 17 | t34 = And64(t13,0x00000000000000ff) 18 | t33 = CmpNE64(t34,0x0000000000000000) 19 | t32 = 1Uto64(t33) 20 | t25 = t32 21 | t35 = 64to1(t25) 22 | t20 = t35 23 | t36 = ITE(t20,0x43b8ab1b,0xa71da95e) 24 | t19 = t36 25 | t37 = 32Uto64(t19) 26 | t18 = t37 27 | PUT(rax) = t18 28 | PUT(rip) = 0x00000000004008bb 29 | ------ IMark(0x4008bb, 3, 0) ------ ... } \u53ef\u4ee5\u770b\u5230VEX IR\u7528\u5305\u62ecITE\u5728\u5185\u7684\u591a\u6761\u6307\u4ee4\u8868\u793a\u4e86cmovnz\u8fd9\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\uff1a \u4ee5 t36 = ITE(t20,0x43b8ab1b,0xa71da95e) \u8fd9\u6761\u6307\u4ee4\u4e3a\u4f8b\uff0c\u5982\u679ct20\u4e3aTrue\uff0c\u90a3\u4e48t36\u5c31\u7b49\u4e8e0x43b8ab1b\uff0c\u5982\u679ct20\u4e3aFalse\uff0c\u90a3\u4e48t36\u5c31\u7b49\u4e8e0xa71da95e\u3002\u5728symbolic_execute\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7statement\u65ad\u70b9\u5b8c\u6210\u4e86\u8fd9\u4e00\u64cd\u4f5c\uff1a def modify_ITE_cond(state): expressions = list(state.scratch.irsb.statements[state.inspect.statement].expressions) if len(expressions) != 0 and isinstance(expressions[0], pyvex.expr.ITE): state.scratch.temps[expressions[0].cond.tmp] = modify_cond state.inspect._breakpoints['statement'] = [] if modify_cond is not None: state.inspect.b('statement',when=BP_BEFORE, action=modify_ITE_cond) \u8fd9\u6837\u4fbf\u6210\u529f\u8fd8\u539f\u4e86\u771f\u5b9e\u5757\u539f\u5148\u7684\u524d\u540e\u5173\u7cfb\uff0c\u6216\u8005\u8bf4\u91cd\u5efa\u4e86\u63a7\u5236\u6d41\u3002 0x03. Patch\u7a0b\u5e8f \u6700\u540e\u4e00\u6b65\u6211\u4eec\u8981\u7b2c\u4e8c\u6b65\u4e2d\u91cd\u5efa\u7684\u63a7\u5236\u6d41Patch\u7a0b\u5e8f\uff0c\u5e76\u8f93\u51fa\u6062\u590d\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u9996\u5148\u662f\u5c06\u5b50\u5206\u53d1\u5668\u5168\u90e8Nop\u6389\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u57fa\u672c\u5757\u5728\u6211\u4eec\u91cd\u5efa\u4e4b\u540e\u7684\u63a7\u5236\u6d41\u4e2d\u4e0d\u8d77\u4efb\u4f55\u4f5c\u7528\uff1a def fill_nops(addr, size): offset = addr - base_addr content[offset:offset + size] = b'\\x90' * size base_addr = proj.loader.main_object.mapped_base with open(filename, 'rb') as file: content = bytearray(file.read()) for node in sub_dispatcher_nodes: fill_nops(node.addr, node.size) print('Fill nops from %#x to %#x' % (node.addr, node.addr + node.size)) \u5bf9\u4e8e\u6ca1\u6709\u5206\u652f\u7684\u771f\u5b9e\u5757\uff0c\u76f4\u63a5\u8ba9\u4ed6\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u540e\u7ee7\u771f\u5b9e\u5757\uff0c\u6ce8\u610f\u5165\u53e3\u5757\u8981\u505a\u4e00\u4e2a\u7279\u6b8a\u5904\u7406\uff0c\u56e0\u4e3a\u5165\u53e3\u5757\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u5e76\u4e0d\u662fjmp\u6307\u4ee4\uff0c\u6240\u4ee5\u8981\u4ece\u4e3b\u5206\u53d1\u5757\u7684\u5934\u90e8\u8fdb\u884cPatch\uff1a def fill_jmp(src, dest): offset = src - base_addr if dest != src + 5: content[offset] = 0xE9 content[offset + 1:offset + 5] = (dest - src - 5).to_bytes(4, 'little', signed=True) else: fill_nops(src, 5) for node in relevant_nodes: childs = flow[node.addr] if len(childs) == 1: patch_addr = node.addr + node.size - 5 if node.addr == prologue_node.addr: patch_addr = node.addr + node.size fill_jmp(patch_addr, childs[0]) print('Patch jmp %#x at %#x' % (childs[0], patch_addr)) \u5bf9\u4e8e\u6709\u5206\u652f\u7684\u57fa\u672c\u5757\uff0c\u5219\u6839\u636ecmov\u6307\u4ee4\u7684\u7c7b\u578b\u8fdb\u884cPatch\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8df3\u8f6c\u6307\u4ee4\u7684\u540e\u7f00\u8981\u8ddfcmov\u6307\u4ee4\u7684\u540e\u7f00\u4fdd\u6301\u4e00\u81f4\u8bfb\u8005\u5f00\u901a\u8111\u7b4b\u60f3\u4e00\u60f3\u5f88\u5bb9\u6613\u5c31\u80fd\u5f97\u51fa\u7b54\u6848\uff0c\u8fd9\u662f\u4e00\u4e2a\u903b\u8f91\u95ee\u9898\uff1a def get_jx_opcode(jx_type): ks = Ks(KS_ARCH_X86, KS_MODE_32) code, count = ks.asm(f'{jx_type} 0xFFFFFFFF') return b''.join(map(lambda x: x.to_bytes(1, sys.byteorder), code[0:2])) def fill_jx(src, dest, cmov_type): offset = src - base_addr content[offset:offset + 2] = get_jx_opcode(cmov_type.replace('cmov', 'j')) content[offset + 2:offset + 6] = (dest - src - 6).to_bytes(4, 'little', signed=True) for node in relevant_nodes: childs = flow[node.addr] if len(childs) == 1: patch_addr = node.addr + node.size - 5 if node.addr == prologue_node.addr: patch_addr = node.addr + node.size fill_jmp(patch_addr, childs[0]) print('Patch jmp %#x at %#x' % (childs[0], patch_addr)) elif len(childs) == 2: patch_addr = patch_addrs[node.addr] cmov_type = cmov_types[node.addr] fill_nops(patch_addr, node.addr + node.size - patch_addr) fill_jx(patch_addr, childs[0], cmov_type) fill_jmp(patch_addr + 6, childs[1]) print('Patch jz %#x at %#x' % (childs[0], patch_addr)) print('Patch jmp %#x at %#x' % (childs[1], patch_addr + 6)) \u6700\u540e\u518d\u5199\u5165\u5230\u65b0\u7684\u6587\u4ef6\uff1a with open(args.out, 'wb') as file: file.write(content) 0x04. \u68c0\u9a8c\u53cd\u6df7\u6dc6\u6548\u679c \u6700\u540e\u7528\u4e4b\u524d\u7684\u5b9e\u4f8b\u7a0b\u5e8f\u6765\u68c0\u9a8c\u811a\u672c\u7684\u53cd\u6df7\u6dc6\u6548\u679c\uff0c\u5bf9main\u51fd\u6570\u548cencrypt\u51fd\u6570\u8fdb\u884c\u53cd\u6df7\u6dc6\uff1a python deflat.py -f samples/TestProgram_fla -s 4009A0 -o samples/dump python deflat.py -f samples/dump -s 400680 -o samples/dump \u6062\u590d\u4e4b\u540e\u7684main\u51fd\u6570\u548cencrypt\u51fd\u6570\u7684\u63a7\u5236\u6d41\uff1a \u6062\u590d\u4e4b\u540e\u7684\u4f2a\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\u539f\u7a0b\u5e8f\u7684\u903b\u8f91\u5df2\u7ecf\u57fa\u672c\u6062\u590d\u6b63\u5e38\u4e86\uff1a \u5b9e\u9645\u8fd0\u884c\u4e5f\u6ca1\u6709\u9519\u8bef\uff1a 0x05. \u5b8c\u6574\u4ee3\u7801 from collections import defaultdict import angr from angr.state_plugins.inspect import BP_BEFORE from angrmanagement.utils.graph import to_supergraph import argparse import sys import claripy import logging import pyvex from keystone import * logging.getLogger('angr.storage.memory_mixins.default_filler_mixin').setLevel(logging.ERROR) def get_cfg(): cfg = proj.analyses.CFGFast(normalize=True, force_complete_scan=False) function_cfg = cfg.functions.get(start).transition_graph super_cfg = to_supergraph(function_cfg) return super_cfg def analyse_blocks(): retn_nodes = [] for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node elif cfg.out_degree(node) == 0: retn_nodes.append(node) main_dispatcher_node = list(cfg.successors(prologue_node))[0] for node in cfg.predecessors(main_dispatcher_node): if node.addr != prologue_node.addr: predispatcher_node = node break relevant_nodes = [prologue_node] sub_dispatcher_nodes = [] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) elif node != prologue_node and node not in retn_nodes: sub_dispatcher_nodes.append(node) return prologue_node, main_dispatcher_node, sub_dispatcher_nodes, retn_nodes, relevant_nodes, predispatcher_node def preprocess(block_addr): block = proj.factory.block(block_addr) has_branch = False for insn in block.capstone.insns: if insn.mnemonic == 'call': proj.hook(insn.address, hook=lambda state : proj.unhook(state.addr), length=5) print('Hook [%s\\t%s] at %#x' % (insn.mnemonic, insn.op_str, insn.address)) elif insn.mnemonic.startswith('cmov'): has_branch = True patch_addrs[block_addr] = insn.address cmov_types[block_addr] = insn.mnemonic return has_branch def symbolic_execute(block_addr, modify_cond=None): def modify_ITE_cond(state): expressions = list(state.scratch.irsb.statements[state.inspect.statement].expressions) if len(expressions) != 0 and isinstance(expressions[0], pyvex.expr.ITE): state.scratch.temps[expressions[0].cond.tmp] = modify_cond state.inspect._breakpoints['statement'] = [] state = proj.factory.blank_state(addr=block_addr, remove_options={ angr.sim_options.LAZY_SOLVES}) if modify_cond is not None: state.inspect.b('statement',when=BP_BEFORE, action=modify_ITE_cond) simgr = proj.factory.simgr(state) simgr.step() while len(simgr.active): for active in simgr.active: if active.addr in relevant_addrs: flow[block_addr].append(active.addr) return simgr.step() print('Error at block %#x' % block_addr) def fill_nops(addr, size): offset = addr - base_addr content[offset:offset + size] = b'\\x90' * size def fill_jmp(src, dest): offset = src - base_addr if dest != src + 5: content[offset] = 0xE9 content[offset + 1:offset + 5] = (dest - src - 5).to_bytes(4, 'little', signed=True) else: fill_nops(src, 5) def get_jx_opcode(jx_type): ks = Ks(KS_ARCH_X86, KS_MODE_32) code, count = ks.asm(f'{jx_type} 0xFFFFFFFF') return b''.join(map(lambda x: x.to_bytes(1, sys.byteorder), code[0:2])) def fill_jx(src, dest, cmov_type): offset = src - base_addr content[offset:offset + 2] = get_jx_opcode(cmov_type.replace('cmov', 'j')) content[offset + 2:offset + 6] = (dest - src - 6).to_bytes(4, 'little', signed=True) if __name__ == '__main__': parser = argparse.ArgumentParser(description='Deobfuscate OLLVM Control Flow Flatten') parser.add_argument('-f', '--file', help='binary to deobfuscate') parser.add_argument('-s', '--start', help='start address of the deobfuscation') parser.add_argument('-o', '--out', help='output file path') args = parser.parse_args() if args.file is None or args.start is None or args.out is None: parser.print_help() sys.exit(0) filename = args.file # \u6587\u4ef6\u540d start = int(args.start, 16) # \u8d77\u59cb\u5730\u5740 # load_options={'auto_load_libs': False} # \u907f\u514d\u751f\u6210cfg\u65f6\u89e3\u6790\u5230\u5171\u4eab\u5e93\u7684\u51fd\u6570 proj = angr.Project(filename, load_options={'auto_load_libs': False}) # \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u51fd\u6570CFG\uff08\u7c7b\u4f3c\u4e8eIDA\u7684CFG\uff09 # \u5206\u6790CFG\u5f97\u5230\u5165\u53e3\u5757\uff08\u5e8f\u8a00\uff09\u3001\u4e3b\u5206\u53d1\u5668\u3001\u8fd4\u56de\u5757\u3001\u771f\u5b9e\u5757\u3001\u9884\u5206\u53d1\u5757 print('**************** Step-1 Static Analysis(1/3) ****************') cfg = get_cfg() prologue_node, main_dispatcher_node, sub_dispatcher_nodes, retn_nodes, relevant_nodes, predispatcher_node = analyse_blocks() print('Prologue block at %#x' % prologue_node.addr) print('Main dispatcher block at %#x' % main_dispatcher_node.addr) print('Sub dispatcher blocks at ', [hex(node.addr) for node in sub_dispatcher_nodes]) print('Return blocks at ', [hex(node.addr) for node in retn_nodes]) print('Relevant blocks at ', [hex(node.addr) for node in relevant_nodes]) print('Predispatcher blocks at %#x' % predispatcher_node.addr) # \u7b2c\u4e8c\u6b65\uff1a\u6062\u590d\u771f\u5b9e\u5757\u524d\u540e\u5173\u7cfb\uff0c\u91cd\u5efa\u63a7\u5236\u6d41 # \u4ece\u4e00\u4e2a\u771f\u5b9e\u5757\u5f00\u59cb\u7b26\u53f7\u6267\u884c # \u5982\u679c\u6ca1\u6709\u5206\u652f\uff0c\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u5230\u8fbe\u7684\u771f\u5b9e\u5757 # \u5982\u679c\u6709\u5206\u652f\uff0c\u6761\u4ef6\u4e3aTrue\u65f6\u5230\u8fbe\u7684\u771f\u5b9e\u5757\u548c\u6761\u4ef6\u4e3aFalse\u65f6\u5230\u8fbe\u7684\u771f\u5b9e\u5757 print('**************** Step-2 Recover Control Flow(2/3) ****************') relevant_addrs = [node.addr for node in relevant_nodes] relevant_addrs += [node.addr for node in retn_nodes] patch_addrs = {} cmov_types = {} flow = defaultdict(list) for node in relevant_nodes: block_addr = node.addr has_branch = preprocess(block_addr) if has_branch: symbolic_execute(block_addr, modify_cond=claripy.BVV(1, 1)) symbolic_execute(block_addr, modify_cond=claripy.BVV(0, 1)) else: symbolic_execute(block_addr) for node in relevant_nodes: block_addr = node.addr print('Real successors of block %#x: ' % block_addr, [hex(child) for child in flow[block_addr]]) # \u7b2c\u4e09\u6b65\uff1aPatch\u7a0b\u5e8f\uff0c\u8f93\u51fa\u6062\u590d\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6 print('**************** Step-3 Patch Binary(3/3) ****************') base_addr = proj.loader.main_object.mapped_base with open(filename, 'rb') as file: content = bytearray(file.read()) for node in sub_dispatcher_nodes: fill_nops(node.addr, node.size) print('Fill nops from %#x to %#x' % (node.addr, node.addr + node.size)) for node in relevant_nodes: childs = flow[node.addr] if len(childs) == 1: patch_addr = node.addr + node.size - 5 if node.addr == prologue_node.addr: patch_addr = node.addr + node.size fill_jmp(patch_addr, childs[0]) print('Patch jmp %#x at %#x' % (childs[0], patch_addr)) elif len(childs) == 2: patch_addr = patch_addrs[node.addr] cmov_type = cmov_types[node.addr] fill_nops(patch_addr, node.addr + node.size - patch_addr) fill_jx(patch_addr, childs[0], cmov_type) fill_jmp(patch_addr + 6, childs[1]) print('Patch jz %#x at %#x' % (childs[0], patch_addr)) print('Patch jmp %#x at %#x' % (childs[1], patch_addr + 6)) else: print('Error') sys.exit(-1) with open(args.out, 'wb') as file: file.write(content)","title":"10 \u5229\u7528angr\u7b26\u53f7\u6267\u884c\u53bb\u9664\u63a7\u5236\u6d41\u5e73\u5766\u5316"},{"location":"angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/#0x00","text":"\u8fd8\u662f\u6309\u7167\u60ef\u4f8b\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u8fdb\u884c\u8bb2\u89e3\uff1a #include <cstdio> #include <cstring> #include <cstdlib> char input[100] = {0}; char enc[100] = \"\\x86\\x8a\\x7d\\x87\\x93\\x8b\\x4d\\x81\\x80\\x8a\\x43\\x7f\\x86\\x4b\\x84\\x7f\\x51\\x90\\x7f\\x62\\x2b\\x6d\\x2c\\x91\"; void encrypt(unsigned char *dest, char *src){ int len = strlen(src); for(int i = 0;i < len;i ++){ dest[i] = (src[i] + (32 - i)) ^ i; } } // flag{s1mpl3_v3x_1r_d3m0} int main(){ printf(\"Please input your flag: \"); scanf(\"%s\", input); if(strlen(input) != 24){ printf(\"Wrong length!\\n\"); exit(0); } unsigned char dest[100] = {0}; encrypt(dest, input); if(!memcmp(dest, enc, 24)){ printf(\"Congratulations~\\n\"); }else{ printf(\"Sorry try again.\\n\"); } } \u5728Ubuntu\u4e0b\u7f16\u8bd1\u6b63\u5e38\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a clang TestProgram.cpp -o TestProgram \u7f16\u8bd1\u63a7\u5236\u6d41\u5e73\u5766\u5316\u6df7\u6dc6\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a clang -mllvm -fla -mllvm -split -mllvm -split_num=3 TestProgram.cpp -o TestProgram_fla \u5728IDA\u4e2d\u6253\u5f00\u8fd9\u4e24\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u9996\u5148\u662f\u6b63\u5e38\u7684\u53ef\u6267\u884c\u6587\u4ef6TestProgram\uff0cCFG\u7684\u903b\u8f91\u6bd4\u8f83\u6e05\u6670\u6613\u61c2\uff1a \u518d\u770b\u770b\u63a7\u5236\u6d41\u5e73\u5766\u5316\u6df7\u6dc6\u540e\u7684CFG\uff0c\u867d\u7136\u7a0b\u5e8f\u903b\u8f91\u5df2\u7ecf\u88ab\u6df7\u6dc6\u4e86\uff0c\u4f46\u5176\u7ed3\u6784\u8fd8\u662f\u6709\u89c4\u5f8b\u53ef\u5faa\u7684\uff1a \u63a7\u5236\u6d41\u5e73\u5766\u5316\u540e\u7684CFG\u4e2d\u7684\u57fa\u672c\u5757\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff0c\u8fd9\u51e0\u7c7b\u57fa\u672c\u5757\u7684\u542b\u4e49\u8bfb\u8005\u53ef\u4ee5\u9605\u8bfb\u817e\u8baf\u5e94\u6025\u54cd\u5e94\u5b9e\u9a8c\u5ba4\u7684\u90a3\u7bc7\u535a\u5ba2\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff1a \u603b\u7ed3\u6765\u8bf4\uff0c\u5229\u7528angr\u7b26\u53f7\u6267\u884c\u53bb\u9664\u63a7\u5236\u6d41\u5e73\u5766\u5316\u7684\u6b65\u9aa4\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4e09\u4e2a\u6b65\u9aa4\uff1a \u9759\u6001\u5206\u6790CFG\u5f97\u5230\u5e8f\u8a00/\u5165\u53e3\u5757\uff08Prologue\uff09\u3001\u4e3b\u5206\u53d1\u5668\uff08Main dispatcher\uff09\u3001\u5b50\u5206\u53d1\u5668/\u65e0\u7528\u5757\uff08Sub dispatchers\uff09\u3001\u771f\u5b9e\u5757\uff08Relevant blocks\uff09\u3001\u9884\u5206\u53d1\u5668\uff08Predispatcher\uff09\u548c\u8fd4\u56de\u5757\uff08Return\uff09 \u5229\u7528\u7b26\u53f7\u6267\u884c\u6062\u590d\u771f\u5b9e\u5757\u7684\u524d\u540e\u5173\u7cfb\uff0c\u91cd\u5efa\u63a7\u5236\u6d41 \u6839\u636e\u7b2c\u4e8c\u6b65\u91cd\u5efa\u7684\u63a7\u5236\u6d41Patch\u7a0b\u5e8f\uff0c\u8f93\u51fa\u6062\u590d\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6","title":"0x00. \u521d\u6b65\u5206\u6790"},{"location":"angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/#0x01-cfg","text":"\u6574\u4e2a\u7a0b\u5e8f\u7684CFG\u53ef\u4ee5\u901a\u8fc7CFGFast\u51fd\u6570\u5f97\u5230\uff1a cfg = proj.analyses.CFGFast(normalize=True, force_complete_scan=False) \u4f46angr\u7684CFG\u4f1a\u5c06call\u6307\u4ee4\u4e5f\u89c6\u4e3a\u8df3\u8f6c\u7684\u4e00\u79cd\uff0c\u4f5c\u4e3a\u57fa\u672c\u5757\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\uff0c\u800cIDA\u4e2d\u53ea\u4f1a\u5c06jmp\u4e00\u7c7b\u7684\u6307\u4ee4\u4ee5\u53caret\u548ccall exit\u4f5c\u4e3a\u57fa\u672c\u5757\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\uff0c\u5e76\u4e14IDA\u4e2d\u7684CFG\u662f\u4ee5\u51fd\u6570\u4e3a\u5355\u4f4d\u7684\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u7a0b\u5e8f\uff1a \u6240\u4ee5\u6211\u4eec\u8981\u901a\u8fc7angrmangement\u4e2d\u7684to_supergraph\u51fd\u6570\u5c06angr\u7684CFG\u5355\u4e2a\u51fd\u6570\u7684CFG\uff0c\u518d\u8f6c\u5316\u4e3a\u7c7b\u4f3cIDA\u7684CFG\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a def get_cfg(): cfg = proj.analyses.CFGFast(normalize=True, force_complete_scan=False) function_cfg = cfg.functions.get(start).transition_graph super_cfg = to_supergraph(function_cfg) return super_cfg \u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u7c7b\u4f3cIDA\u7684CFG\uff0c\u63a5\u7740\u6211\u4eec\u8981\u901a\u8fc7\u5206\u6790\u5e73\u5766\u5316\u540e\u7684\u63a7\u5236\u6d41\u7684\u7ed3\u6784\u89c4\u5f8b\u6765\u8bc6\u522b\u51fa\u5404\u7c7b\u578b\u7684\u57fa\u672c\u5757\uff0c\u8bc6\u522b\u65b9\u6cd5\u5982\u4e0b\uff1a \u5e8f\u8a00/\u5165\u53e3\u5757\uff08Prologue\uff09\uff1a\u6ca1\u6709\u524d\u9a71\u5757\u7684\u57fa\u672c\u5757\u5373\u662f\u5165\u53e3\u5757 for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node \u8fd4\u56de\u5757\uff08Return\uff09\uff1a\u6ca1\u6709\u540e\u7ee7\u5757\u7684\u57fa\u672c\u5757\u5373\u662f\u8fd4\u56de\u5757\uff0c\u8fd4\u56de\u5757\u53ef\u80fd\u6709\u591a\u4e2a retn_nodes = [] for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node elif cfg.out_degree(node) == 0: retn_nodes.append(node) \u4e3b\u5206\u53d1\u5668\uff08Main dispatcher\uff09\uff1a\u5165\u53e3\u5757\u7684\u540e\u7ee7\u5757\u5373\u4e3a\u4e3b\u5206\u53d1\u5668 main_dispatcher_node = list(cfg.successors(prologue_node))[0] \u9884\u5206\u53d1\u5668\uff08Predispatcher\uff09\uff1a\u4e3b\u5206\u53d1\u5668\u7684\u524d\u9a71\u5757\uff0c\u4e14\u4e0d\u4e3a\u5165\u53e3\u5757 for node in cfg.predecessors(main_dispatcher_node): if node.addr != prologue_node.addr: predispatcher_node = node break \u771f\u5b9e\u5757\uff08Relevant blocks\uff09\uff1a\u9884\u5206\u53d1\u5668\u7684\u524d\u9a71\u5757\uff0c\u4e3a\u4e86\u540e\u7eed\u5904\u7406\u65b9\u4fbf\uff0c\u8fd9\u91cc\u4e5f\u628a\u5165\u53e3\u5757\u7b97\u4f5c\u771f\u5b9e\u5757 relevant_nodes = [prologue_node] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) \u5b50\u5206\u53d1\u5668/\u65e0\u7528\u5757\uff08Sub dispatchers\uff09\uff1a\u9664\u4e0a\u8ff0\u57fa\u672c\u5757\u4e4b\u5916\u7684\u57fa\u672c\u5757\u90fd\u4e3a\u5b50\u5206\u53d1\u5668\uff0c\u56e0\u4e3a\u5b50\u5206\u53d1\u5668\u518d\u6062\u590d\u4e4b\u540e\u7684\u63a7\u5236\u6d41\u4e2d\u4e0d\u8d77\u4efb\u4f55\u4f5c\u7528\uff0c\u6240\u4ee5\u4e5f\u53eb\u4f5c\u65e0\u7528\u5757\uff0c\u4e4b\u540e\u8981\u88abNop\u6389 relevant_nodes = [prologue_node] sub_dispatcher_nodes = [] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) elif node != prologue_node and node not in retn_nodes: sub_dispatcher_nodes.append(node) \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a def analyse_blocks(): retn_nodes = [] for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node elif cfg.out_degree(node) == 0: retn_nodes.append(node) main_dispatcher_node = list(cfg.successors(prologue_node))[0] for node in cfg.predecessors(main_dispatcher_node): if node.addr != prologue_node.addr: predispatcher_node = node break relevant_nodes = [prologue_node] sub_dispatcher_nodes = [] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) elif node != prologue_node and node not in retn_nodes: sub_dispatcher_nodes.append(node) return prologue_node, main_dispatcher_node, sub_dispatcher_nodes, retn_nodes, relevant_nodes, predispatcher_node","title":"0x01. \u9759\u6001\u5206\u6790CFG"},{"location":"angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/#0x02","text":"\u5728\u8fd9\u4e00\u6b65\u4e2d\u6211\u4eec\u8981\u901a\u8fc7\u7b26\u53f7\u6267\u884c\u6765\u786e\u5b9a\u771f\u5b9e\u5757\u4e4b\u95f4\u7684\u524d\u540e\u5173\u7cfb\uff0c\u771f\u5b9e\u5757\u4e4b\u95f4\u7684\u524d\u540e\u5173\u7cfb\u53c8\u5206\u4e3a\u4e24\u7c7b\uff1a \u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u540e\u7ee7\u5757 \u6709\u4e24\u4e2a\u540e\u7ee7\u5757\uff0c\u8df3\u8f6c\u5230\u54ea\u4e2a\u7531\u67d0\u4e2a\u6761\u4ef6\u51b3\u5b9a \u7b2c\u4e00\u79cd\u60c5\u51b5\u975e\u5e38\u597d\u5904\u7406\uff0c\u6211\u4eec\u4ece\u4e00\u4e2a\u771f\u5b9e\u5757A\u5f00\u59cb\u7b26\u53f7\u6267\u884c\uff0c\u76f4\u5230\u78b0\u5230\u4e0b\u4e00\u4e2a\u771f\u5b9e\u5757B\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u786e\u5b9a\u4e86\u4e00\u5bf9\u57fa\u672c\u5757\u7684\u6267\u884c\u987a\u5e8fA\u2192B\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u6211\u4eec\u9700\u8981\u5148\u4ee4\u8be5\u6761\u4ef6\u4e3aTrue\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0c\u5f97\u5230\u4e00\u4e2a\u540e\u7ee7\u771f\u5b9e\u5757\u7684\u5730\u5740\uff1b\u518d\u4ee4\u6761\u4ef6\u4e3aFalse\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u6267\u884c\uff0c\u5f97\u5230\u53e6\u4e00\u4e2a\u540e\u7ee7\u771f\u5b9e\u5757\u7684\u5730\u5740\u3002\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u4ee3\u7801\u5199\u8d77\u6765\u4f1a\u7a0d\u5fae\u6709\u70b9\u590d\u6742\u3002 \u6709\u4e00\u4e2a\u786e\u5b9a\u540e\u7ee7\u5757\u7684\u771f\u5b9e\u5757\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u8fd9\u7c7b\u57fa\u672c\u5757\u4f1a\u5728\u672b\u5c3e\u4fee\u6539switch\u53d8\u91cf\u7684\u503c\uff0c\u5728\u4e0b\u4e00\u6b21\u8fdb\u5165\u5206\u53d1\u5668\u65f6\u5c31\u80fd\u8fbe\u5230\u53e6\u4e00\u4e2a\u771f\u5b9e\u5757\uff1a \u8fd9\u7c7b\u5219\u662f\u5177\u6709\u4e24\u4e2a\u53ef\u80fd\u540e\u7ee7\u5757\u7684\u771f\u5b9e\u5757\uff0ccmovnz\u6709\u70b9\u7c7b\u4f3cjnz\u6307\u4ee4\uff0c\u4f1a\u5728ZF\u4e3a0\u65f6\u6267\u884cmov eax, ecx\u64cd\u4f5c\uff0c\u800cZF\u4e3a1\u65f6\u4e0d\u505a\u5904\u7406\u3002\u6240\u6709\u8fd9\u7c7b\u771f\u5b9e\u5757\u90fd\u5305\u542bcmovnz\u6216cmovz\u6307\u4ee4\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u7279\u5f81\u5224\u5b9a\u771f\u5b9e\u5757\u662f\u5177\u6709\u5206\u652f\uff1a \u7b2c\u4e8c\u6b65\u7684\u4ee3\u7801\u5982\u4e0b\uff1a relevant_addrs = [node.addr for node in relevant_nodes] relevant_addrs += [node.addr for node in retn_nodes] patch_addrs = {} cmov_types = {} flow = defaultdict(list) for node in relevant_nodes: block_addr = node.addr has_branch = preprocess(block_addr) if has_branch: symbolic_execute(block_addr, modify_cond=claripy.BVV(1, 1)) symbolic_execute(block_addr, modify_cond=claripy.BVV(0, 1)) else: symbolic_execute(block_addr) for node in relevant_nodes: block_addr = node.addr print('Real successors of block %#x: ' % block_addr, [hex(child) for child in flow[block_addr]]) relevant_addrs\u6b64\u65f6\u5305\u542b\u5165\u53e3\u5757\u3001\u771f\u5b9e\u5757\u4ee5\u53ca\u8fd4\u56de\u5757\u7684\u5730\u5740\uff0c\u5f53\u6211\u4eec\u4ece\u4e00\u4e2a\u771f\u5b9e\u5757\u51fa\u53d1\uff08\u4e0d\u5305\u542b\u8fd4\u56de\u5757\uff09\u78b0\u5230relevant_addrs\u4e2d\u7684\u5730\u5740\u65f6\uff0c\u5c31\u8fd8\u539f\u4e86\u4e00\u5bf9\u771f\u5b9e\u5757\u7684\u524d\u540e\u5173\u7cfb patch_addrs\u4fdd\u5b58\u771f\u5b9e\u5757\u4e2dcmov\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4ee5\u4fbf\u7b2c\u4e09\u6b65\u8fdb\u884cPatch cmov_types\u4fdd\u5b58\u771f\u5b9e\u5757\u4e2dcmov\u6307\u4ee4\u7684\u7c7b\u578b\uff0c\u6bd4\u5982cmovz\u3001cmovnz\u7b49 flow\u521b\u5efa\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7c7b\u578b\u4e3alist\u7684dict\uff0c\u4fdd\u5b58\u771f\u5b9e\u5757\u7684\u540e\u7ee7\u5757\u5730\u5740 preprocess\u5bf9\u771f\u5b9e\u5757\u4e2d\u7684call\u6307\u4ee4\u8fdb\u884chook\uff0c\u56e0\u4e3a\u8fd9\u4e9bcall\u6307\u4ee4\u5bf9\u63a5\u4e0b\u6765\u7684\u7b26\u53f7\u6267\u884c\u5b8c\u5168\u6ca1\u6709\u4f5c\u7528\uff1b\u53e6\u5916\u6839\u636e\u6709\u65e0cmov\u6307\u4ee4\u5224\u65ad\u6539\u771f\u5b9e\u5757\u662f\u5426\u6709\u5206\u652f\u4ee5\u53ca\u8bb0\u5f55cmov\u6307\u4ee4\u7684\u5730\u5740\u548c\u7c7b\u578b\uff1a def preprocess(block_addr): block = proj.factory.block(block_addr) has_branch = False for insn in block.capstone.insns: if insn.mnemonic == 'call': proj.hook(insn.address, hook=lambda state : proj.unhook(state.addr), length=5) print('Hook [%s\\t%s] at %#x' % (insn.mnemonic, insn.op_str, insn.address)) elif insn.mnemonic.startswith('cmov'): has_branch = True patch_addrs[block_addr] = insn.address cmov_types[block_addr] = insn.mnemonic return has_branch \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u5f53\u524d\u771f\u5b9e\u5757\u6ca1\u6709\u5206\u652f\uff0c\u5219symbolic_execute\u4ece\u4e00\u4e2a\u771f\u5b9e\u5757\u5f00\u59cb\u7b26\u53f7\u6267\u884c\uff0c\u76f4\u5230\u78b0\u5230\u4e0b\u4e00\u4e2a\u771f\u5b9e\u5757\uff0c\u5f80flow\u4e2d\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u771f\u5b9e\u5757\u7684\u5730\u5740\uff1a def symbolic_execute(block_addr, modify_cond=None): simgr = proj.factory.simgr(state) simgr.step() while len(simgr.active): for active in simgr.active: if active.addr in relevant_addrs: flow[block_addr].append(active.addr) return simgr.step() print('Error at block %#x' % block_addr) \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a\u5f53\u524d\u771f\u5b9e\u5757\u6709\u5206\u652f\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4ee4\u5206\u652f\u7684\u6761\u4ef6\u5206\u522b\u4e3aTrue\u548cFalse\u7b26\u53f7\u6267\u884c\u4e24\u6b21\uff0c\u5206\u522b\u5f97\u5230\u4e24\u4e2a\u540e\u7ee7\u771f\u5b9e\u5757\u7684\u5730\u5740\uff1a def symbolic_execute(block_addr, modify_cond=None): def modify_ITE_cond(state): expressions = list(state.scratch.irsb.statements[state.inspect.statement].expressions) if len(expressions) != 0 and isinstance(expressions[0], pyvex.expr.ITE): state.scratch.temps[expressions[0].cond.tmp] = modify_cond state.inspect._breakpoints['statement'] = [] state = proj.factory.blank_state(addr=block_addr, remove_options={ angr.sim_options.LAZY_SOLVES}) if modify_cond is not None: state.inspect.b('statement',when=BP_BEFORE, action=modify_ITE_cond) simgr = proj.factory.simgr(state) simgr.step() while len(simgr.active): for active in simgr.active: if active.addr in relevant_addrs: flow[block_addr].append(active.addr) return simgr.step() print('Error at block %#x' % block_addr) \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7statement\u65ad\u70b9\u76d1\u63a7\u4e86VEX IR\u4e2d\u7684ITE\u6307\u4ee4\uff0c\u901a\u8fc7\u4fee\u6539ITE\u6307\u4ee4\u4e2d\u7684\u4e34\u65f6\u53d8\u91cf\u6539\u53d8\u4e86\u7b26\u53f7\u6267\u884c\u7684\u72b6\u6001\uff0cITE\u6307\u4ee4\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u4e2d\u7684\u4e09\u5143\u8fd0\u7b97\u7b26\uff1a \u5199\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6253\u5370\u4e00\u4e0bVEX IR\uff0c\u5bf9\u6bd4ITE\u6307\u4ee4\u4e0e\u539f\u6307\u4ee4\u7684\u5bf9\u5e94\u5173\u7cfb\uff1a import angr proj = angr.Project('TestProgram_fla') block = proj.factory.block(0x4008A8) block.vex.pp() \u8f93\u51fa\uff1a 00 | ------ IMark(0x4008a8, 5, 0) ------ ... 16 | ------ IMark(0x4008b8, 3, 0) ------ 17 | t34 = And64(t13,0x00000000000000ff) 18 | t33 = CmpNE64(t34,0x0000000000000000) 19 | t32 = 1Uto64(t33) 20 | t25 = t32 21 | t35 = 64to1(t25) 22 | t20 = t35 23 | t36 = ITE(t20,0x43b8ab1b,0xa71da95e) 24 | t19 = t36 25 | t37 = 32Uto64(t19) 26 | t18 = t37 27 | PUT(rax) = t18 28 | PUT(rip) = 0x00000000004008bb 29 | ------ IMark(0x4008bb, 3, 0) ------ ... } \u53ef\u4ee5\u770b\u5230VEX IR\u7528\u5305\u62ecITE\u5728\u5185\u7684\u591a\u6761\u6307\u4ee4\u8868\u793a\u4e86cmovnz\u8fd9\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\uff1a \u4ee5 t36 = ITE(t20,0x43b8ab1b,0xa71da95e) \u8fd9\u6761\u6307\u4ee4\u4e3a\u4f8b\uff0c\u5982\u679ct20\u4e3aTrue\uff0c\u90a3\u4e48t36\u5c31\u7b49\u4e8e0x43b8ab1b\uff0c\u5982\u679ct20\u4e3aFalse\uff0c\u90a3\u4e48t36\u5c31\u7b49\u4e8e0xa71da95e\u3002\u5728symbolic_execute\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7statement\u65ad\u70b9\u5b8c\u6210\u4e86\u8fd9\u4e00\u64cd\u4f5c\uff1a def modify_ITE_cond(state): expressions = list(state.scratch.irsb.statements[state.inspect.statement].expressions) if len(expressions) != 0 and isinstance(expressions[0], pyvex.expr.ITE): state.scratch.temps[expressions[0].cond.tmp] = modify_cond state.inspect._breakpoints['statement'] = [] if modify_cond is not None: state.inspect.b('statement',when=BP_BEFORE, action=modify_ITE_cond) \u8fd9\u6837\u4fbf\u6210\u529f\u8fd8\u539f\u4e86\u771f\u5b9e\u5757\u539f\u5148\u7684\u524d\u540e\u5173\u7cfb\uff0c\u6216\u8005\u8bf4\u91cd\u5efa\u4e86\u63a7\u5236\u6d41\u3002","title":"0x02. \u91cd\u5efa\u63a7\u5236\u6d41"},{"location":"angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/#0x03-patch","text":"\u6700\u540e\u4e00\u6b65\u6211\u4eec\u8981\u7b2c\u4e8c\u6b65\u4e2d\u91cd\u5efa\u7684\u63a7\u5236\u6d41Patch\u7a0b\u5e8f\uff0c\u5e76\u8f93\u51fa\u6062\u590d\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u9996\u5148\u662f\u5c06\u5b50\u5206\u53d1\u5668\u5168\u90e8Nop\u6389\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u57fa\u672c\u5757\u5728\u6211\u4eec\u91cd\u5efa\u4e4b\u540e\u7684\u63a7\u5236\u6d41\u4e2d\u4e0d\u8d77\u4efb\u4f55\u4f5c\u7528\uff1a def fill_nops(addr, size): offset = addr - base_addr content[offset:offset + size] = b'\\x90' * size base_addr = proj.loader.main_object.mapped_base with open(filename, 'rb') as file: content = bytearray(file.read()) for node in sub_dispatcher_nodes: fill_nops(node.addr, node.size) print('Fill nops from %#x to %#x' % (node.addr, node.addr + node.size)) \u5bf9\u4e8e\u6ca1\u6709\u5206\u652f\u7684\u771f\u5b9e\u5757\uff0c\u76f4\u63a5\u8ba9\u4ed6\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u540e\u7ee7\u771f\u5b9e\u5757\uff0c\u6ce8\u610f\u5165\u53e3\u5757\u8981\u505a\u4e00\u4e2a\u7279\u6b8a\u5904\u7406\uff0c\u56e0\u4e3a\u5165\u53e3\u5757\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u5e76\u4e0d\u662fjmp\u6307\u4ee4\uff0c\u6240\u4ee5\u8981\u4ece\u4e3b\u5206\u53d1\u5757\u7684\u5934\u90e8\u8fdb\u884cPatch\uff1a def fill_jmp(src, dest): offset = src - base_addr if dest != src + 5: content[offset] = 0xE9 content[offset + 1:offset + 5] = (dest - src - 5).to_bytes(4, 'little', signed=True) else: fill_nops(src, 5) for node in relevant_nodes: childs = flow[node.addr] if len(childs) == 1: patch_addr = node.addr + node.size - 5 if node.addr == prologue_node.addr: patch_addr = node.addr + node.size fill_jmp(patch_addr, childs[0]) print('Patch jmp %#x at %#x' % (childs[0], patch_addr)) \u5bf9\u4e8e\u6709\u5206\u652f\u7684\u57fa\u672c\u5757\uff0c\u5219\u6839\u636ecmov\u6307\u4ee4\u7684\u7c7b\u578b\u8fdb\u884cPatch\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8df3\u8f6c\u6307\u4ee4\u7684\u540e\u7f00\u8981\u8ddfcmov\u6307\u4ee4\u7684\u540e\u7f00\u4fdd\u6301\u4e00\u81f4\u8bfb\u8005\u5f00\u901a\u8111\u7b4b\u60f3\u4e00\u60f3\u5f88\u5bb9\u6613\u5c31\u80fd\u5f97\u51fa\u7b54\u6848\uff0c\u8fd9\u662f\u4e00\u4e2a\u903b\u8f91\u95ee\u9898\uff1a def get_jx_opcode(jx_type): ks = Ks(KS_ARCH_X86, KS_MODE_32) code, count = ks.asm(f'{jx_type} 0xFFFFFFFF') return b''.join(map(lambda x: x.to_bytes(1, sys.byteorder), code[0:2])) def fill_jx(src, dest, cmov_type): offset = src - base_addr content[offset:offset + 2] = get_jx_opcode(cmov_type.replace('cmov', 'j')) content[offset + 2:offset + 6] = (dest - src - 6).to_bytes(4, 'little', signed=True) for node in relevant_nodes: childs = flow[node.addr] if len(childs) == 1: patch_addr = node.addr + node.size - 5 if node.addr == prologue_node.addr: patch_addr = node.addr + node.size fill_jmp(patch_addr, childs[0]) print('Patch jmp %#x at %#x' % (childs[0], patch_addr)) elif len(childs) == 2: patch_addr = patch_addrs[node.addr] cmov_type = cmov_types[node.addr] fill_nops(patch_addr, node.addr + node.size - patch_addr) fill_jx(patch_addr, childs[0], cmov_type) fill_jmp(patch_addr + 6, childs[1]) print('Patch jz %#x at %#x' % (childs[0], patch_addr)) print('Patch jmp %#x at %#x' % (childs[1], patch_addr + 6)) \u6700\u540e\u518d\u5199\u5165\u5230\u65b0\u7684\u6587\u4ef6\uff1a with open(args.out, 'wb') as file: file.write(content)","title":"0x03. Patch\u7a0b\u5e8f"},{"location":"angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/#0x04","text":"\u6700\u540e\u7528\u4e4b\u524d\u7684\u5b9e\u4f8b\u7a0b\u5e8f\u6765\u68c0\u9a8c\u811a\u672c\u7684\u53cd\u6df7\u6dc6\u6548\u679c\uff0c\u5bf9main\u51fd\u6570\u548cencrypt\u51fd\u6570\u8fdb\u884c\u53cd\u6df7\u6dc6\uff1a python deflat.py -f samples/TestProgram_fla -s 4009A0 -o samples/dump python deflat.py -f samples/dump -s 400680 -o samples/dump \u6062\u590d\u4e4b\u540e\u7684main\u51fd\u6570\u548cencrypt\u51fd\u6570\u7684\u63a7\u5236\u6d41\uff1a \u6062\u590d\u4e4b\u540e\u7684\u4f2a\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\u539f\u7a0b\u5e8f\u7684\u903b\u8f91\u5df2\u7ecf\u57fa\u672c\u6062\u590d\u6b63\u5e38\u4e86\uff1a \u5b9e\u9645\u8fd0\u884c\u4e5f\u6ca1\u6709\u9519\u8bef\uff1a","title":"0x04. \u68c0\u9a8c\u53cd\u6df7\u6dc6\u6548\u679c"},{"location":"angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/#0x05","text":"from collections import defaultdict import angr from angr.state_plugins.inspect import BP_BEFORE from angrmanagement.utils.graph import to_supergraph import argparse import sys import claripy import logging import pyvex from keystone import * logging.getLogger('angr.storage.memory_mixins.default_filler_mixin').setLevel(logging.ERROR) def get_cfg(): cfg = proj.analyses.CFGFast(normalize=True, force_complete_scan=False) function_cfg = cfg.functions.get(start).transition_graph super_cfg = to_supergraph(function_cfg) return super_cfg def analyse_blocks(): retn_nodes = [] for node in cfg.nodes: if cfg.in_degree(node) == 0: prologue_node = node elif cfg.out_degree(node) == 0: retn_nodes.append(node) main_dispatcher_node = list(cfg.successors(prologue_node))[0] for node in cfg.predecessors(main_dispatcher_node): if node.addr != prologue_node.addr: predispatcher_node = node break relevant_nodes = [prologue_node] sub_dispatcher_nodes = [] for node in cfg.nodes: if node in cfg.predecessors(predispatcher_node): relevant_nodes.append(node) elif node != prologue_node and node not in retn_nodes: sub_dispatcher_nodes.append(node) return prologue_node, main_dispatcher_node, sub_dispatcher_nodes, retn_nodes, relevant_nodes, predispatcher_node def preprocess(block_addr): block = proj.factory.block(block_addr) has_branch = False for insn in block.capstone.insns: if insn.mnemonic == 'call': proj.hook(insn.address, hook=lambda state : proj.unhook(state.addr), length=5) print('Hook [%s\\t%s] at %#x' % (insn.mnemonic, insn.op_str, insn.address)) elif insn.mnemonic.startswith('cmov'): has_branch = True patch_addrs[block_addr] = insn.address cmov_types[block_addr] = insn.mnemonic return has_branch def symbolic_execute(block_addr, modify_cond=None): def modify_ITE_cond(state): expressions = list(state.scratch.irsb.statements[state.inspect.statement].expressions) if len(expressions) != 0 and isinstance(expressions[0], pyvex.expr.ITE): state.scratch.temps[expressions[0].cond.tmp] = modify_cond state.inspect._breakpoints['statement'] = [] state = proj.factory.blank_state(addr=block_addr, remove_options={ angr.sim_options.LAZY_SOLVES}) if modify_cond is not None: state.inspect.b('statement',when=BP_BEFORE, action=modify_ITE_cond) simgr = proj.factory.simgr(state) simgr.step() while len(simgr.active): for active in simgr.active: if active.addr in relevant_addrs: flow[block_addr].append(active.addr) return simgr.step() print('Error at block %#x' % block_addr) def fill_nops(addr, size): offset = addr - base_addr content[offset:offset + size] = b'\\x90' * size def fill_jmp(src, dest): offset = src - base_addr if dest != src + 5: content[offset] = 0xE9 content[offset + 1:offset + 5] = (dest - src - 5).to_bytes(4, 'little', signed=True) else: fill_nops(src, 5) def get_jx_opcode(jx_type): ks = Ks(KS_ARCH_X86, KS_MODE_32) code, count = ks.asm(f'{jx_type} 0xFFFFFFFF') return b''.join(map(lambda x: x.to_bytes(1, sys.byteorder), code[0:2])) def fill_jx(src, dest, cmov_type): offset = src - base_addr content[offset:offset + 2] = get_jx_opcode(cmov_type.replace('cmov', 'j')) content[offset + 2:offset + 6] = (dest - src - 6).to_bytes(4, 'little', signed=True) if __name__ == '__main__': parser = argparse.ArgumentParser(description='Deobfuscate OLLVM Control Flow Flatten') parser.add_argument('-f', '--file', help='binary to deobfuscate') parser.add_argument('-s', '--start', help='start address of the deobfuscation') parser.add_argument('-o', '--out', help='output file path') args = parser.parse_args() if args.file is None or args.start is None or args.out is None: parser.print_help() sys.exit(0) filename = args.file # \u6587\u4ef6\u540d start = int(args.start, 16) # \u8d77\u59cb\u5730\u5740 # load_options={'auto_load_libs': False} # \u907f\u514d\u751f\u6210cfg\u65f6\u89e3\u6790\u5230\u5171\u4eab\u5e93\u7684\u51fd\u6570 proj = angr.Project(filename, load_options={'auto_load_libs': False}) # \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u51fd\u6570CFG\uff08\u7c7b\u4f3c\u4e8eIDA\u7684CFG\uff09 # \u5206\u6790CFG\u5f97\u5230\u5165\u53e3\u5757\uff08\u5e8f\u8a00\uff09\u3001\u4e3b\u5206\u53d1\u5668\u3001\u8fd4\u56de\u5757\u3001\u771f\u5b9e\u5757\u3001\u9884\u5206\u53d1\u5757 print('**************** Step-1 Static Analysis(1/3) ****************') cfg = get_cfg() prologue_node, main_dispatcher_node, sub_dispatcher_nodes, retn_nodes, relevant_nodes, predispatcher_node = analyse_blocks() print('Prologue block at %#x' % prologue_node.addr) print('Main dispatcher block at %#x' % main_dispatcher_node.addr) print('Sub dispatcher blocks at ', [hex(node.addr) for node in sub_dispatcher_nodes]) print('Return blocks at ', [hex(node.addr) for node in retn_nodes]) print('Relevant blocks at ', [hex(node.addr) for node in relevant_nodes]) print('Predispatcher blocks at %#x' % predispatcher_node.addr) # \u7b2c\u4e8c\u6b65\uff1a\u6062\u590d\u771f\u5b9e\u5757\u524d\u540e\u5173\u7cfb\uff0c\u91cd\u5efa\u63a7\u5236\u6d41 # \u4ece\u4e00\u4e2a\u771f\u5b9e\u5757\u5f00\u59cb\u7b26\u53f7\u6267\u884c # \u5982\u679c\u6ca1\u6709\u5206\u652f\uff0c\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u5230\u8fbe\u7684\u771f\u5b9e\u5757 # \u5982\u679c\u6709\u5206\u652f\uff0c\u6761\u4ef6\u4e3aTrue\u65f6\u5230\u8fbe\u7684\u771f\u5b9e\u5757\u548c\u6761\u4ef6\u4e3aFalse\u65f6\u5230\u8fbe\u7684\u771f\u5b9e\u5757 print('**************** Step-2 Recover Control Flow(2/3) ****************') relevant_addrs = [node.addr for node in relevant_nodes] relevant_addrs += [node.addr for node in retn_nodes] patch_addrs = {} cmov_types = {} flow = defaultdict(list) for node in relevant_nodes: block_addr = node.addr has_branch = preprocess(block_addr) if has_branch: symbolic_execute(block_addr, modify_cond=claripy.BVV(1, 1)) symbolic_execute(block_addr, modify_cond=claripy.BVV(0, 1)) else: symbolic_execute(block_addr) for node in relevant_nodes: block_addr = node.addr print('Real successors of block %#x: ' % block_addr, [hex(child) for child in flow[block_addr]]) # \u7b2c\u4e09\u6b65\uff1aPatch\u7a0b\u5e8f\uff0c\u8f93\u51fa\u6062\u590d\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6 print('**************** Step-3 Patch Binary(3/3) ****************') base_addr = proj.loader.main_object.mapped_base with open(filename, 'rb') as file: content = bytearray(file.read()) for node in sub_dispatcher_nodes: fill_nops(node.addr, node.size) print('Fill nops from %#x to %#x' % (node.addr, node.addr + node.size)) for node in relevant_nodes: childs = flow[node.addr] if len(childs) == 1: patch_addr = node.addr + node.size - 5 if node.addr == prologue_node.addr: patch_addr = node.addr + node.size fill_jmp(patch_addr, childs[0]) print('Patch jmp %#x at %#x' % (childs[0], patch_addr)) elif len(childs) == 2: patch_addr = patch_addrs[node.addr] cmov_type = cmov_types[node.addr] fill_nops(patch_addr, node.addr + node.size - patch_addr) fill_jx(patch_addr, childs[0], cmov_type) fill_jmp(patch_addr + 6, childs[1]) print('Patch jz %#x at %#x' % (childs[0], patch_addr)) print('Patch jmp %#x at %#x' % (childs[1], patch_addr + 6)) else: print('Error') sys.exit(-1) with open(args.out, 'wb') as file: file.write(content)","title":"0x05. \u5b8c\u6574\u4ee3\u7801"},{"location":"angr/11_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A2%AD%E5%93%88VM%E7%B1%BBCTF%E8%B5%9B%E9%A2%98/","text":"\u5982\u679c\u8bfb\u8005\u5df2\u7ecf\u505a\u8fc7\u4e00\u4e9bCTF\u8d5b\u9898\uff0c\u6216\u8005\u5df2\u7ecf\u5bf9CTF\u8d5b\u4e8b\u975e\u5e38\u719f\u6089\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e86\u89e3\u8fc7VM\u8fd9\u7c7b\u9898\u578b\u3002VM\u7684\u7279\u70b9\u5c31\u662f\u7528\u975e\u5e38\u590d\u6742\u7684\u4ee3\u7801\u8868\u793a\u5176\u5b9e\u5e76\u4e0d\u590d\u6742\u7684\u52a0\u5bc6\u6d41\u7a0b\uff0c\u5982\u679c\u624b\u52a8\u5206\u6790\u7684\u8bdd\u5bf9\u9006\u5411\u8005\u6765\u8bf4\u662f\u4e2a\u4f53\u529b\u6d3b\uff0c\u4f46\u662f\u5229\u7528angr\u5219\u53ef\u4ee5\u505a\u5230\u8ba9\u6211\u4eec\u5728\u4e0d\u5206\u6790VM\u6307\u4ee4\u7684\u60c5\u51b5\u4e0b\u5f97\u5230flag\u3002 \u4ee52021\u7f8a\u57ce\u676f\u7684 EasyVM \u4e3a\u4f8b\uff0c\u6ce8\u610f \u4e0d\u662f\u6240\u6709\u7684VM\u9898\u90fd\u80fd\u7528angr\u68ad\u54c8\uff0c\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790 \uff01\u6709\u4e9b\u51fa\u9898\u4eba\u4f1a\u7279\u610f\u8003\u8651angr\u68ad\u54c8\u7684\u60c5\u51b5\uff0c\u8bbe\u7f6e\u9677\u9631\u62b5\u6297angr\u76f4\u63a5\u68ad\u54c8\uff0c\u6216\u8005\u7b97\u6cd5\u672c\u8eab\u6bd4\u8f83\u590d\u6742\uff0c\u8d85\u51fa\u4e86\u7b26\u53f7\u6267\u884c\u6216\u8005\u7ea6\u675f\u6c42\u89e3\u7684\u80fd\u529b\u3002 0x00. 2021\u7f8a\u57ce\u676fEasyVM\u9898\u89e3\uff08angr\u68ad\u54c8\u89e3\u6cd5\uff09 \u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684VM\u9898\uff0c\u987a\u4fbf\u5957\u4e86\u4e2aSMC\u7684\u5a03\uff0c\u52a8\u6001\u8c03\u8bd5\u5373\u53ef\u5f97\u5230\u771f\u6b63\u7684VM\u4ee3\u7801\uff1a \u4e00\u5f00\u59cb\u6211\u60f3\u5c1d\u8bd5\u7528explore\u76f4\u63a5\u8dd1\uff0c\u8dd1\u4e0d\u51fa\u6765\uff1a import angr import claripy proj = angr.Project('EasyVM') flag = claripy.BVS('flag', 100 * 8) state = proj.factory.entry_state(stdin=flag) simgr = proj.factory.simgr(state) simgr.explore(find=0x80492B2) print(simgr) print(simgr.found[0]) print(simgr.found[0].solver.eval(flag)) \u4f46\u5f53\u6211\u6362\u6210while+step\u4e4b\u540e\u5c31\u80fd\u8dd1\u51fa\u6765\u4e86\uff0c\u771f\u662f\u7384\u5b66\uff0c\u6709\u673a\u4f1a\u8bfb\u4e00\u8bfbexplore\u7684\u6e90\u7801\u4e00\u63a2\u7a76\u7adf\uff1a import angr import claripy import sys proj = angr.Project('EasyVM') flag = claripy.BVS('flag', 100 * 8) state = proj.factory.entry_state(stdin=flag) simgr = proj.factory.simgr(state) while len(simgr.active): for active in simgr.active: if active.addr == 0x80492B2: print(active.solver.eval(flag, cast_to=bytes)) sys.exit(0) simgr.step() \u8f93\u51fa\uff1a b'16584abc45baff901c59dde3b1bb6701a254b06cdc23\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'","title":"11 \u5229\u7528angr\u7b26\u53f7\u6267\u884c\u68ad\u54c8VM\u7c7bCTF\u8d5b\u9898"},{"location":"angr/11_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A2%AD%E5%93%88VM%E7%B1%BBCTF%E8%B5%9B%E9%A2%98/#0x00-2021easyvmangr","text":"\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684VM\u9898\uff0c\u987a\u4fbf\u5957\u4e86\u4e2aSMC\u7684\u5a03\uff0c\u52a8\u6001\u8c03\u8bd5\u5373\u53ef\u5f97\u5230\u771f\u6b63\u7684VM\u4ee3\u7801\uff1a \u4e00\u5f00\u59cb\u6211\u60f3\u5c1d\u8bd5\u7528explore\u76f4\u63a5\u8dd1\uff0c\u8dd1\u4e0d\u51fa\u6765\uff1a import angr import claripy proj = angr.Project('EasyVM') flag = claripy.BVS('flag', 100 * 8) state = proj.factory.entry_state(stdin=flag) simgr = proj.factory.simgr(state) simgr.explore(find=0x80492B2) print(simgr) print(simgr.found[0]) print(simgr.found[0].solver.eval(flag)) \u4f46\u5f53\u6211\u6362\u6210while+step\u4e4b\u540e\u5c31\u80fd\u8dd1\u51fa\u6765\u4e86\uff0c\u771f\u662f\u7384\u5b66\uff0c\u6709\u673a\u4f1a\u8bfb\u4e00\u8bfbexplore\u7684\u6e90\u7801\u4e00\u63a2\u7a76\u7adf\uff1a import angr import claripy import sys proj = angr.Project('EasyVM') flag = claripy.BVS('flag', 100 * 8) state = proj.factory.entry_state(stdin=flag) simgr = proj.factory.simgr(state) while len(simgr.active): for active in simgr.active: if active.addr == 0x80492B2: print(active.solver.eval(flag, cast_to=bytes)) sys.exit(0) simgr.step() \u8f93\u51fa\uff1a b'16584abc45baff901c59dde3b1bb6701a254b06cdc23\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'","title":"0x00. 2021\u7f8a\u57ce\u676fEasyVM\u9898\u89e3\uff08angr\u68ad\u54c8\u89e3\u6cd5\uff09"},{"location":"capstone/00_Capstone/","text":"Capstone\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u591a\u5e73\u53f0\u3001\u591a\u67b6\u6784\u7684\u53cd\u6c47\u7f16\u6846\u67b6\u3002\u7b80\u5355\u6765\u8bf4\uff0cCapstone\u7684\u529f\u80fd\u5c31\u662f\u5c06\u5b57\u8282\u7801\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u3002Capstone\u76ee\u524d\u652f\u6301\u7684\u53cd\u6c47\u7f16\u67b6\u6784\u6709\uff1aArm, Arm64 (Armv8), BPF, Ethereum Virtual Machine, M68K, M680X, Mips, MOS65XX, PowerPC, RISCV, Sparc, SystemZ, TMS320C64X, Web Assembly, XCore & X86 (include X86_64)\u3002 0x00. \u5b89\u88c5 Capstone\u7684\u5b89\u88c5\u975e\u5e38\u7b80\u5355\uff0c\u4ee5Python\u7248\u4e3a\u4f8b\uff1a sudo pip install capstone \u5728Windows\u6216root\u6743\u9650\u4e0b\uff1a pip install capstone \u5176\u4ed6\u7684\u5b89\u88c5\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002","title":"00 Capstone"},{"location":"capstone/00_Capstone/#0x00","text":"Capstone\u7684\u5b89\u88c5\u975e\u5e38\u7b80\u5355\uff0c\u4ee5Python\u7248\u4e3a\u4f8b\uff1a sudo pip install capstone \u5728Windows\u6216root\u6743\u9650\u4e0b\uff1a pip install capstone \u5176\u4ed6\u7684\u5b89\u88c5\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002","title":"0x00. \u5b89\u88c5"}]}